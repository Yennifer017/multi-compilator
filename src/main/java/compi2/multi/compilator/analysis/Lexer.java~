// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: jflex.jflex

/******************** codigo de usuario *******************************/
package compi2.multi.compilator.analysis;

import java_cup.runtime.*;
import java.util.*;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int PASCAL = 2;
  public static final int JAVA = 4;
  public static final int CHARLITERAL = 6;
  public static final int P_CHAR_STRING = 8;
  public static final int JCHARLITERAL = 10;
  public static final int STRING = 12;
  public static final int JSTRING = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\126\u0100\1\u2600\1\u0100\1\u2700"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00\10\u2e00"+
    "\31\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000\1\u5100"+
    "\3\u0100\1\u5200\1\u5300\1\u5400\11\u1f00\1\u5500\4\u0100\1\u5600"+
    "\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900\2\u1f00"+
    "\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00\41\u1f00"+
    "\1\u5f00\1\u0100\1\u6000\1\u6100\11\u1f00\1\u6200\22\u1f00\1\u6300"+
    "\1\u1f00\1\u6400\1\u6500\1\u1f00\1\u6600\1\u6700\1\u6800\1\u6900"+
    "\2\u1f00\1\u6a00\4\u1f00\1\u6b00\1\u6c00\1\u6d00\1\u6e00\1\u1f00"+
    "\1\u6f00\2\u1f00\1\u7000\1\u7100\1\u7200\2\u1f00\1\u7300\1\u1f00"+
    "\1\u7400\14\u1f00\1\u7500\4\u1f00\246\u0100\1\u7600\20\u0100\1\u7700"+
    "\1\u7800\25\u0100\1\u7900\34\u0100\1\u7a00\2\u0100\1\u7b00\11\u1f00"+
    "\2\u0100\1\u7c00\5\u1f00\23\u0100\1\u7d00\17\u0100\1\u7e00\u0adc\u1f00"+
    "\1\u7f00\1\u8000\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\6\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\2\25\2\26\4\27\2\30\1\31\1\32\1\33\1\34"+
    "\1\35\2\6\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\11\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\11\1\64\1\11\1\65\1\66\1\67\1\70"+
    "\1\11\1\6\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\11\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\11\1\110\1\111\1\112\1\113\1\114"+
    "\1\115\1\116\1\64\1\11\1\117\1\120\1\121\1\6"+
    "\6\0\1\122\32\0\2\6\4\11\4\6\1\11\2\6"+
    "\1\0\7\6\1\11\4\6\1\11\5\6\27\11\1\6"+
    "\37\11\1\6\u01ca\11\4\6\14\11\16\6\5\11\7\6"+
    "\1\11\1\6\1\11\21\6\160\0\5\11\1\6\2\11"+
    "\2\6\4\11\1\6\1\11\6\6\1\11\1\6\3\11"+
    "\1\6\1\11\1\6\24\11\1\6\123\11\1\6\213\11"+
    "\1\6\5\0\2\6\246\11\1\6\46\11\2\6\1\11"+
    "\6\6\51\11\6\6\1\11\1\6\55\0\1\6\1\0"+
    "\1\6\2\0\1\6\2\0\1\6\1\0\10\6\33\11"+
    "\4\6\4\11\15\6\6\0\5\6\1\11\4\6\13\0"+
    "\1\6\1\0\3\6\53\11\37\0\4\6\2\11\1\0"+
    "\143\11\1\6\1\11\10\0\1\6\6\0\2\11\2\0"+
    "\1\6\4\0\2\11\12\0\3\11\2\6\1\11\17\6"+
    "\1\0\1\11\1\0\36\11\33\0\2\6\131\11\13\0"+
    "\1\11\16\6\12\0\41\11\11\0\2\11\4\6\1\11"+
    "\2\6\1\0\30\11\4\0\1\11\11\0\1\11\3\0"+
    "\1\11\5\0\22\6\31\11\3\0\4\6\13\11\5\6"+
    "\30\11\1\6\6\11\1\6\2\0\6\6\10\0\52\11"+
    "\72\0\66\11\3\0\1\11\22\0\1\11\7\0\12\11"+
    "\2\0\2\6\12\0\1\6\20\11\3\0\1\6\10\11"+
    "\2\6\2\11\2\6\26\11\1\6\7\11\1\6\1\11"+
    "\3\6\4\11\2\6\1\0\1\11\7\0\2\6\2\0"+
    "\2\6\3\0\1\11\10\6\1\0\4\6\2\11\1\6"+
    "\3\11\2\0\2\6\12\0\4\11\7\6\2\11\1\6"+
    "\1\0\2\6\3\0\1\6\6\11\4\6\2\11\2\6"+
    "\26\11\1\6\7\11\1\6\2\11\1\6\2\11\1\6"+
    "\2\11\2\6\1\0\1\6\5\0\4\6\2\0\2\6"+
    "\3\0\3\6\1\0\7\6\4\11\1\6\1\11\7\6"+
    "\14\0\3\11\1\0\13\6\3\0\1\6\11\11\1\6"+
    "\3\11\1\6\26\11\1\6\7\11\1\6\2\11\1\6"+
    "\5\11\2\6\1\0\1\11\10\0\1\6\3\0\1\6"+
    "\3\0\2\6\1\11\17\6\2\11\2\0\2\6\12\0"+
    "\1\6\1\11\7\6\1\11\6\0\1\6\3\0\1\6"+
    "\10\11\2\6\2\11\2\6\26\11\1\6\7\11\1\6"+
    "\2\11\1\6\5\11\2\6\1\0\1\11\7\0\2\6"+
    "\2\0\2\6\3\0\7\6\3\0\4\6\2\11\1\6"+
    "\3\11\2\0\2\6\12\0\1\6\1\11\20\6\1\0"+
    "\1\11\1\6\6\11\3\6\3\11\1\6\4\11\3\6"+
    "\2\11\1\6\1\11\1\6\2\11\3\6\2\11\3\6"+
    "\3\11\3\6\14\11\4\6\5\0\3\6\3\0\1\6"+
    "\4\0\2\6\1\11\6\6\1\0\16\6\12\0\11\6"+
    "\1\11\6\6\5\0\10\11\1\6\3\11\1\6\27\11"+
    "\1\6\20\11\2\6\1\0\1\11\7\0\1\6\3\0"+
    "\1\6\4\0\7\6\2\0\1\6\3\11\2\6\1\11"+
    "\2\6\2\11\2\0\2\6\12\0\20\6\1\11\3\0"+
    "\1\6\10\11\1\6\3\11\1\6\27\11\1\6\12\11"+
    "\1\6\5\11\2\6\1\0\1\11\7\0\1\6\3\0"+
    "\1\6\4\0\7\6\2\0\6\6\2\11\1\6\2\11"+
    "\2\0\2\6\12\0\1\6\2\11\1\0\14\6\4\0"+
    "\11\11\1\6\3\11\1\6\51\11\2\0\1\11\7\0"+
    "\1\6\3\0\1\6\4\0\1\11\5\6\3\11\1\0"+
    "\7\6\3\11\2\0\2\6\12\0\12\6\6\11\1\6"+
    "\3\0\1\6\22\11\3\6\30\11\1\6\11\11\1\6"+
    "\1\11\2\6\7\11\3\6\1\0\4\6\6\0\1\6"+
    "\1\0\1\6\10\0\6\6\12\0\2\6\2\0\15\6"+
    "\60\11\1\0\2\11\7\0\4\6\10\11\10\0\1\6"+
    "\12\0\47\6\2\11\1\6\1\11\1\6\5\11\1\6"+
    "\30\11\1\6\1\11\1\6\12\11\1\0\2\11\11\0"+
    "\1\11\2\6\5\11\1\6\1\11\1\6\7\0\1\6"+
    "\12\0\2\6\4\11\40\6\1\11\27\6\2\0\6\6"+
    "\12\0\13\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\2\0\10\11\1\6\44\11\4\6\24\0\1\6\2\0"+
    "\5\11\13\0\1\6\44\0\11\6\1\0\71\6\53\11"+
    "\24\0\1\11\12\0\6\6\6\11\4\0\4\11\3\0"+
    "\1\11\3\0\2\11\7\0\3\11\4\0\15\11\14\0"+
    "\1\11\17\0\2\6\46\11\1\6\1\11\5\6\1\11"+
    "\2\6\53\11\1\6\115\11\1\6\4\11\2\6\7\11"+
    "\1\6\1\11\1\6\4\11\2\6\51\11\1\6\4\11"+
    "\2\6\41\11\1\6\4\11\2\6\7\11\1\6\1\11"+
    "\1\6\4\11\2\6\17\11\1\6\71\11\1\6\4\11"+
    "\2\6\103\11\2\6\3\0\40\6\20\11\20\6\126\11"+
    "\2\6\6\11\3\6\u016c\11\2\6\21\11\1\6\32\11"+
    "\5\6\113\11\3\6\13\11\7\6\22\11\4\0\11\6"+
    "\23\11\3\0\13\6\22\11\2\0\14\6\15\11\1\6"+
    "\3\11\1\6\2\0\14\6\64\11\40\0\3\6\1\11"+
    "\3\6\2\11\1\0\2\6\12\0\41\6\17\0\6\6"+
    "\131\11\7\6\5\11\2\0\42\11\1\0\1\11\5\6"+
    "\106\11\12\6\37\11\1\6\14\0\4\6\14\0\12\6"+
    "\12\0\36\11\2\6\5\11\13\6\54\11\4\6\32\11"+
    "\6\6\12\0\46\6\27\11\5\0\4\6\65\11\12\0"+
    "\1\6\35\0\2\6\13\0\6\6\12\0\15\6\1\11"+
    "\10\6\16\0\1\6\20\0\61\6\5\0\57\11\21\0"+
    "\10\11\3\6\12\0\21\6\11\0\14\6\3\0\36\11"+
    "\15\0\2\11\12\0\54\11\16\0\14\6\44\11\24\0"+
    "\10\6\12\0\3\6\3\11\12\0\44\11\2\6\11\11"+
    "\7\6\53\11\2\6\3\11\20\6\3\0\1\6\25\0"+
    "\4\11\1\0\6\11\1\0\2\11\3\0\1\11\5\6"+
    "\300\11\100\0\26\11\2\6\6\11\2\6\46\11\2\6"+
    "\6\11\2\6\10\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\37\11\2\6\65\11\1\6\7\11\1\6"+
    "\1\11\3\6\3\11\1\6\7\11\3\6\4\11\2\6"+
    "\6\11\4\6\15\11\5\6\3\11\1\6\7\11\16\6"+
    "\5\0\30\6\2\3\5\0\20\6\2\11\23\6\1\11"+
    "\13\6\5\0\1\6\12\0\1\6\1\11\15\6\1\11"+
    "\20\6\15\11\3\6\41\11\17\6\15\0\4\6\1\0"+
    "\3\6\14\0\21\6\1\11\4\6\1\11\2\6\12\11"+
    "\1\6\1\11\3\6\5\11\6\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\4\11\1\6\13\11\2\6\4\11"+
    "\5\6\5\11\4\6\1\11\21\6\51\11\u0177\6\345\11"+
    "\6\6\4\11\3\0\2\11\14\6\46\11\1\6\1\11"+
    "\5\6\1\11\2\6\70\11\7\6\1\11\17\6\1\0"+
    "\27\11\11\6\7\11\1\6\7\11\1\6\7\11\1\6"+
    "\7\11\1\6\7\11\1\6\7\11\1\6\7\11\1\6"+
    "\7\11\1\6\40\0\57\6\1\11\325\6\3\11\31\6"+
    "\11\11\6\0\1\6\5\11\2\6\5\11\4\6\126\11"+
    "\2\6\2\0\2\6\3\11\1\6\132\11\1\6\4\11"+
    "\5\6\53\11\1\6\136\11\21\6\40\11\60\6\320\11"+
    "\100\6\215\11\103\6\56\11\2\6\15\11\3\6\20\11"+
    "\12\0\2\11\24\6\57\11\1\0\4\6\12\0\1\6"+
    "\37\11\2\0\120\11\2\0\45\6\11\11\2\6\147\11"+
    "\2\6\100\11\5\6\2\11\1\6\1\11\1\6\5\11"+
    "\30\6\20\11\1\0\3\11\1\0\4\11\1\0\27\11"+
    "\5\0\4\6\1\0\13\6\1\11\7\6\64\11\14\6"+
    "\2\0\62\11\22\0\12\6\12\0\6\6\22\0\6\11"+
    "\3\6\1\11\1\6\2\11\13\0\34\11\10\0\2\6"+
    "\27\11\15\0\14\6\35\11\3\6\4\0\57\11\16\0"+
    "\16\6\1\11\12\0\6\6\5\11\1\0\12\11\12\0"+
    "\5\11\1\6\51\11\16\0\11\6\3\11\1\0\10\11"+
    "\2\0\2\6\12\0\6\6\27\11\3\6\1\11\3\0"+
    "\62\11\1\0\1\11\3\0\2\11\2\0\5\11\2\0"+
    "\1\11\1\0\1\11\30\6\3\11\2\6\13\11\5\0"+
    "\2\6\3\11\2\0\12\6\6\11\2\6\6\11\2\6"+
    "\6\11\11\6\7\11\1\6\7\11\1\6\53\11\1\6"+
    "\16\11\6\6\163\11\10\0\1\6\2\0\2\6\12\0"+
    "\6\6\244\11\14\6\27\11\4\6\61\11\4\6\u0100\3"+
    "\156\11\2\6\152\11\46\6\7\11\14\6\5\11\5\6"+
    "\1\11\1\0\12\11\1\6\15\11\1\6\5\11\1\6"+
    "\1\11\1\6\2\11\1\6\2\11\1\6\154\11\41\6"+
    "\153\11\22\6\100\11\2\6\66\11\50\6\15\11\3\6"+
    "\20\0\20\6\20\0\3\6\2\11\30\6\3\11\31\6"+
    "\1\11\6\6\5\11\1\6\207\11\2\6\1\0\4\6"+
    "\1\11\13\6\12\0\7\6\32\11\4\6\1\11\1\6"+
    "\32\11\13\6\131\11\3\6\6\11\2\6\6\11\2\6"+
    "\6\11\2\6\3\11\3\6\2\11\3\6\2\11\22\6"+
    "\3\0\4\6\14\11\1\6\32\11\1\6\23\11\1\6"+
    "\2\11\1\6\17\11\2\6\16\11\42\6\173\11\105\6"+
    "\65\11\210\6\1\0\202\6\35\11\3\6\61\11\17\6"+
    "\1\0\37\6\40\11\15\6\36\11\5\6\46\11\5\0"+
    "\5\6\36\11\2\6\44\11\4\6\10\11\1\6\5\11"+
    "\52\6\236\11\2\6\12\0\6\6\44\11\4\6\44\11"+
    "\4\6\50\11\10\6\64\11\14\6\13\11\1\6\17\11"+
    "\1\6\7\11\1\6\2\11\1\6\13\11\1\6\17\11"+
    "\1\6\7\11\1\6\2\11\103\6\67\11\11\6\26\11"+
    "\12\6\10\11\30\6\6\11\1\6\52\11\1\6\11\11"+
    "\105\6\6\11\2\6\1\11\1\6\54\11\1\6\2\11"+
    "\3\6\1\11\2\6\27\11\12\6\27\11\11\6\37\11"+
    "\101\6\23\11\1\6\2\11\12\6\26\11\12\6\32\11"+
    "\106\6\70\11\6\6\2\11\100\6\1\11\3\0\1\6"+
    "\2\0\5\6\4\0\4\11\1\6\3\11\1\6\35\11"+
    "\2\6\3\0\4\6\1\0\40\6\35\11\3\6\35\11"+
    "\43\6\10\11\1\6\34\11\2\0\31\6\66\11\12\6"+
    "\26\11\12\6\23\11\15\6\22\11\156\6\111\11\67\6"+
    "\63\11\15\6\63\11\15\6\44\11\4\0\10\6\12\0"+
    "\u0146\6\52\11\1\6\2\0\3\6\2\11\113\6\3\0"+
    "\35\11\12\6\1\11\10\6\26\11\13\0\37\6\22\11"+
    "\4\0\52\6\25\11\33\6\27\11\11\6\3\0\65\11"+
    "\17\0\37\6\13\0\2\11\2\0\1\11\11\6\4\0"+
    "\55\11\13\0\2\6\1\0\4\6\1\0\12\6\1\0"+
    "\2\6\31\11\7\6\12\0\6\6\3\0\44\11\16\0"+
    "\1\6\12\0\4\6\1\11\2\0\1\11\10\6\43\11"+
    "\1\0\2\6\1\11\11\6\3\0\60\11\16\0\4\11"+
    "\4\6\4\0\1\6\14\0\1\11\1\6\1\11\43\6"+
    "\22\11\1\6\31\11\14\0\6\6\1\0\2\11\1\0"+
    "\76\6\7\11\1\6\1\11\1\6\4\11\1\6\17\11"+
    "\1\6\12\11\7\6\57\11\14\0\5\6\12\0\6\6"+
    "\4\0\1\6\10\11\2\6\2\11\2\6\26\11\1\6"+
    "\7\11\1\6\2\11\1\6\5\11\1\6\2\0\1\11"+
    "\7\0\2\6\2\0\2\6\3\0\2\6\1\11\6\6"+
    "\1\0\5\6\5\11\2\0\2\6\7\0\3\6\5\0"+
    "\213\6\65\11\22\0\4\11\5\6\12\0\4\6\1\0"+
    "\3\11\36\6\60\11\24\0\2\11\1\6\1\11\10\6"+
    "\12\0\246\6\57\11\7\0\2\6\11\0\27\6\4\11"+
    "\2\0\42\6\60\11\21\0\3\6\1\11\13\6\12\0"+
    "\46\6\53\11\15\0\1\11\7\6\12\0\66\6\33\11"+
    "\2\6\17\0\4\6\12\0\6\6\7\11\271\6\54\11"+
    "\17\0\145\6\100\11\12\0\25\6\10\11\2\6\1\11"+
    "\2\6\10\11\1\6\2\11\1\6\30\11\6\0\1\6"+
    "\2\0\2\6\4\0\1\11\1\0\1\11\2\0\14\6"+
    "\12\0\106\6\10\11\2\6\47\11\7\0\2\6\7\0"+
    "\1\11\1\6\1\11\1\0\33\6\1\11\12\0\50\11"+
    "\7\0\1\11\4\0\10\6\1\0\10\6\1\11\13\0"+
    "\56\11\20\0\3\6\1\11\22\6\111\11\7\6\11\11"+
    "\1\6\45\11\10\0\1\6\10\0\1\11\17\6\12\0"+
    "\30\6\36\11\2\6\26\0\1\6\16\0\111\6\7\11"+
    "\1\6\2\11\1\6\46\11\6\0\3\6\1\0\1\6"+
    "\2\0\1\6\7\0\1\11\1\0\10\6\12\0\6\6"+
    "\6\11\1\6\2\11\1\6\40\11\5\0\1\6\2\0"+
    "\1\6\5\0\1\11\7\6\12\0\u0136\6\23\11\4\0"+
    "\11\6\2\0\1\11\1\0\15\11\1\6\42\11\7\0"+
    "\3\6\5\0\15\6\12\0\126\6\1\11\54\6\4\11"+
    "\37\6\232\11\146\6\157\11\21\6\304\11\u014c\6\141\11"+
    "\17\6\60\11\21\0\6\11\17\0\252\6\107\11\271\6"+
    "\71\11\7\6\37\11\1\6\12\0\6\6\117\11\1\6"+
    "\12\0\6\6\36\11\2\6\5\0\13\6\60\11\7\0"+
    "\11\6\4\11\14\6\12\0\11\6\25\11\5\6\23\11"+
    "\260\6\100\11\200\6\113\11\4\6\1\0\1\11\67\0"+
    "\7\6\4\0\15\11\100\6\2\11\1\6\1\11\1\0"+
    "\13\6\2\0\16\6\370\11\10\6\326\11\52\6\11\11"+
    "\u01e7\6\4\11\1\6\7\11\1\6\2\11\1\6\43\11"+
    "\17\6\1\11\35\6\3\11\2\6\1\11\16\6\4\11"+
    "\10\6\u018c\11\4\6\153\11\5\6\15\11\3\6\11\11"+
    "\7\6\12\11\3\6\2\0\1\6\4\0\134\6\56\0"+
    "\2\6\27\0\u011e\6\5\0\3\6\26\0\2\6\7\0"+
    "\36\6\4\0\224\6\3\0\273\6\125\11\1\6\107\11"+
    "\1\6\2\11\2\6\1\11\2\6\2\11\2\6\4\11"+
    "\1\6\14\11\1\6\1\11\1\6\7\11\1\6\101\11"+
    "\1\6\4\11\2\6\10\11\1\6\7\11\1\6\34\11"+
    "\1\6\4\11\1\6\5\11\1\6\1\11\3\6\7\11"+
    "\1\6\u0154\11\2\6\31\11\1\6\31\11\1\6\37\11"+
    "\1\6\31\11\1\6\37\11\1\6\31\11\1\6\37\11"+
    "\1\6\31\11\1\6\37\11\1\6\31\11\1\6\10\11"+
    "\2\6\151\0\4\6\62\0\10\6\1\0\16\6\1\0"+
    "\26\6\5\0\1\6\17\0\120\6\37\11\6\6\6\11"+
    "\325\6\7\0\1\6\21\0\2\6\7\0\1\6\2\0"+
    "\1\6\5\0\5\6\76\11\41\6\1\0\160\6\55\11"+
    "\3\6\7\0\7\11\2\6\12\0\4\6\1\11\u0141\6"+
    "\36\11\1\0\21\6\54\11\16\0\5\6\1\11\320\6"+
    "\34\11\16\0\346\6\7\11\1\6\4\11\1\6\2\11"+
    "\1\6\17\11\1\6\305\11\13\6\7\0\51\6\104\11"+
    "\7\0\1\11\4\6\12\0\u0156\6\1\11\117\6\4\11"+
    "\1\6\33\11\1\6\2\11\1\6\1\11\2\6\1\11"+
    "\1\6\12\11\1\6\4\11\1\6\1\11\1\6\1\11"+
    "\6\6\1\11\4\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\3\11\1\6\2\11\1\6\1\11\2\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\2\11\1\6\1\11\2\6\4\11\1\6\7\11"+
    "\1\6\4\11\1\6\4\11\1\6\1\11\1\6\12\11"+
    "\1\6\21\11\5\6\3\11\1\6\5\11\1\6\21\11"+
    "\u0134\6\12\0\6\6\340\11\40\6\72\11\6\6\336\11"+
    "\2\6\u0182\11\16\6\u0131\11\17\6\156\11\242\6\36\11"+
    "\342\6\113\11\5\6\u0160\11\121\6\1\0\36\6\140\0"+
    "\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[33024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\2\5\1\30\1\31\1\32\14\5\1\33\1\1\1\34"+
    "\1\35\1\36\1\11\1\23\1\25\1\37\21\35\1\33"+
    "\1\40\1\1\1\41\1\20\14\5\1\1\1\2\1\42"+
    "\1\0\1\42\1\6\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\23\1\24\1\25\1\27\1\30"+
    "\1\1\1\31\1\32\1\33\1\34\1\43\1\6\1\44"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\23\1\24\1\25\1\27\1\30\1\1\1\31\1\32"+
    "\1\33\1\34\1\1\1\2\1\0\1\6\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\23\1\24"+
    "\1\25\1\27\1\30\1\1\1\31\1\32\1\33\1\34"+
    "\1\43\2\45\1\6\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\23\1\24\1\25\1\27\1\30"+
    "\1\1\1\31\1\32\1\33\1\34\1\46\1\0\1\47"+
    "\1\0\1\50\1\51\10\5\1\52\4\5\1\53\7\5"+
    "\1\54\1\0\1\26\10\35\1\52\4\35\1\53\1\55"+
    "\2\35\1\56\1\54\7\35\1\57\5\35\1\0\1\60"+
    "\1\0\1\60\16\5\1\61\13\62\1\43\1\63\1\50"+
    "\1\51\1\64\1\65\2\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\12\62\1\50\1\51\1\64\1\65"+
    "\2\76\1\67\1\70\1\71\1\72\1\73\1\74\2\0"+
    "\1\77\12\5\1\100\2\5\1\101\6\5\2\0\1\47"+
    "\11\35\1\102\1\103\2\35\1\104\1\105\7\35\1\106"+
    "\5\35\1\107\2\35\2\0\1\60\6\5\1\103\7\5"+
    "\1\110\1\111\1\112\2\0\1\113\1\114\1\115\1\116"+
    "\1\117\1\120\1\121\1\66\1\122\1\123\1\124\2\0"+
    "\1\125\1\126\1\127\1\130\1\131\1\132\1\76\3\0"+
    "\1\133\3\5\1\134\1\135\3\5\1\136\3\5\1\137"+
    "\3\5\1\140\1\5\1\0\4\35\1\134\1\135\3\35"+
    "\1\136\6\35\1\141\5\35\1\142\1\143\2\35\1\144"+
    "\1\0\5\5\1\145\6\5\1\146\3\0\2\5\1\147"+
    "\1\5\1\150\1\5\1\151\1\5\1\152\2\5\1\153"+
    "\1\154\1\155\1\35\1\147\1\150\5\35\1\156\7\35"+
    "\1\157\1\153\1\5\1\160\2\5\1\161\1\156\4\5"+
    "\1\162\1\163\2\0\1\164\1\5\1\165\2\5\1\166"+
    "\1\167\2\35\1\170\2\35\1\171\3\35\1\172\1\173"+
    "\1\174\1\166\1\167\6\5\1\175\1\174\2\0\1\154"+
    "\1\5\1\176\1\177\2\35\1\101\1\200\1\35\1\201"+
    "\1\177\1\202\1\203\1\200\1\204\1\5\1\205\1\0"+
    "\2\206\1\207\1\35\1\5\1\0\1\210\1\211\1\212";

  private static int [] zzUnpackAction() {
    int [] result = new int[580];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\123\0\246\0\371\0\u014c\0\u019f\0\u01f2\0\u0245"+
    "\0\u0298\0\u0298\0\u02eb\0\u0298\0\u0298\0\u033e\0\u0391\0\u03e4"+
    "\0\u0298\0\u0298\0\u0298\0\u0298\0\u0298\0\u0298\0\u0298\0\u0298"+
    "\0\u0298\0\u0437\0\u0437\0\u0298\0\u0298\0\u048a\0\u04dd\0\u0530"+
    "\0\u0583\0\u05d6\0\u0298\0\u0298\0\u0298\0\u0629\0\u067c\0\u06cf"+
    "\0\u0722\0\u0775\0\u07c8\0\u081b\0\u086e\0\u08c1\0\u0914\0\u0967"+
    "\0\u09ba\0\u0298\0\u0a0d\0\u0298\0\u0a60\0\u0298\0\u0ab3\0\u0b06"+
    "\0\u0b59\0\u0298\0\u0bac\0\u0bff\0\u0c52\0\u0ca5\0\u0cf8\0\u0d4b"+
    "\0\u0d9e\0\u0df1\0\u0e44\0\u0e97\0\u0eea\0\u0f3d\0\u0f90\0\u0fe3"+
    "\0\u1036\0\u1089\0\u10dc\0\u112f\0\u0298\0\u03e4\0\u0298\0\u1182"+
    "\0\u11d5\0\u1228\0\u127b\0\u12ce\0\u1321\0\u1374\0\u13c7\0\u141a"+
    "\0\u146d\0\u14c0\0\u1513\0\u1566\0\u15b9\0\u15b9\0\u0298\0\u15b9"+
    "\0\u160c\0\u15b9\0\u15b9\0\u15b9\0\u15b9\0\u15b9\0\u15b9\0\u15b9"+
    "\0\u15b9\0\u15b9\0\u15b9\0\u15b9\0\u165f\0\u16b2\0\u15b9\0\u1705"+
    "\0\u15b9\0\u15b9\0\u15b9\0\u15b9\0\u1758\0\u1758\0\u0298\0\u1758"+
    "\0\u1758\0\u1758\0\u1758\0\u1758\0\u1758\0\u1758\0\u1758\0\u1758"+
    "\0\u1758\0\u17ab\0\u17fe\0\u1758\0\u1851\0\u1758\0\u1758\0\u1758"+
    "\0\u1758\0\u18a4\0\u18a4\0\u18a4\0\u18a4\0\u18a4\0\u18a4\0\u18a4"+
    "\0\u18a4\0\u18a4\0\u18a4\0\u18a4\0\u18a4\0\u18a4\0\u18a4\0\u18f7"+
    "\0\u194a\0\u18a4\0\u199d\0\u18a4\0\u18a4\0\u18a4\0\u18a4\0\u19f0"+
    "\0\u0298\0\u1a43\0\u19f0\0\u19f0\0\u19f0\0\u19f0\0\u19f0\0\u19f0"+
    "\0\u19f0\0\u19f0\0\u19f0\0\u19f0\0\u19f0\0\u1a96\0\u1ae9\0\u19f0"+
    "\0\u1b3c\0\u19f0\0\u19f0\0\u19f0\0\u19f0\0\u0298\0\u1b8f\0\u0298"+
    "\0\u1be2\0\u0298\0\u0298\0\u1c35\0\u1c88\0\u1cdb\0\u1d2e\0\u1d81"+
    "\0\u1dd4\0\u1e27\0\u1e7a\0\u033e\0\u1ecd\0\u1f20\0\u1f73\0\u1fc6"+
    "\0\u033e\0\u2019\0\u206c\0\u20bf\0\u2112\0\u2165\0\u21b8\0\u220b"+
    "\0\u0298\0\u225e\0\u0298\0\u22b1\0\u2304\0\u2357\0\u23aa\0\u23fd"+
    "\0\u2450\0\u24a3\0\u24f6\0\u2549\0\u259c\0\u25ef\0\u2642\0\u2695"+
    "\0\u0a60\0\u26e8\0\u273b\0\u278e\0\u0a60\0\u0a60\0\u27e1\0\u2834"+
    "\0\u2887\0\u28da\0\u292d\0\u2980\0\u29d3\0\u0a60\0\u2a26\0\u2a79"+
    "\0\u2acc\0\u2b1f\0\u2b72\0\u112f\0\u0298\0\u2bc5\0\u2c18\0\u2c6b"+
    "\0\u2cbe\0\u2d11\0\u2d64\0\u2db7\0\u2e0a\0\u2e5d\0\u2eb0\0\u2f03"+
    "\0\u2f56\0\u2fa9\0\u2ffc\0\u304f\0\u30a2\0\u0298\0\u0298\0\u30f5"+
    "\0\u3148\0\u319b\0\u31ee\0\u3241\0\u3294\0\u32e7\0\u333a\0\u338d"+
    "\0\u33e0\0\u3433\0\u0298\0\u3433\0\u3433\0\u30f5\0\u3148\0\u3486"+
    "\0\u34d9\0\u3241\0\u3294\0\u32e7\0\u333a\0\u338d\0\u33e0\0\u0298"+
    "\0\u352c\0\u357f\0\u35d2\0\u3625\0\u3678\0\u36cb\0\u371e\0\u3771"+
    "\0\u37c4\0\u3817\0\u19f0\0\u19f0\0\u0298\0\u0298\0\u386a\0\u38bd"+
    "\0\u0298\0\u0298\0\u0298\0\u0298\0\u0298\0\u0298\0\u3910\0\u3963"+
    "\0\u1be2\0\u39b6\0\u3a09\0\u3a5c\0\u3aaf\0\u3b02\0\u3b55\0\u3ba8"+
    "\0\u3bfb\0\u3c4e\0\u3ca1\0\u033e\0\u3cf4\0\u3d47\0\u033e\0\u3d9a"+
    "\0\u3ded\0\u3e40\0\u3e93\0\u3ee6\0\u3f39\0\u3f8c\0\u3fdf\0\u0a60"+
    "\0\u4032\0\u4085\0\u40d8\0\u412b\0\u417e\0\u41d1\0\u4224\0\u4277"+
    "\0\u42ca\0\u0a60\0\u0a60\0\u431d\0\u4370\0\u0a60\0\u0a60\0\u43c3"+
    "\0\u4416\0\u4469\0\u44bc\0\u450f\0\u4562\0\u45b5\0\u0a60\0\u4608"+
    "\0\u465b\0\u46ae\0\u4701\0\u4754\0\u0a60\0\u47a7\0\u47fa\0\u484d"+
    "\0\u48a0\0\u48f3\0\u4946\0\u4999\0\u49ec\0\u4a3f\0\u4a92\0\u4ae5"+
    "\0\u033e\0\u4b38\0\u4b8b\0\u4bde\0\u4c31\0\u4c84\0\u4cd7\0\u4d2a"+
    "\0\u0298\0\u0298\0\u0298\0\u31ee\0\u4d7d\0\u0298\0\u0298\0\u0298"+
    "\0\u0298\0\u0298\0\u0298\0\u0298\0\u4dd0\0\u0298\0\u0298\0\u0298"+
    "\0\u3625\0\u4e23\0\u0298\0\u0298\0\u0298\0\u0298\0\u0298\0\u0298"+
    "\0\u0298\0\u4e76\0\u4ec9\0\u4f1c\0\u033e\0\u4f6f\0\u4fc2\0\u5015"+
    "\0\u033e\0\u033e\0\u5068\0\u50bb\0\u510e\0\u033e\0\u5161\0\u51b4"+
    "\0\u5207\0\u033e\0\u525a\0\u52ad\0\u5300\0\u033e\0\u5353\0\u53a6"+
    "\0\u53f9\0\u544c\0\u549f\0\u54f2\0\u0a60\0\u0a60\0\u5545\0\u5598"+
    "\0\u55eb\0\u0a60\0\u563e\0\u5691\0\u56e4\0\u5737\0\u578a\0\u57dd"+
    "\0\u0a60\0\u5830\0\u5883\0\u58d6\0\u5929\0\u597c\0\u0a60\0\u0a60"+
    "\0\u59cf\0\u5a22\0\u0a60\0\u5a75\0\u5ac8\0\u5b1b\0\u5b6e\0\u5bc1"+
    "\0\u5c14\0\u033e\0\u5c67\0\u5cba\0\u5d0d\0\u5d60\0\u5db3\0\u5e06"+
    "\0\u033e\0\u5e59\0\u5eac\0\u5eff\0\u5f52\0\u5fa5\0\u033e\0\u5ff8"+
    "\0\u033e\0\u604b\0\u033e\0\u609e\0\u033e\0\u60f1\0\u6144\0\u033e"+
    "\0\u0a60\0\u0a60\0\u6197\0\u0a60\0\u0a60\0\u61ea\0\u623d\0\u6290"+
    "\0\u62e3\0\u6336\0\u6389\0\u63dc\0\u642f\0\u6482\0\u64d5\0\u6528"+
    "\0\u657b\0\u65ce\0\u0a60\0\u0a60\0\u6621\0\u033e\0\u6674\0\u66c7"+
    "\0\u033e\0\u671a\0\u676d\0\u67c0\0\u6813\0\u6866\0\u033e\0\u0298"+
    "\0\u68b9\0\u690c\0\u033e\0\u695f\0\u033e\0\u69b2\0\u6a05\0\u033e"+
    "\0\u033e\0\u6a58\0\u6aab\0\u0a60\0\u6afe\0\u6b51\0\u0a60\0\u6ba4"+
    "\0\u6bf7\0\u6c4a\0\u0a60\0\u0a60\0\u0a60\0\u0a60\0\u0a60\0\u6c9d"+
    "\0\u6cf0\0\u6d43\0\u6d96\0\u6de9\0\u6e3c\0\u033e\0\u033e\0\u6e8f"+
    "\0\u6ee2\0\u033e\0\u6f35\0\u033e\0\u0a60\0\u6f88\0\u6fdb\0\u0a60"+
    "\0\u0a60\0\u702e\0\u0a60\0\u033e\0\u033e\0\u033e\0\u033e\0\u033e"+
    "\0\u7081\0\u0298\0\u70d4\0\u033e\0\u0a60\0\u0a60\0\u7127\0\u717a"+
    "\0\u71cd\0\u0a60\0\u033e\0\u0298";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[580];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\2\12\1\0\1\12\1\13\1\11\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\3\33\1\34\1\35"+
    "\1\36\1\37\1\40\11\16\1\41\5\16\1\42\7\16"+
    "\1\43\1\11\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\16\1\55\2\16\1\56\4\16"+
    "\1\57\2\16\1\60\1\61\1\16\1\62\1\63\1\64"+
    "\1\0\1\11\2\12\1\0\1\12\1\13\3\11\1\65"+
    "\1\17\1\11\1\66\1\67\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\3\33\1\70\1\35\1\71"+
    "\1\72\1\40\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\2\65\1\101\3\65\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\65\1\43\1\11"+
    "\1\44\1\45\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\2\65\1\101\2\65\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\65\1\114\1\11"+
    "\1\64\1\0\1\11\2\12\1\0\1\12\1\13\1\11"+
    "\1\14\1\115\1\16\1\17\1\116\1\117\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\120\4\33\1\34"+
    "\1\35\1\36\1\37\1\40\21\16\1\121\5\16\1\43"+
    "\1\11\1\44\1\45\1\16\1\122\1\123\1\124\1\125"+
    "\1\126\2\16\1\127\3\16\1\130\1\16\1\131\1\132"+
    "\1\133\1\134\1\16\1\60\1\61\1\16\1\62\1\63"+
    "\1\64\1\0\1\135\1\136\1\137\1\140\1\136\1\141"+
    "\4\135\1\142\1\135\1\11\1\143\1\144\1\145\1\146"+
    "\1\147\1\150\1\151\1\152\4\135\1\153\1\154\1\155"+
    "\1\135\1\156\27\135\1\157\1\160\1\161\1\162\26\135"+
    "\1\163\1\135\1\164\1\140\2\165\1\137\2\165\1\141"+
    "\4\165\1\166\1\165\1\167\1\170\1\171\1\172\1\173"+
    "\1\174\1\175\1\176\1\177\4\165\1\200\1\201\1\202"+
    "\1\165\1\203\27\165\1\204\1\205\1\206\1\207\26\165"+
    "\1\210\1\165\1\211\1\165\1\212\1\213\1\137\1\214"+
    "\1\213\1\141\4\212\1\215\1\212\1\11\1\216\1\217"+
    "\1\220\1\221\1\222\1\223\1\224\1\225\4\212\1\226"+
    "\1\227\1\230\1\212\1\231\27\212\1\232\1\233\1\234"+
    "\1\235\26\212\1\236\1\212\1\237\1\214\2\240\1\241"+
    "\2\240\1\242\2\240\1\167\1\240\1\243\2\240\1\244"+
    "\1\245\1\246\1\247\1\250\1\251\1\252\1\253\4\240"+
    "\1\254\1\255\1\256\1\240\1\257\27\240\1\260\1\261"+
    "\1\262\1\263\26\240\1\264\1\240\1\265\3\240\1\241"+
    "\2\240\1\242\2\240\1\266\1\240\1\243\2\240\1\244"+
    "\1\245\1\246\1\247\1\250\1\251\1\252\1\253\4\240"+
    "\1\254\1\255\1\256\1\240\1\257\27\240\1\260\1\261"+
    "\1\262\1\263\26\240\1\264\1\240\1\265\1\240\125\0"+
    "\1\12\120\0\1\16\10\0\1\16\13\0\4\16\5\0"+
    "\27\16\4\0\26\16\3\0\1\16\12\0\1\267\123\0"+
    "\1\270\132\0\1\271\1\0\4\33\126\0\1\272\122\0"+
    "\1\72\122\0\1\273\66\0\1\16\10\0\1\16\13\0"+
    "\4\16\5\0\1\274\26\16\4\0\26\16\3\0\2\16"+
    "\10\0\1\16\13\0\4\16\5\0\1\275\26\16\4\0"+
    "\26\16\3\0\2\16\10\0\1\16\13\0\4\16\5\0"+
    "\27\16\4\0\17\16\1\276\6\16\3\0\2\16\10\0"+
    "\1\16\13\0\4\16\5\0\27\16\4\0\17\16\1\277"+
    "\6\16\3\0\2\16\10\0\1\16\13\0\4\16\5\0"+
    "\27\16\4\0\1\300\6\16\1\301\2\16\1\302\2\16"+
    "\1\303\10\16\3\0\2\16\10\0\1\16\13\0\4\16"+
    "\5\0\27\16\4\0\15\16\1\304\10\16\3\0\2\16"+
    "\10\0\1\16\13\0\4\16\5\0\27\16\4\0\12\16"+
    "\1\305\13\16\3\0\2\16\10\0\1\16\13\0\4\16"+
    "\5\0\27\16\4\0\12\16\1\306\2\16\1\307\10\16"+
    "\3\0\2\16\10\0\1\16\13\0\4\16\5\0\27\16"+
    "\4\0\4\16\1\310\21\16\3\0\2\16\10\0\1\16"+
    "\13\0\4\16\5\0\27\16\4\0\5\16\1\311\6\16"+
    "\1\312\11\16\3\0\2\16\10\0\1\16\13\0\4\16"+
    "\5\0\27\16\4\0\1\313\25\16\3\0\2\16\10\0"+
    "\1\16\13\0\4\16\5\0\27\16\4\0\2\16\1\314"+
    "\16\16\1\315\2\16\1\316\1\16\3\0\2\16\10\0"+
    "\1\16\13\0\4\16\5\0\27\16\4\0\15\16\1\317"+
    "\10\16\3\0\2\16\10\0\1\16\13\0\4\16\5\0"+
    "\27\16\4\0\7\16\1\320\16\16\3\0\1\16\120\0"+
    "\1\321\2\0\1\65\10\0\1\65\13\0\4\65\5\0"+
    "\27\65\4\0\26\65\3\0\1\65\17\0\1\322\137\0"+
    "\1\323\122\0\1\272\1\14\65\0\1\65\10\0\1\65"+
    "\13\0\4\65\5\0\15\65\1\324\2\65\1\325\6\65"+
    "\4\0\14\65\1\324\2\65\1\325\6\65\3\0\2\65"+
    "\10\0\1\65\13\0\4\65\5\0\4\65\1\326\11\65"+
    "\1\327\1\65\1\330\6\65\4\0\4\65\1\326\10\65"+
    "\1\327\1\65\1\330\6\65\3\0\2\65\10\0\1\65"+
    "\13\0\4\65\5\0\1\331\6\65\1\332\6\65\1\333"+
    "\10\65\4\0\1\331\6\65\1\332\5\65\1\333\10\65"+
    "\3\0\2\65\10\0\1\65\13\0\4\65\5\0\16\65"+
    "\1\334\10\65\4\0\15\65\1\334\10\65\3\0\2\65"+
    "\10\0\1\65\13\0\4\65\5\0\13\65\1\335\1\65"+
    "\1\336\11\65\4\0\12\65\1\335\1\65\1\336\11\65"+
    "\3\0\2\65\10\0\1\65\13\0\4\65\5\0\16\65"+
    "\1\337\4\65\1\340\3\65\4\0\15\65\1\337\4\65"+
    "\1\340\3\65\3\0\2\65\10\0\1\65\13\0\4\65"+
    "\5\0\5\65\1\341\7\65\1\342\11\65\4\0\5\65"+
    "\1\341\6\65\1\342\11\65\3\0\2\65\10\0\1\65"+
    "\13\0\4\65\5\0\16\65\1\343\10\65\4\0\15\65"+
    "\1\343\10\65\3\0\2\65\10\0\1\65\13\0\4\65"+
    "\5\0\16\65\1\344\10\65\4\0\15\65\1\344\10\65"+
    "\3\0\2\65\10\0\1\65\13\0\4\65\5\0\5\65"+
    "\1\345\12\65\1\346\6\65\4\0\5\65\1\345\11\65"+
    "\1\346\6\65\3\0\2\65\10\0\1\65\13\0\4\65"+
    "\5\0\1\347\17\65\1\350\6\65\4\0\1\347\16\65"+
    "\1\350\6\65\3\0\2\65\10\0\1\65\13\0\4\65"+
    "\5\0\4\65\1\351\22\65\4\0\4\65\1\351\21\65"+
    "\3\0\2\65\10\0\1\65\13\0\4\65\5\0\4\65"+
    "\1\352\15\65\1\353\2\65\1\354\1\65\4\0\4\65"+
    "\1\352\14\65\1\353\2\65\1\354\1\65\3\0\2\65"+
    "\10\0\1\65\13\0\4\65\5\0\7\65\1\355\6\65"+
    "\1\356\7\65\1\357\4\0\7\65\1\355\5\65\1\356"+
    "\10\65\3\0\2\65\10\0\1\65\13\0\4\65\5\0"+
    "\15\65\1\360\11\65\4\0\14\65\1\360\11\65\3\0"+
    "\2\65\10\0\1\65\13\0\4\65\5\0\1\361\26\65"+
    "\4\0\1\361\25\65\3\0\2\65\10\0\1\65\13\0"+
    "\4\65\5\0\7\65\1\362\1\363\16\65\4\0\7\65"+
    "\1\362\1\363\15\65\3\0\1\65\2\364\1\0\116\364"+
    "\1\365\1\364\17\0\1\366\4\0\1\367\76\0\1\16"+
    "\10\0\1\16\13\0\4\16\5\0\27\16\4\0\21\16"+
    "\1\315\4\16\3\0\2\16\10\0\1\16\13\0\4\16"+
    "\5\0\27\16\4\0\15\16\1\370\1\16\1\277\6\16"+
    "\3\0\2\16\10\0\1\16\13\0\4\16\5\0\27\16"+
    "\4\0\1\300\6\16\1\301\2\16\1\371\2\16\1\372"+
    "\10\16\3\0\2\16\10\0\1\16\13\0\4\16\5\0"+
    "\27\16\4\0\4\16\1\373\10\16\1\304\10\16\3\0"+
    "\2\16\10\0\1\16\13\0\4\16\5\0\27\16\4\0"+
    "\12\16\1\305\12\16\1\374\3\0\2\16\10\0\1\16"+
    "\13\0\4\16\5\0\27\16\4\0\1\375\11\16\1\306"+
    "\2\16\1\376\10\16\3\0\2\16\10\0\1\16\13\0"+
    "\4\16\5\0\27\16\4\0\5\16\1\311\6\16\1\377"+
    "\11\16\3\0\2\16\10\0\1\16\13\0\4\16\5\0"+
    "\27\16\4\0\22\16\1\u0100\3\16\3\0\2\16\10\0"+
    "\1\16\13\0\4\16\5\0\27\16\4\0\17\16\1\u0101"+
    "\2\16\1\u0102\3\16\3\0\2\16\10\0\1\16\13\0"+
    "\4\16\5\0\27\16\4\0\4\16\1\u0103\21\16\3\0"+
    "\2\16\10\0\1\16\13\0\4\16\5\0\27\16\4\0"+
    "\22\16\1\u0104\1\16\1\316\1\16\3\0\2\16\10\0"+
    "\1\16\13\0\4\16\5\0\27\16\4\0\17\16\1\u0105"+
    "\6\16\3\0\1\16\14\0\1\u0106\110\0\1\137\134\0"+
    "\1\u0106\17\0\1\272\102\0\1\u0106\17\0\1\273\66\0"+
    "\2\u0107\4\0\2\u0107\1\u0108\3\u0107\1\u0109\10\u0107\2\u010a"+
    "\1\u010b\36\u0107\1\u010c\3\u0107\1\u010d\3\u0107\1\u010e\6\u0107"+
    "\1\u010f\2\u0107\1\u0110\1\u0107\1\u0111\7\u0107\1\0\2\u0112"+
    "\1\0\2\u0112\1\0\6\u0112\1\u0113\51\u0112\1\0\36\u0112"+
    "\1\0\2\u0112\1\0\6\u0112\1\u0113\17\u0112\1\u0114\31\u0112"+
    "\1\0\36\u0112\1\0\2\u0112\1\0\6\u0112\1\u0113\17\u0112"+
    "\1\u0115\31\u0112\1\0\34\u0112\2\u0107\4\0\2\u0107\1\u0116"+
    "\3\u0107\1\u0117\10\u0107\2\u0118\1\u0119\36\u0107\1\u011a\3\u0107"+
    "\1\u011b\3\u0107\1\u011c\6\u0107\1\u011d\2\u0107\1\u011e\1\u0107"+
    "\1\u011f\7\u0107\15\0\1\u0120\122\0\1\u0120\17\0\1\272"+
    "\102\0\1\u0120\17\0\1\273\66\0\2\u0107\4\0\2\u0107"+
    "\1\u0121\3\u0107\1\u0122\10\u0107\2\u0123\1\u0124\36\u0107\1\u0125"+
    "\3\u0107\1\u0126\3\u0107\1\u0127\6\u0107\1\u0128\2\u0107\1\u0129"+
    "\1\u0107\1\u012a\7\u0107\1\0\2\240\1\0\2\240\1\0"+
    "\2\240\1\0\55\240\1\0\34\240\2\0\1\241\120\0"+
    "\2\240\1\0\2\240\1\0\2\240\1\0\23\240\1\u012b"+
    "\31\240\1\0\36\240\1\0\2\240\1\0\2\240\1\0"+
    "\23\240\1\u012c\31\240\1\0\34\240\2\u0107\4\0\2\u0107"+
    "\1\u012d\3\u0107\1\u012e\10\u0107\2\u012f\1\u0130\36\u0107\1\u0131"+
    "\3\u0107\1\u0132\3\u0107\1\u0133\6\u0107\1\u0134\2\u0107\1\u0135"+
    "\1\u0107\1\u0136\7\u0107\50\0\1\u0137\5\0\1\u0138\72\0"+
    "\4\u0139\72\0\1\16\10\0\1\16\13\0\4\16\5\0"+
    "\24\16\1\u013a\2\16\4\0\26\16\3\0\2\16\10\0"+
    "\1\16\13\0\4\16\5\0\21\16\1\u013b\5\16\4\0"+
    "\26\16\3\0\2\16\10\0\1\16\13\0\4\16\5\0"+
    "\27\16\4\0\17\16\1\u013c\6\16\3\0\2\16\10\0"+
    "\1\16\13\0\4\16\5\0\27\16\4\0\4\16\1\u013d"+
    "\21\16\3\0\2\16\10\0\1\16\13\0\4\16\5\0"+
    "\27\16\4\0\20\16\1\u013e\5\16\3\0\2\16\10\0"+
    "\1\16\13\0\4\16\5\0\27\16\4\0\1\u013f\25\16"+
    "\3\0\2\16\10\0\1\16\13\0\4\16\5\0\27\16"+
    "\4\0\17\16\1\u0140\6\16\3\0\2\16\10\0\1\16"+
    "\13\0\4\16\5\0\27\16\4\0\14\16\1\u0141\11\16"+
    "\3\0\2\16\10\0\1\16\13\0\4\16\5\0\27\16"+
    "\4\0\20\16\1\u0142\5\16\3\0\2\16\10\0\1\16"+
    "\13\0\4\16\5\0\27\16\4\0\15\16\1\u0143\10\16"+
    "\3\0\2\16\10\0\1\16\13\0\4\16\5\0\27\16"+
    "\4\0\17\16\1\u0144\6\16\3\0\2\16\10\0\1\16"+
    "\13\0\4\16\5\0\27\16\4\0\21\16\1\u0145\4\16"+
    "\3\0\2\16\10\0\1\16\13\0\4\16\5\0\27\16"+
    "\4\0\2\16\1\u0146\16\16\1\u0147\4\16\3\0\2\16"+
    "\10\0\1\16\13\0\4\16\5\0\27\16\4\0\10\16"+
    "\1\u0148\15\16\3\0\2\16\10\0\1\16\13\0\4\16"+
    "\5\0\27\16\4\0\1\u0149\25\16\3\0\2\16\10\0"+
    "\1\16\13\0\4\16\5\0\27\16\4\0\17\16\1\u014a"+
    "\6\16\3\0\2\16\10\0\1\16\13\0\4\16\5\0"+
    "\27\16\4\0\10\16\1\u014b\15\16\3\0\2\16\10\0"+
    "\1\16\13\0\4\16\5\0\27\16\4\0\10\16\1\u014c"+
    "\15\16\3\0\2\16\10\0\1\16\13\0\4\16\5\0"+
    "\27\16\4\0\10\16\1\u014d\15\16\3\0\1\16\17\u014e"+
    "\1\u014f\103\u014e\1\65\10\0\1\65\13\0\4\65\5\0"+
    "\3\65\1\u0150\23\65\4\0\3\65\1\u0150\22\65\3\0"+
    "\2\65\10\0\1\65\13\0\4\65\5\0\20\65\1\u0151"+
    "\6\65\4\0\17\65\1\u0151\6\65\3\0\2\65\10\0"+
    "\1\65\13\0\4\65\5\0\6\65\1\u0152\20\65\4\0"+
    "\6\65\1\u0152\17\65\3\0\2\65\10\0\1\65\13\0"+
    "\4\65\5\0\16\65\1\u0153\10\65\4\0\15\65\1\u0153"+
    "\10\65\3\0\2\65\10\0\1\65\13\0\4\65\5\0"+
    "\4\65\1\u0154\22\65\4\0\4\65\1\u0154\21\65\3\0"+
    "\2\65\10\0\1\65\13\0\4\65\5\0\21\65\1\u0155"+
    "\5\65\4\0\20\65\1\u0155\5\65\3\0\2\65\10\0"+
    "\1\65\13\0\4\65\5\0\1\u0156\26\65\4\0\1\u0156"+
    "\25\65\3\0\2\65\10\0\1\65\13\0\4\65\5\0"+
    "\15\65\1\u0157\11\65\4\0\14\65\1\u0157\11\65\3\0"+
    "\2\65\10\0\1\65\13\0\4\65\5\0\25\65\1\u0158"+
    "\1\65\4\0\24\65\1\u0158\1\65\3\0\2\65\10\0"+
    "\1\65\13\0\4\65\5\0\21\65\1\u0159\5\65\4\0"+
    "\20\65\1\u0159\5\65\3\0\2\65\10\0\1\65\13\0"+
    "\4\65\5\0\3\65\1\u015a\23\65\4\0\3\65\1\u015a"+
    "\22\65\3\0\2\65\10\0\1\65\13\0\4\65\5\0"+
    "\20\65\1\u015b\6\65\4\0\17\65\1\u015b\6\65\3\0"+
    "\2\65\10\0\1\65\13\0\4\65\5\0\15\65\1\u015c"+
    "\11\65\4\0\14\65\1\u015c\11\65\3\0\2\65\10\0"+
    "\1\65\13\0\4\65\5\0\22\65\1\u015d\4\65\4\0"+
    "\21\65\1\u015d\4\65\3\0\2\65\10\0\1\65\13\0"+
    "\4\65\5\0\3\65\1\u015e\23\65\4\0\3\65\1\u015e"+
    "\22\65\3\0\2\65\10\0\1\65\13\0\4\65\5\0"+
    "\22\65\1\u015f\4\65\4\0\21\65\1\u015f\4\65\3\0"+
    "\2\65\10\0\1\65\13\0\4\65\5\0\2\65\1\u0160"+
    "\24\65\4\0\2\65\1\u0160\23\65\3\0\2\65\10\0"+
    "\1\65\13\0\4\65\5\0\10\65\1\u0161\5\65\1\u0162"+
    "\10\65\4\0\10\65\1\u0161\4\65\1\u0162\10\65\3\0"+
    "\2\65\10\0\1\65\13\0\4\65\5\0\1\u0163\1\65"+
    "\1\u0164\14\65\1\u0165\2\65\1\u0166\4\65\4\0\1\u0163"+
    "\1\65\1\u0164\13\65\1\u0165\2\65\1\u0166\4\65\3\0"+
    "\2\65\10\0\1\65\13\0\4\65\5\0\22\65\1\u0167"+
    "\4\65\4\0\21\65\1\u0167\4\65\3\0\2\65\10\0"+
    "\1\65\13\0\4\65\5\0\20\65\1\u0168\6\65\4\0"+
    "\17\65\1\u0168\6\65\3\0\2\65\10\0\1\65\13\0"+
    "\4\65\5\0\10\65\1\u0169\16\65\4\0\10\65\1\u0169"+
    "\15\65\3\0\2\65\10\0\1\65\13\0\4\65\5\0"+
    "\4\65\1\u016a\22\65\4\0\4\65\1\u016a\21\65\3\0"+
    "\2\65\10\0\1\65\13\0\4\65\5\0\17\65\1\u016b"+
    "\7\65\4\0\16\65\1\u016b\7\65\3\0\2\65\10\0"+
    "\1\65\13\0\4\65\5\0\22\65\1\u016c\4\65\4\0"+
    "\21\65\1\u016c\4\65\3\0\2\65\10\0\1\65\13\0"+
    "\4\65\5\0\20\65\1\u016d\6\65\4\0\17\65\1\u016d"+
    "\6\65\3\0\2\65\10\0\1\65\13\0\4\65\5\0"+
    "\10\65\1\u016e\16\65\4\0\10\65\1\u016e\15\65\3\0"+
    "\2\65\10\0\1\65\13\0\4\65\5\0\22\65\1\u016f"+
    "\4\65\4\0\21\65\1\u016f\4\65\3\0\1\65\17\u0170"+
    "\1\u0171\103\u0170\2\367\1\365\2\367\1\u0172\115\367\1\16"+
    "\10\0\1\16\13\0\4\16\5\0\27\16\4\0\15\16"+
    "\1\u0173\10\16\3\0\2\16\10\0\1\16\13\0\4\16"+
    "\5\0\27\16\4\0\1\u0174\25\16\3\0\2\16\10\0"+
    "\1\16\13\0\4\16\5\0\27\16\4\0\14\16\1\u0175"+
    "\11\16\3\0\2\16\10\0\1\16\13\0\4\16\5\0"+
    "\27\16\4\0\5\16\1\u0176\20\16\3\0\2\16\10\0"+
    "\1\16\13\0\4\16\5\0\27\16\4\0\21\16\1\u0177"+
    "\4\16\3\0\2\16\10\0\1\16\13\0\4\16\5\0"+
    "\27\16\4\0\12\16\1\u0178\13\16\3\0\2\16\10\0"+
    "\1\16\13\0\4\16\5\0\27\16\4\0\17\16\1\u0179"+
    "\6\16\3\0\2\16\10\0\1\16\13\0\4\16\5\0"+
    "\27\16\4\0\21\16\1\u0147\4\16\3\0\2\16\10\0"+
    "\1\16\13\0\4\16\5\0\27\16\4\0\12\16\1\u017a"+
    "\13\16\3\0\2\16\10\0\1\16\13\0\4\16\5\0"+
    "\27\16\4\0\10\16\1\u017b\4\16\1\u017c\10\16\3\0"+
    "\2\16\10\0\1\16\13\0\4\16\5\0\27\16\4\0"+
    "\1\16\1\u017d\24\16\3\0\2\16\10\0\1\16\13\0"+
    "\4\16\5\0\27\16\4\0\21\16\1\u017e\4\16\3\0"+
    "\2\16\10\0\1\16\13\0\4\16\5\0\27\16\4\0"+
    "\16\16\1\u017f\7\16\3\0\2\16\10\0\1\16\13\0"+
    "\4\16\5\0\27\16\4\0\22\16\1\u0180\3\16\3\0"+
    "\1\16\14\0\1\u0181\122\0\1\u0182\122\0\1\u0183\10\0"+
    "\3\u0184\107\0\1\u0183\10\0\3\u0185\107\0\1\u0186\122\0"+
    "\1\u0187\122\0\1\u0188\122\0\1\u0189\122\0\1\u018a\122\0"+
    "\1\u018b\106\0\2\u0112\1\0\2\u0112\1\0\6\u0112\1\0"+
    "\51\u0112\1\0\34\u0112\14\0\1\u018c\10\0\3\u0119\107\0"+
    "\1\u018c\10\0\3\u018d\107\0\1\u018e\122\0\1\u018f\122\0"+
    "\1\u0190\10\0\3\u0191\107\0\1\u0190\10\0\3\u0192\107\0"+
    "\1\u0193\122\0\1\u0194\122\0\1\u0195\122\0\1\u0196\122\0"+
    "\1\u0197\122\0\1\u0198\133\0\3\u0130\120\0\3\u0199\131\0"+
    "\1\u019a\122\0\1\u019b\17\0\1\u019c\44\0\1\16\10\0"+
    "\1\16\13\0\4\16\5\0\1\u019d\26\16\4\0\26\16"+
    "\3\0\2\16\10\0\1\16\13\0\4\16\5\0\2\16"+
    "\1\u019e\24\16\4\0\26\16\3\0\2\16\10\0\1\16"+
    "\13\0\4\16\5\0\27\16\4\0\4\16\1\u019f\21\16"+
    "\3\0\2\16\10\0\1\16\13\0\4\16\5\0\27\16"+
    "\4\0\1\u01a0\25\16\3\0\2\16\10\0\1\16\13\0"+
    "\4\16\5\0\27\16\4\0\4\16\1\u01a1\21\16\3\0"+
    "\2\16\10\0\1\16\13\0\4\16\5\0\27\16\4\0"+
    "\17\16\1\u01a2\6\16\3\0\2\16\10\0\1\16\13\0"+
    "\4\16\5\0\27\16\4\0\20\16\1\u01a3\5\16\3\0"+
    "\2\16\10\0\1\16\13\0\4\16\5\0\27\16\4\0"+
    "\20\16\1\u01a4\1\u01a5\4\16\3\0\2\16\10\0\1\16"+
    "\13\0\4\16\5\0\27\16\4\0\4\16\1\u01a6\21\16"+
    "\3\0\2\16\10\0\1\16\13\0\4\16\5\0\27\16"+
    "\4\0\1\u01a7\25\16\3\0\2\16\10\0\1\16\13\0"+
    "\4\16\5\0\27\16\4\0\2\16\1\u01a8\23\16\3\0"+
    "\2\16\10\0\1\16\13\0\4\16\5\0\27\16\4\0"+
    "\12\16\1\u01a9\13\16\3\0\2\16\10\0\1\16\13\0"+
    "\4\16\5\0\27\16\4\0\14\16\1\u01aa\11\16\3\0"+
    "\2\16\10\0\1\16\13\0\4\16\5\0\27\16\4\0"+
    "\14\16\1\u01ab\11\16\3\0\2\16\10\0\1\16\13\0"+
    "\4\16\5\0\27\16\4\0\10\16\1\u01ac\15\16\3\0"+
    "\2\16\10\0\1\16\13\0\4\16\5\0\27\16\4\0"+
    "\21\16\1\u01ad\4\16\3\0\2\16\10\0\1\16\13\0"+
    "\4\16\5\0\27\16\4\0\3\16\1\u01ae\22\16\3\0"+
    "\2\16\10\0\1\16\13\0\4\16\5\0\27\16\4\0"+
    "\12\16\1\u01af\13\16\3\0\1\16\17\u014e\1\u01b0\103\u014e"+
    "\16\0\1\365\1\u014f\103\0\1\65\10\0\1\65\13\0"+
    "\4\65\5\0\1\u01b1\26\65\4\0\1\u01b1\25\65\3\0"+
    "\2\65\10\0\1\65\13\0\4\65\5\0\10\65\1\u01b2"+
    "\16\65\4\0\10\65\1\u01b2\15\65\3\0\2\65\10\0"+
    "\1\65\13\0\4\65\5\0\13\65\1\u01b3\13\65\4\0"+
    "\12\65\1\u01b3\13\65\3\0\2\65\10\0\1\65\13\0"+
    "\4\65\5\0\1\u01b4\26\65\4\0\1\u01b4\25\65\3\0"+
    "\2\65\10\0\1\65\13\0\4\65\5\0\4\65\1\u01b5"+
    "\22\65\4\0\4\65\1\u01b5\21\65\3\0\2\65\10\0"+
    "\1\65\13\0\4\65\5\0\20\65\1\u01b6\6\65\4\0"+
    "\17\65\1\u01b6\6\65\3\0\2\65\10\0\1\65\13\0"+
    "\4\65\5\0\21\65\1\u01b7\1\u01b8\4\65\4\0\20\65"+
    "\1\u01b7\1\u01b8\4\65\3\0\2\65\10\0\1\65\13\0"+
    "\4\65\5\0\15\65\1\u01b9\11\65\4\0\14\65\1\u01b9"+
    "\11\65\3\0\2\65\10\0\1\65\13\0\4\65\5\0"+
    "\4\65\1\u01ba\22\65\4\0\4\65\1\u01ba\21\65\3\0"+
    "\2\65\10\0\1\65\13\0\4\65\5\0\2\65\1\u01bb"+
    "\24\65\4\0\2\65\1\u01bb\23\65\3\0\2\65\10\0"+
    "\1\65\13\0\4\65\5\0\4\65\1\u01bc\22\65\4\0"+
    "\4\65\1\u01bc\21\65\3\0\2\65\10\0\1\65\13\0"+
    "\4\65\5\0\12\65\1\u01bd\14\65\4\0\11\65\1\u01bd"+
    "\14\65\3\0\2\65\10\0\1\65\13\0\4\65\5\0"+
    "\15\65\1\u01be\11\65\4\0\14\65\1\u01be\11\65\3\0"+
    "\2\65\10\0\1\65\13\0\4\65\5\0\2\65\1\u01bf"+
    "\3\65\1\u01c0\20\65\4\0\2\65\1\u01bf\3\65\1\u01c0"+
    "\17\65\3\0\2\65\10\0\1\65\13\0\4\65\5\0"+
    "\13\65\1\u01c1\13\65\4\0\12\65\1\u01c1\13\65\3\0"+
    "\2\65\10\0\1\65\13\0\4\65\5\0\16\65\1\u01c2"+
    "\10\65\4\0\15\65\1\u01c2\10\65\3\0\2\65\10\0"+
    "\1\65\13\0\4\65\5\0\4\65\1\u01c3\22\65\4\0"+
    "\4\65\1\u01c3\21\65\3\0\2\65\10\0\1\65\13\0"+
    "\4\65\5\0\23\65\1\u01c4\3\65\4\0\22\65\1\u01c4"+
    "\3\65\3\0\2\65\10\0\1\65\13\0\4\65\5\0"+
    "\10\65\1\u01c5\16\65\4\0\10\65\1\u01c5\15\65\3\0"+
    "\2\65\10\0\1\65\13\0\4\65\5\0\22\65\1\u01c6"+
    "\4\65\4\0\21\65\1\u01c6\4\65\3\0\2\65\10\0"+
    "\1\65\13\0\4\65\5\0\15\65\1\u01c7\11\65\4\0"+
    "\14\65\1\u01c7\11\65\3\0\2\65\10\0\1\65\13\0"+
    "\4\65\5\0\4\65\1\u01c8\22\65\4\0\4\65\1\u01c8"+
    "\21\65\3\0\2\65\10\0\1\65\13\0\4\65\5\0"+
    "\10\65\1\u01c9\16\65\4\0\10\65\1\u01c9\15\65\3\0"+
    "\2\65\10\0\1\65\13\0\4\65\5\0\13\65\1\u01ca"+
    "\13\65\4\0\12\65\1\u01ca\13\65\3\0\2\65\10\0"+
    "\1\65\13\0\4\65\5\0\7\65\1\u01cb\17\65\4\0"+
    "\7\65\1\u01cb\16\65\3\0\1\65\17\u0170\1\u01cc\103\u0170"+
    "\17\0\1\u0171\4\0\1\365\100\0\1\365\120\0\1\16"+
    "\10\0\1\16\13\0\4\16\5\0\27\16\4\0\12\16"+
    "\1\u01cd\13\16\3\0\2\16\10\0\1\16\13\0\4\16"+
    "\5\0\27\16\4\0\20\16\1\u01ce\5\16\3\0\2\16"+
    "\10\0\1\16\13\0\4\16\5\0\27\16\4\0\21\16"+
    "\1\u01a5\4\16\3\0\2\16\10\0\1\16\13\0\4\16"+
    "\5\0\27\16\4\0\1\u01cf\25\16\3\0\2\16\10\0"+
    "\1\16\13\0\4\16\5\0\27\16\4\0\4\16\1\u01d0"+
    "\21\16\3\0\2\16\10\0\1\16\13\0\4\16\5\0"+
    "\27\16\4\0\20\16\1\u01d1\5\16\3\0\2\16\10\0"+
    "\1\16\13\0\4\16\5\0\27\16\4\0\12\16\1\u01d2"+
    "\13\16\3\0\2\16\10\0\1\16\13\0\4\16\5\0"+
    "\27\16\4\0\14\16\1\u01d3\6\16\1\u01d4\2\16\3\0"+
    "\2\16\10\0\1\16\13\0\4\16\5\0\27\16\4\0"+
    "\21\16\1\u01d5\4\16\3\0\2\16\10\0\1\16\13\0"+
    "\4\16\5\0\27\16\4\0\12\16\1\u01d6\13\16\3\0"+
    "\2\16\10\0\1\16\13\0\4\16\5\0\27\16\4\0"+
    "\22\16\1\u01d7\3\16\3\0\2\16\10\0\1\16\13\0"+
    "\4\16\5\0\27\16\4\0\4\16\1\u01d8\21\16\3\0"+
    "\2\16\10\0\1\16\13\0\4\16\5\0\27\16\4\0"+
    "\4\16\1\u01d9\21\16\3\0\1\16\14\0\1\u0183\122\0"+
    "\1\u018c\122\0\1\u0190\170\0\1\u01da\117\0\1\u01db\117\0"+
    "\1\u01dc\46\0\1\16\10\0\1\16\13\0\4\16\5\0"+
    "\1\u01dd\26\16\4\0\26\16\3\0\2\16\10\0\1\16"+
    "\13\0\4\16\5\0\27\16\4\0\6\16\1\u01de\17\16"+
    "\3\0\2\16\10\0\1\16\13\0\4\16\5\0\27\16"+
    "\4\0\11\16\1\u01df\14\16\3\0\2\16\10\0\1\16"+
    "\13\0\4\16\5\0\27\16\4\0\2\16\1\u01e0\23\16"+
    "\3\0\2\16\10\0\1\16\13\0\4\16\5\0\27\16"+
    "\4\0\21\16\1\u01e1\4\16\3\0\2\16\10\0\1\16"+
    "\13\0\4\16\5\0\27\16\4\0\10\16\1\u01e2\15\16"+
    "\3\0\2\16\10\0\1\16\13\0\4\16\5\0\27\16"+
    "\4\0\21\16\1\u0144\4\16\3\0\2\16\10\0\1\16"+
    "\13\0\4\16\5\0\27\16\4\0\7\16\1\u01e3\16\16"+
    "\3\0\2\16\10\0\1\16\13\0\4\16\5\0\27\16"+
    "\4\0\22\16\1\u01e4\3\16\3\0\2\16\10\0\1\16"+
    "\13\0\4\16\5\0\27\16\4\0\5\16\1\u01e5\20\16"+
    "\3\0\2\16\10\0\1\16\13\0\4\16\5\0\27\16"+
    "\4\0\14\16\1\u01e6\11\16\3\0\2\16\10\0\1\16"+
    "\13\0\4\16\5\0\27\16\4\0\2\16\1\u01e7\23\16"+
    "\3\0\2\16\10\0\1\16\13\0\4\16\5\0\27\16"+
    "\4\0\4\16\1\u01e8\21\16\3\0\1\16\16\u014e\1\365"+
    "\1\u01b0\103\u014e\1\65\10\0\1\65\13\0\4\65\5\0"+
    "\26\65\1\u01e9\4\0\26\65\3\0\2\65\10\0\1\65"+
    "\13\0\4\65\5\0\15\65\1\u01ea\11\65\4\0\14\65"+
    "\1\u01ea\11\65\3\0\2\65\10\0\1\65\13\0\4\65"+
    "\5\0\4\65\1\u01eb\22\65\4\0\4\65\1\u01eb\21\65"+
    "\3\0\2\65\10\0\1\65\13\0\4\65\5\0\12\65"+
    "\1\u01ec\14\65\4\0\11\65\1\u01ec\14\65\3\0\2\65"+
    "\10\0\1\65\13\0\4\65\5\0\22\65\1\u01ed\4\65"+
    "\4\0\21\65\1\u01ed\4\65\3\0\2\65\10\0\1\65"+
    "\13\0\4\65\5\0\10\65\1\u01ee\16\65\4\0\10\65"+
    "\1\u01ee\15\65\3\0\2\65\10\0\1\65\13\0\4\65"+
    "\5\0\22\65\1\u01ef\4\65\4\0\21\65\1\u01ef\4\65"+
    "\3\0\2\65\10\0\1\65\13\0\4\65\5\0\22\65"+
    "\1\u01f0\4\65\4\0\21\65\1\u01f0\4\65\3\0\2\65"+
    "\10\0\1\65\13\0\4\65\5\0\6\65\1\u01f1\20\65"+
    "\4\0\6\65\1\u01f1\17\65\3\0\2\65\10\0\1\65"+
    "\13\0\4\65\5\0\4\65\1\u01f2\22\65\4\0\4\65"+
    "\1\u01f2\21\65\3\0\2\65\10\0\1\65\13\0\4\65"+
    "\5\0\22\65\1\u01f3\4\65\4\0\21\65\1\u01f3\4\65"+
    "\3\0\2\65\10\0\1\65\13\0\4\65\5\0\4\65"+
    "\1\u01f4\22\65\4\0\4\65\1\u01f4\21\65\3\0\2\65"+
    "\10\0\1\65\13\0\4\65\5\0\20\65\1\u01f5\6\65"+
    "\4\0\17\65\1\u01f5\6\65\3\0\2\65\10\0\1\65"+
    "\13\0\4\65\5\0\20\65\1\u01f6\6\65\4\0\17\65"+
    "\1\u01f6\6\65\3\0\2\65\10\0\1\65\13\0\4\65"+
    "\5\0\1\u01f7\26\65\4\0\1\u01f7\25\65\3\0\2\65"+
    "\10\0\1\65\13\0\4\65\5\0\20\65\1\u01f8\6\65"+
    "\4\0\17\65\1\u01f8\6\65\3\0\2\65\10\0\1\65"+
    "\13\0\4\65\5\0\15\65\1\u01f9\11\65\4\0\14\65"+
    "\1\u01f9\11\65\3\0\2\65\10\0\1\65\13\0\4\65"+
    "\5\0\2\65\1\u01fa\24\65\4\0\2\65\1\u01fa\23\65"+
    "\3\0\2\65\10\0\1\65\13\0\4\65\5\0\13\65"+
    "\1\u01fb\13\65\4\0\12\65\1\u01fb\13\65\3\0\2\65"+
    "\10\0\1\65\13\0\4\65\5\0\4\65\1\u01fc\22\65"+
    "\4\0\4\65\1\u01fc\21\65\3\0\1\65\17\u0170\1\u01cc"+
    "\4\u0170\1\365\76\u0170\1\16\10\0\1\16\13\0\4\16"+
    "\5\0\27\16\4\0\4\16\1\u01fd\21\16\3\0\2\16"+
    "\10\0\1\16\13\0\4\16\5\0\27\16\4\0\20\16"+
    "\1\u01fe\5\16\3\0\2\16\10\0\1\16\13\0\4\16"+
    "\5\0\27\16\4\0\22\16\1\u01ff\3\16\3\0\2\16"+
    "\10\0\1\16\13\0\4\16\5\0\27\16\4\0\14\16"+
    "\1\u0200\11\16\3\0\2\16\10\0\1\16\13\0\4\16"+
    "\5\0\27\16\4\0\4\16\1\u0201\21\16\3\0\2\16"+
    "\10\0\1\16\13\0\4\16\5\0\27\16\4\0\21\16"+
    "\1\u0202\4\16\3\0\2\16\10\0\1\16\13\0\4\16"+
    "\5\0\27\16\4\0\1\u0203\25\16\3\0\2\16\10\0"+
    "\1\16\13\0\4\16\5\0\27\16\4\0\4\16\1\u0204"+
    "\21\16\3\0\2\16\10\0\1\16\13\0\4\16\5\0"+
    "\27\16\4\0\10\16\1\u0205\15\16\3\0\2\16\10\0"+
    "\1\16\13\0\4\16\5\0\27\16\4\0\17\16\1\u0206"+
    "\6\16\3\0\2\16\10\0\1\16\13\0\4\16\5\0"+
    "\27\16\4\0\17\16\1\u0207\6\16\3\0\1\16\36\0"+
    "\1\u0208\124\0\1\u0209\126\0\1\u020a\56\0\1\16\10\0"+
    "\1\16\13\0\4\16\5\0\13\16\1\u020b\13\16\4\0"+
    "\26\16\3\0\2\16\10\0\1\16\13\0\4\16\5\0"+
    "\27\16\4\0\12\16\1\u020c\13\16\3\0\2\16\10\0"+
    "\1\16\13\0\4\16\5\0\27\16\4\0\17\16\1\u020d"+
    "\6\16\3\0\2\16\10\0\1\16\13\0\4\16\5\0"+
    "\27\16\4\0\14\16\1\u020e\11\16\3\0\2\16\10\0"+
    "\1\16\13\0\4\16\5\0\27\16\4\0\3\16\1\u020f"+
    "\22\16\3\0\2\16\10\0\1\16\13\0\4\16\5\0"+
    "\27\16\4\0\6\16\1\u0210\17\16\3\0\2\16\10\0"+
    "\1\16\13\0\4\16\5\0\27\16\4\0\7\16\1\u0211"+
    "\16\16\3\0\1\16\1\65\10\0\1\65\13\0\4\65"+
    "\5\0\1\u0212\26\65\4\0\1\u0212\25\65\3\0\2\65"+
    "\10\0\1\65\13\0\4\65\5\0\15\65\1\u0213\11\65"+
    "\4\0\14\65\1\u0213\11\65\3\0\2\65\10\0\1\65"+
    "\13\0\4\65\5\0\16\65\1\u0214\10\65\4\0\15\65"+
    "\1\u0214\10\65\3\0\2\65\10\0\1\65\13\0\4\65"+
    "\5\0\10\65\1\u0215\16\65\4\0\10\65\1\u0215\15\65"+
    "\3\0\2\65\10\0\1\65\13\0\4\65\5\0\4\65"+
    "\1\u0216\22\65\4\0\4\65\1\u0216\21\65\3\0\2\65"+
    "\10\0\1\65\13\0\4\65\5\0\3\65\1\u0217\23\65"+
    "\4\0\3\65\1\u0217\22\65\3\0\2\65\10\0\1\65"+
    "\13\0\4\65\5\0\13\65\1\u0218\13\65\4\0\12\65"+
    "\1\u0218\13\65\3\0\2\65\10\0\1\65\13\0\4\65"+
    "\5\0\3\65\1\u0219\23\65\4\0\3\65\1\u0219\22\65"+
    "\3\0\2\65\10\0\1\65\13\0\4\65\5\0\1\u021a"+
    "\26\65\4\0\1\u021a\25\65\3\0\2\65\10\0\1\65"+
    "\13\0\4\65\5\0\3\65\1\u021b\23\65\4\0\3\65"+
    "\1\u021b\22\65\3\0\2\65\10\0\1\65\13\0\4\65"+
    "\5\0\22\65\1\u021c\4\65\4\0\21\65\1\u021c\4\65"+
    "\3\0\2\65\10\0\1\65\13\0\4\65\5\0\15\65"+
    "\1\u021d\11\65\4\0\14\65\1\u021d\11\65\3\0\2\65"+
    "\10\0\1\65\13\0\4\65\5\0\6\65\1\u021e\20\65"+
    "\4\0\6\65\1\u021e\17\65\3\0\2\65\10\0\1\65"+
    "\13\0\4\65\5\0\7\65\1\u021f\17\65\4\0\7\65"+
    "\1\u021f\16\65\3\0\1\65\1\16\10\0\1\16\13\0"+
    "\4\16\5\0\27\16\4\0\1\u0220\25\16\3\0\2\16"+
    "\10\0\1\16\13\0\4\16\5\0\27\16\4\0\12\16"+
    "\1\u0221\13\16\3\0\2\16\10\0\1\16\13\0\4\16"+
    "\5\0\27\16\4\0\3\16\1\u0222\22\16\3\0\2\16"+
    "\10\0\1\16\13\0\4\16\5\0\27\16\4\0\12\16"+
    "\1\u0223\13\16\3\0\2\16\10\0\1\16\13\0\4\16"+
    "\5\0\27\16\4\0\21\16\1\u0224\4\16\3\0\2\16"+
    "\10\0\1\16\13\0\4\16\5\0\27\16\4\0\2\16"+
    "\1\u0225\23\16\3\0\2\16\10\0\1\16\13\0\4\16"+
    "\5\0\27\16\4\0\2\16\1\u0226\23\16\3\0\2\16"+
    "\10\0\1\16\13\0\4\16\5\0\27\16\4\0\14\16"+
    "\1\u0227\11\16\3\0\1\16\36\0\1\u0228\142\0\1\u0229"+
    "\44\0\1\16\10\0\1\16\13\0\4\16\5\0\27\16"+
    "\4\0\15\16\1\u022a\10\16\3\0\2\16\10\0\1\16"+
    "\13\0\4\16\5\0\27\16\4\0\22\16\1\u022b\3\16"+
    "\3\0\2\16\10\0\1\16\13\0\4\16\5\0\27\16"+
    "\4\0\4\16\1\u022c\21\16\3\0\1\16\1\65\10\0"+
    "\1\65\13\0\4\65\5\0\15\65\1\u022d\11\65\4\0"+
    "\14\65\1\u022d\11\65\3\0\2\65\10\0\1\65\13\0"+
    "\4\65\5\0\23\65\1\u022e\3\65\4\0\22\65\1\u022e"+
    "\3\65\3\0\2\65\10\0\1\65\13\0\4\65\5\0"+
    "\16\65\1\u022f\10\65\4\0\15\65\1\u022f\10\65\3\0"+
    "\2\65\10\0\1\65\13\0\4\65\5\0\20\65\1\u0230"+
    "\6\65\4\0\17\65\1\u0230\6\65\3\0\2\65\10\0"+
    "\1\65\13\0\4\65\5\0\15\65\1\u0231\11\65\4\0"+
    "\14\65\1\u0231\11\65\3\0\2\65\10\0\1\65\13\0"+
    "\4\65\5\0\23\65\1\u0232\3\65\4\0\22\65\1\u0232"+
    "\3\65\3\0\2\65\10\0\1\65\13\0\4\65\5\0"+
    "\14\65\1\u0233\12\65\4\0\13\65\1\u0233\12\65\3\0"+
    "\1\65\1\16\10\0\1\16\13\0\4\16\5\0\27\16"+
    "\4\0\14\16\1\u0234\11\16\3\0\2\16\10\0\1\16"+
    "\13\0\4\16\5\0\27\16\4\0\21\16\1\u0235\4\16"+
    "\3\0\2\16\10\0\1\16\13\0\4\16\5\0\27\16"+
    "\4\0\20\16\1\u0236\5\16\3\0\2\16\10\0\1\16"+
    "\13\0\4\16\5\0\27\16\4\0\14\16\1\u0237\11\16"+
    "\3\0\2\16\10\0\1\16\13\0\4\16\5\0\27\16"+
    "\4\0\4\16\1\u0238\21\16\3\0\2\16\10\0\1\16"+
    "\13\0\4\16\5\0\27\16\4\0\21\16\1\u0239\4\16"+
    "\3\0\1\16\51\0\1\u023a\107\0\1\u023b\64\0\1\16"+
    "\10\0\1\16\13\0\4\16\5\0\27\16\4\0\4\16"+
    "\1\u023c\21\16\3\0\1\16\1\65\10\0\1\65\13\0"+
    "\4\65\5\0\4\65\1\u023d\22\65\4\0\4\65\1\u023d"+
    "\21\65\3\0\2\65\10\0\1\65\13\0\4\65\5\0"+
    "\15\65\1\u023e\11\65\4\0\14\65\1\u023e\11\65\3\0"+
    "\2\65\10\0\1\65\13\0\4\65\5\0\20\65\1\u023f"+
    "\6\65\4\0\17\65\1\u023f\6\65\3\0\1\65\1\16"+
    "\10\0\1\16\13\0\4\16\5\0\27\16\4\0\4\16"+
    "\1\u0240\21\16\3\0\1\16\52\0\1\u0241\50\0\1\65"+
    "\10\0\1\65\13\0\4\65\5\0\4\65\1\u0242\22\65"+
    "\4\0\4\65\1\u0242\21\65\3\0\1\65\1\16\10\0"+
    "\1\16\13\0\4\16\5\0\27\16\4\0\3\16\1\u0243"+
    "\22\16\3\0\1\16\36\0\1\u0244\64\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[29216];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\2\11\1\1\2\11\3\1\11\11\2\1\2\11"+
    "\5\1\3\11\14\1\1\11\1\1\1\11\1\1\1\11"+
    "\3\1\1\11\22\1\1\11\1\1\1\11\17\1\1\11"+
    "\1\0\26\1\1\11\24\1\1\0\24\1\1\11\24\1"+
    "\1\11\1\0\1\11\1\0\2\11\25\1\1\11\1\0"+
    "\1\11\40\1\1\0\1\11\1\0\17\1\2\11\13\1"+
    "\1\11\14\1\1\11\14\1\2\11\2\1\6\11\2\0"+
    "\25\1\2\0\40\1\2\0\17\1\3\11\2\0\7\11"+
    "\1\1\3\11\2\0\7\11\3\0\23\1\1\0\33\1"+
    "\1\0\15\1\3\0\53\1\1\11\2\0\35\1\2\0"+
    "\20\1\1\11\1\0\5\1\1\0\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[580];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuilder string;
  /*-----------------------------------------------------------------
    CODIGO PARA EL MANEJO DE ERRORES
  -------------------------------------------------------------------*/
    private List<String> errorsList;
    public List<String> symbols = new ArrayList();

    public List<String> getErrors(){
        return this.errorsList;
    }

    /*----------------------------------------------------------------
        CODIGO PARA EL PARSER
    ------------------------------------------------------------------*/
    private Symbol symbol(int type) {
        symbols.add(yytext());
        return new Symbol(type, yyline+1, yycolumn+1);
    }

    private Symbol symbol(int type, Object value) {
        symbols.add(value.toString());
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }

    private void error(String message) {
        errorsList.add("Error en la linea: " + (yyline+1) + ", columna: " + (yycolumn+1) + " : " + message);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
      errorsList = new LinkedList<>();
    string = new StringBuilder();
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { error("Simbolo invalido <"+ yytext()+">");
            }
          // fall through
          case 139: break;
          case 2:
            { /* ignoramos */
            }
          // fall through
          case 140: break;
          case 3:
            { return symbol(sym.DIFFERENT);
            }
          // fall through
          case 141: break;
          case 4:
            { string.setLength(0); yybegin(STRING);
            }
          // fall through
          case 142: break;
          case 5:
            { return symbol( sym.ID, yytext() );
            }
          // fall through
          case 143: break;
          case 6:
            { return symbol(sym.MODULE);
            }
          // fall through
          case 144: break;
          case 7:
            { return symbol(sym.AMPERSAND);
            }
          // fall through
          case 145: break;
          case 8:
            { string.setLength(0); yybegin(CHARLITERAL);
            }
          // fall through
          case 146: break;
          case 9:
            { return symbol(sym.LPAREN);
            }
          // fall through
          case 147: break;
          case 10:
            { return symbol(sym.RPAREN);
            }
          // fall through
          case 148: break;
          case 11:
            { return symbol(sym.TIMES);
            }
          // fall through
          case 149: break;
          case 12:
            { return symbol(sym.PLUS);
            }
          // fall through
          case 150: break;
          case 13:
            { return symbol(sym.COMMA);
            }
          // fall through
          case 151: break;
          case 14:
            { return symbol(sym.MINUS);
            }
          // fall through
          case 152: break;
          case 15:
            { return symbol(sym.DOT);
            }
          // fall through
          case 153: break;
          case 16:
            { return symbol(sym.DIV);
            }
          // fall through
          case 154: break;
          case 17:
            { return symbol(sym.BOOLEAN_LIT, Boolean.valueOf(yytext()));
            }
          // fall through
          case 155: break;
          case 18:
            { return symbol(sym.INTEGER_LIT, Integer.valueOf(yytext()));
            }
          // fall through
          case 156: break;
          case 19:
            { return symbol(sym.COLON);
            }
          // fall through
          case 157: break;
          case 20:
            { return symbol(sym.SEMICOLON);
            }
          // fall through
          case 158: break;
          case 21:
            { return symbol(sym.LESS);
            }
          // fall through
          case 159: break;
          case 22:
            { return symbol(sym.ASSIGNATION);
            }
          // fall through
          case 160: break;
          case 23:
            { return symbol(sym.GRATER);
            }
          // fall through
          case 161: break;
          case 24:
            { return symbol(sym.LBRACK);
            }
          // fall through
          case 162: break;
          case 25:
            { return symbol(sym.RBRACK);
            }
          // fall through
          case 163: break;
          case 26:
            { return symbol(sym.POWER);
            }
          // fall through
          case 164: break;
          case 27:
            { return symbol(sym.LBRACE);
            }
          // fall through
          case 165: break;
          case 28:
            { return symbol(sym.RBRACE);
            }
          // fall through
          case 166: break;
          case 29:
            { return symbol(sym.ID, yytext().toLowerCase());
            }
          // fall through
          case 167: break;
          case 30:
            { string.setLength(0); yybegin(P_CHAR_STRING);
            }
          // fall through
          case 168: break;
          case 31:
            { return symbol(sym.EQUALS);
            }
          // fall through
          case 169: break;
          case 32:
            { string.setLength(0); yybegin(JSTRING);
            }
          // fall through
          case 170: break;
          case 33:
            { string.setLength(0); yybegin(JCHARLITERAL);
            }
          // fall through
          case 171: break;
          case 34:
            { error("Literal de carácter sin terminar al final de la línea");
            }
          // fall through
          case 172: break;
          case 35:
            { string.append( yytext() );
            }
          // fall through
          case 173: break;
          case 36:
            { yybegin(YYINITIAL); return symbol(sym.STRING_LIT, string.toString());
            }
          // fall through
          case 174: break;
          case 37:
            { error("Literal de cadena sin terminar al final de la línea");
            }
          // fall through
          case 175: break;
          case 38:
            { yybegin(JAVA); return symbol(sym.STRING_LIT, string.toString());
            }
          // fall through
          case 176: break;
          case 39:
            { return symbol(sym.AND);
            }
          // fall through
          case 177: break;
          case 40:
            { return symbol(sym.GRATER_EQUALS);
            }
          // fall through
          case 178: break;
          case 41:
            { return symbol(sym.LESS_EQUALS);
            }
          // fall through
          case 179: break;
          case 42:
            { return symbol(sym.DO);
            }
          // fall through
          case 180: break;
          case 43:
            { return symbol(sym.IF);
            }
          // fall through
          case 181: break;
          case 44:
            { return symbol(sym.OR);
            }
          // fall through
          case 182: break;
          case 45:
            { return symbol(sym.IN);
            }
          // fall through
          case 183: break;
          case 46:
            { return symbol(sym.OF);
            }
          // fall through
          case 184: break;
          case 47:
            { return symbol(sym.TO);
            }
          // fall through
          case 185: break;
          case 48:
            { /* ignore */
            }
          // fall through
          case 186: break;
          case 49:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LIT, yytext().charAt(0));
            }
          // fall through
          case 187: break;
          case 50:
            { error("Secuencia ilegal de escape \""+yytext()+"\"");
            }
          // fall through
          case 188: break;
          case 51:
            { yybegin(PASCAL); return symbol(sym.CHAR_LIT, yytext().charAt(0));
            }
          // fall through
          case 189: break;
          case 52:
            { string.append( '\"' );
            }
          // fall through
          case 190: break;
          case 53:
            { string.append( '\'' );
            }
          // fall through
          case 191: break;
          case 54:
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                                                                   string.append( val );
            }
          // fall through
          case 192: break;
          case 55:
            { string.append( '\\' );
            }
          // fall through
          case 193: break;
          case 56:
            { string.append( '\b' );
            }
          // fall through
          case 194: break;
          case 57:
            { string.append( '\f' );
            }
          // fall through
          case 195: break;
          case 58:
            { string.append( '\n' );
            }
          // fall through
          case 196: break;
          case 59:
            { string.append( '\r' );
            }
          // fall through
          case 197: break;
          case 60:
            { string.append( '\t' );
            }
          // fall through
          case 198: break;
          case 61:
            { yybegin(JAVA); return symbol(sym.CHAR_LIT, yytext().charAt(0));
            }
          // fall through
          case 199: break;
          case 62:
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                                                string.append( val );
            }
          // fall through
          case 200: break;
          case 63:
            { return symbol(sym.FLOAT_LIT, Float.parseFloat(yytext()));
            }
          // fall through
          case 201: break;
          case 64:
            { return symbol(sym.FLOAT_TKN);
            }
          // fall through
          case 202: break;
          case 65:
            { return symbol(sym.INT_TKN);
            }
          // fall through
          case 203: break;
          case 66:
            { return symbol(sym.END);
            }
          // fall through
          case 204: break;
          case 67:
            { return symbol(sym.FOR);
            }
          // fall through
          case 205: break;
          case 68:
            { return symbol(sym.MOD);
            }
          // fall through
          case 206: break;
          case 69:
            { return symbol(sym.NOT);
            }
          // fall through
          case 207: break;
          case 70:
            { return symbol(sym.SET);
            }
          // fall through
          case 208: break;
          case 71:
            { return symbol(sym.VAR);
            }
          // fall through
          case 209: break;
          case 72:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LIT, '\"');
            }
          // fall through
          case 210: break;
          case 73:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LIT, '\'');
            }
          // fall through
          case 211: break;
          case 74:
            { yybegin(YYINITIAL);
                                                int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
                                                return symbol(sym.CHAR_LIT, (char)val);
            }
          // fall through
          case 212: break;
          case 75:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LIT, '\\');
            }
          // fall through
          case 213: break;
          case 76:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LIT, '\b');
            }
          // fall through
          case 214: break;
          case 77:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LIT, '\f');
            }
          // fall through
          case 215: break;
          case 78:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LIT, '\n');
            }
          // fall through
          case 216: break;
          case 79:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LIT, '\r');
            }
          // fall through
          case 217: break;
          case 80:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LIT, '\t');
            }
          // fall through
          case 218: break;
          case 81:
            { yybegin(YYINITIAL);
                                                            int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
                                                          return symbol(sym.CHAR_LIT, (char)val);
            }
          // fall through
          case 219: break;
          case 82:
            { yybegin(JAVA); return symbol(sym.CHAR_LIT, '\"');
            }
          // fall through
          case 220: break;
          case 83:
            { yybegin(JAVA); return symbol(sym.CHAR_LIT, '\'');
            }
          // fall through
          case 221: break;
          case 84:
            { yybegin(JAVA);
                                                int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
                                                return symbol(sym.CHAR_LIT, (char)val);
            }
          // fall through
          case 222: break;
          case 85:
            { yybegin(JAVA); return symbol(sym.CHAR_LIT, '\\');
            }
          // fall through
          case 223: break;
          case 86:
            { yybegin(JAVA); return symbol(sym.CHAR_LIT, '\b');
            }
          // fall through
          case 224: break;
          case 87:
            { yybegin(JAVA); return symbol(sym.CHAR_LIT, '\f');
            }
          // fall through
          case 225: break;
          case 88:
            { yybegin(JAVA); return symbol(sym.CHAR_LIT, '\n');
            }
          // fall through
          case 226: break;
          case 89:
            { yybegin(JAVA); return symbol(sym.CHAR_LIT, '\r');
            }
          // fall through
          case 227: break;
          case 90:
            { yybegin(JAVA); return symbol(sym.CHAR_LIT, '\t');
            }
          // fall through
          case 228: break;
          case 91:
            { return symbol(sym.JAVA);
            }
          // fall through
          case 229: break;
          case 92:
            { return symbol(sym.CASE);
            }
          // fall through
          case 230: break;
          case 93:
            { return symbol(sym.CHAR_TKN);
            }
          // fall through
          case 231: break;
          case 94:
            { return symbol(sym.ELSE);
            }
          // fall through
          case 232: break;
          case 95:
            { return symbol(sym.MAIN);
            }
          // fall through
          case 233: break;
          case 96:
            { return symbol(sym.VOID);
            }
          // fall through
          case 234: break;
          case 97:
            { return symbol(sym.REAL_TKN);
            }
          // fall through
          case 235: break;
          case 98:
            { return symbol(sym.THEN);
            }
          // fall through
          case 236: break;
          case 99:
            { return symbol(sym.TYPE);
            }
          // fall through
          case 237: break;
          case 100:
            { return symbol(sym.WITH);
            }
          // fall through
          case 238: break;
          case 101:
            { return symbol(sym.NULL_LIT);
            }
          // fall through
          case 239: break;
          case 102:
            { return symbol(sym.BOOLEAN_LIT, true);
            }
          // fall through
          case 240: break;
          case 103:
            { return symbol(sym.BREAK);
            }
          // fall through
          case 241: break;
          case 104:
            { return symbol(sym.CONST);
            }
          // fall through
          case 242: break;
          case 105:
            { return symbol(sym.GETCH);
            }
          // fall through
          case 243: break;
          case 106:
            { return symbol(sym.SCANF);
            }
          // fall through
          case 244: break;
          case 107:
            { return symbol(sym.WHILE);
            }
          // fall through
          case 245: break;
          case 108:
            { return symbol(sym.ARRAY);
            }
          // fall through
          case 246: break;
          case 109:
            { return symbol(sym.BEGIN);
            }
          // fall through
          case 247: break;
          case 110:
            { return symbol(sym.PRINT);
            }
          // fall through
          case 248: break;
          case 111:
            { return symbol(sym.UNTIL);
            }
          // fall through
          case 249: break;
          case 112:
            { return symbol(sym.CLASS);
            }
          // fall through
          case 250: break;
          case 113:
            { return symbol(sym.BOOLEAN_LIT, false);
            }
          // fall through
          case 251: break;
          case 114:
            { return symbol(sym.SUPER);
            }
          // fall through
          case 252: break;
          case 115:
            { yybegin(JAVA); return symbol(sym.JAVA_SECTION);
            }
          // fall through
          case 253: break;
          case 116:
            { return symbol(sym.PASCAL);
            }
          // fall through
          case 254: break;
          case 117:
            { return symbol(sym.CLEAR);
            }
          // fall through
          case 255: break;
          case 118:
            { return symbol(sym.STRING_TKN);
            }
          // fall through
          case 256: break;
          case 119:
            { return symbol(sym.SWITCH);
            }
          // fall through
          case 257: break;
          case 120:
            { return symbol(sym.DOWNTO);
            }
          // fall through
          case 258: break;
          case 121:
            { return symbol(sym.PACKED);
            }
          // fall through
          case 259: break;
          case 122:
            { return symbol(sym.RECORD);
            }
          // fall through
          case 260: break;
          case 123:
            { return symbol(sym.REPEAT);
            }
          // fall through
          case 261: break;
          case 124:
            { return symbol(sym.RETURN);
            }
          // fall through
          case 262: break;
          case 125:
            { return symbol(sym.PUBLIC);
            }
          // fall through
          case 263: break;
          case 126:
            { return symbol(sym.INCLUDE);
            }
          // fall through
          case 264: break;
          case 127:
            { return symbol(sym.BOOLEAN_TKN);
            }
          // fall through
          case 265: break;
          case 128:
            { return symbol(sym.PRINTLN);
            }
          // fall through
          case 266: break;
          case 129:
            { return symbol(sym.PROGRAM);
            }
          // fall through
          case 267: break;
          case 130:
            { return symbol(sym.DEFAULT);
            }
          // fall through
          case 268: break;
          case 131:
            { return symbol(sym.EXTENDS);
            }
          // fall through
          case 269: break;
          case 132:
            { return symbol(sym.PRIVATE);
            }
          // fall through
          case 270: break;
          case 133:
            { yybegin(PASCAL); return symbol(sym.PASCAL_SECTION);
            }
          // fall through
          case 271: break;
          case 134:
            { return symbol(sym.CONTINUE);
            }
          // fall through
          case 272: break;
          case 135:
            { return symbol(sym.FUNCTION);
            }
          // fall through
          case 273: break;
          case 136:
            { return symbol(sym.PROCEDURE);
            }
          // fall through
          case 274: break;
          case 137:
            { return symbol(sym.PROTECTED);
            }
          // fall through
          case 275: break;
          case 138:
            { yybegin(YYINITIAL); return symbol(sym.MAIN_SECTION);
            }
          // fall through
          case 276: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
