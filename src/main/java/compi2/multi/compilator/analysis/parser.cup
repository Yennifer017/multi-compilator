
package compi2.multi.compilator.analysis;

import java_cup.runtime.*;
import java.util.*;
import compi2.multi.compilator.analysis.symbolt.AccessMod;
import compi2.multi.compilator.analysis.typet.*;
import compi2.multi.compilator.analyzator.*;
import compi2.multi.compilator.semantic.*;
import compi2.multi.compilator.semantic.util.*;
import compi2.multi.compilator.semantic.pexp.*;
import compi2.multi.compilator.semantic.pobj.*;
import compi2.multi.compilator.semantic.past.*;
import compi2.multi.compilator.semantic.pmodule.*;
import compi2.multi.compilator.semantic.jexp.*;
import compi2.multi.compilator.semantic.jclases.*;
import compi2.multi.compilator.semantic.jclases.components.*;
import compi2.multi.compilator.semantic.jast.*;
import compi2.multi.compilator.util.Position;
import compi2.multi.compilator.util.Index;
/*-----------------------------------------------------------
  CUP Specification for the Parser Class
  -----------------------------------------------------------*/
parser code {:
    //fields
    Lexer lex;
    private List<String> syntaxErrors;
    private GenTypeTab genTypeTab;
    private AstGen astGen;
    private Analyzator analyzator;

    //conect the parser with the lexer
    public Parser(Lexer lex, Analyzator analyzator){
        super(lex);
        syntaxErrors = new LinkedList<>();
        genTypeTab = new GenTypeTab();
        astGen = new AstGen();
        this.analyzator = analyzator;
    }

    //getters
    public Lexer getLexer(){
        return this.lex;
    }
    public List<String> getSyntaxErrors(){
        return this.syntaxErrors;
    }
    
    /*SOBREESCRIBIR LOS METODOS DE ERROR*/
    public void syntax_error(Symbol cur_token) {
        StringBuilder mssBuilder = new StringBuilder("Simbolo: ");
        mssBuilder.append(symbl_name_from_id(cur_token.sym));
        
        if(cur_token.value != null){
            mssBuilder.append(", lexema <");
            mssBuilder.append(cur_token.value.toString());
            mssBuilder.append(">");
        }
        mssBuilder.append(", linea: ");
        mssBuilder.append(cur_token.left);
        mssBuilder.append(", columna: ");
        mssBuilder.append(cur_token.right);
        
        if (expected_token_ids().isEmpty()) {
            mssBuilder.append(" -- ya no se esperaba ningun simbolo");
        } else {
            mssBuilder.append(" -- Se esperaba [");
            for (Integer expected_token_id : expected_token_ids()) {
                if(!symbl_name_from_id(expected_token_id).equals("error")){
                    mssBuilder.append(symbl_name_from_id(expected_token_id));
                    mssBuilder.append(" ");
                }
                
            }
            mssBuilder.append("]");
        }
        syntaxErrors.add(mssBuilder.toString());
    }
    
    public void report_error(String message, Object info){
        try{
            Symbol cur_token = (Symbol) info;
            StringBuilder mssBuilder = new StringBuilder("Simbolo: ");
            mssBuilder.append(symbl_name_from_id(cur_token.sym));
            mssBuilder.append(", linea: ");
            mssBuilder.append(cur_token.left);
            mssBuilder.append(", columna: ");
            mssBuilder.append(cur_token.right);
            if(cur_token != null){
                mssBuilder.append(", Lexema: ");
                mssBuilder.append(cur_token.value);
            }

            if(message != null){
                mssBuilder.append(", Info: ");
                mssBuilder.append(message);
            }
            
            syntaxErrors.add(mssBuilder.toString());
        } catch (Exception e){
            syntaxErrors.add(message);
        }
    }


    public void unrecovered_syntax_error(Symbol cur_token) {
        syntaxErrors.add("Errores de sintaxis severos detectados, revisa municiosamente el codigo");
    }
:}

/*---------------------------------------
             Declarations
-----------------------------------------*/
/* Terminals (tokens returned by the scanner). */
terminal    PLUS, MINUS, TIMES, DIV, MODULE, POWER,
            SEMICOLON, COLON, COMMA, DOT,
            LPAREN, RPAREN, LBRACE, RBRACE, LBRACK, RBRACK,
            GRATER, LESS, GRATER_EQUALS, LESS_EQUALS,

            JAVA_SECTION, PASCAL_SECTION, MAIN_SECTION,

            AND,
            ARRAY,
            BEGIN,
            BOOLEAN_TKN,
            BREAK,
            CASE,
            CHAR_TKN,
            CLASS,
            CLEAR,
            CONST,
            CONTINUE,
            DEFAULT,
            DO,
            DOWNTO,
            ELSE,
            END,
            EQUALS,
            EXTENDS,
            FLOAT_TKN,
            FOR,
            FUNCTION,
            GETCH,
            HASH,
            IF,
            IN,
            INCLUDE,
            INT_TKN,
            JAVA,
            MAIN,
            NEW,
            NOT,
            NULL_LIT,
            OF,
            OR,
            PACKED,
            PASCAL,
            PRINT,
            PRINTLN,
            PRIVATE,
            PROCEDURE,
            PROGRAM,
            PROTECTED,
            PUBLIC,
            REAL_TKN,
            RECORD,
            REPEAT,
            RETURN,
            SCANF,
            SET,
            STRING_LIT,
            STRING_TKN,
            SUPER,
            SWITCH,
            THEN,
            THIS,
            TO,
            TYPE,
            UNTIL,
            VAR,
            VOID,
            WHILE,
            WITH,

            ASSIGNATION,
            DIFFERENT,
            AMPERSAND,
            MOD,

            UMINUS,

            BARRA
            ;
terminal String     ID;
terminal Character  CHAR_LIT;
terminal Integer    INTEGER_LIT;
terminal boolean    BOOLEAN_LIT;
terminal float      FLOAT_LIT;


/*----------------------------- Non-terminals ---------------------------------------*/
non terminal        s, main_program
                    ;

/******************************* FOR PASCAL ****************************/
non terminal List<DefAst> pascal_block, pcontent, 
                    procedure_b, procedures, 
                    functions_b, functions
                    ;
non terminal List<Label> id_list
                    ;
non terminal Label var_type
                    ;
non terminal List<DefAst> 
                    list_vardec, var_b, var_dec
                    ;
non terminal Expression expression, bool_exp, arit_exp, literals
                    ;
non terminal InitIf if_stmt
                    ;
non terminal List<Expression> expression_list,
                    labels
                    ;
non terminal Range range, arr_range
                    ;
non terminal Statement simple_stmt, complex_stmt, 
                    complex_else
                    ;
non terminal List<Statement> list_stmts, more_stmts, block_stmt, statements,
                    block_cond, 
                    case_stmts, case_else_stmts
                    ;
non terminal WhileAst while_stmt
                    ;
non terminal ForAst for_stmt
                    ;
non terminal RepeatAst repeat_stmt
                    ;
non terminal CaseAst case_stmt
                    ;   
non terminal ElseAst else_block
                    ;
non terminal FunctionUseStmt definite_fun
                    ;
non terminal FunctionDec function_dec
                    ;
non terminal ProcedureDec procedure_dec
                    ;
non terminal List<Argument> arguments, type_arg
                    ;
non terminal PassIf elif, conditional
                    ;
non terminal List<SimpleCase> case_block
                    ;

/******************************* FOR JAVA ****************************/
non terminal
jlist_args,
jarg,
jstmt,
jcontrol_stmts,
jsimple_stmts,
jif_stmt,
jelif_stmt,
jwhile_stmt,
jdo_while_stmt,
jfor_stmt,
jswitch_stmt,
jswitch_cases,
jcase,
jassign,
jdeclaration,
jmethod_use,
jaccess,
jcomplex_access,
jbool_exp,
jarit_exp,
jexp_list,
jarray_access,
jliterals,
jdefinite_funcs
;

non terminal jbrack
    ;
non terminal List<JClass> java_block, jcontent
    ;
non terminal JClass jclass
    ;
non terminal AccessMod jmodificator
    ;
non terminal Label jherence
    ;
non terminal List<JDef> jinternal_block
    ;
non terminal JDef jinternal
    ;
non terminal Typable joptions_dec
    ;
non terminal List<JArg> jargs
    ;
non terminal List<Statement> jstmts_block
    ;
non terminal JMethod jmethod_dec
    ;
non terminal Expression jexp
    ;
non terminal JType jtype
    ;
non terminal Index jbracks_list
    ;


/********************** FOR MAIN PROGRAM (C) ****************************/
non terminal 
ctype,
carray_dims,
carray_access,
caccess,
cparams,
cexp_list,
cimports,
cconst_b,
cvars_b,
cvars_dec,
c_java_construct,
c_j_construct,
cstmts,
single_stmt,
def_functions_stmt,
ccontrol_stmts,
cif_stmt,
celif_stmt,
cswitch_stmt,
ccases,
ccase,
cfor_stmt,
cwhile_stmt,
cdo_while_stmt,
cinvocation_stmt,
cexp,
cbool_exp,
carit_exp,
casign
;


/*------------------------------------------------------------------------------
                                 Precedences
--------------------------------------------------------------------------------*/

/*booleanos*/
precedence left THEN;
precedence left ELSE;
precedence left OR;
precedence left AND;
precedence left NOT;

/*operaciones*/
precedence left PLUS, MINUS;
precedence left TIMES, DIV, BARRA, MOD;
precedence left POWER;
precedence right UMINUS;

precedence right SEMICOLON;

precedence left IF;
precedence left ELSE;

/* --------------------------------------
            The grammar 
-----------------------------------------*/
start with s;
s ::=   pascal_block:pb
        java_block
        main_program
            {:
                analyzator.pascalSemanticAnalysis(pb);
            :}
    ;

/* --------------------------------------------------------------------------------------------------
                                            PASCAL
-----------------------------------------------------------------------------------------------------*/
pascal_block ::= PASCAL_SECTION pcontent:l
            {:
                RESULT = l;
            :}
        ;

pcontent ::= functions_b:lf procedure_b:lp
            {:
                if(lf != null && lp != null){
                    lf.addAll(lp);
                    RESULT = lf;
                } else if (lf != null){
                    RESULT = lf;
                } else if (lp != null){
                    RESULT = lp;
                } else {
                    RESULT = new LinkedList<>();
                }
            :}
        ;
/*-------------------------------------- UTILITIES --------------------------------*/
var_type ::= INT_TKN:t  
                    {: 
                        RESULT = new Label(
                            PrimitiveType.IntegerPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    :}
            | FLOAT_TKN:t    
                    {: 
                        RESULT = new Label(
                            PrimitiveType.RealPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    :}
            | BOOLEAN_TKN:t 
                    {: 
                        RESULT = new Label(
                            PrimitiveType.BooleanPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    :}
            | CHAR_TKN:t    
                    {: 
                        RESULT = new Label(
                            PrimitiveType.CharPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    :}
            | STRING_TKN:t  
                    {: 
                        RESULT = new Label(
                            PrimitiveType.StringPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    :}
            | ID:t  
                    {: 
                        RESULT = new Label(
                            t, 
                            new Position(tleft, tright)
                        ); 
                    :}
            | error
            ;

id_list ::= id_list:l COMMA ID:i
                    {:
                        if(l != null){
                            l.add(new Label(i, new Position(ileft, iright)));
                        } else {
                            l = new ArrayList<>();
                        }
                        RESULT = l;
                    :}

            | ID:i      
                    {:
                        List<Label> list = new ArrayList<>();
                        list.add(new Label(i, new Position(ileft, iright)));
                        RESULT = list;
                    :}
            ;

range ::= expression:e1 DOT DOT DOT expression:e2
                    {:
                        RESULT = new Range(e1, e2);
                    :}
            ;

arr_range ::= LBRACK expression:e1 DOT DOT expression:e2 RBRACK
                    {:
                         RESULT = new Range(e1, e2);
                    :}
            ;

expression_list ::= expression_list:l COMMA expression:e
                    {:
                        if(l != null){
                            l.add(e);
                        } else {
                            l = new LinkedList<>();
                        }
                        RESULT = l;
                    :}
            | expression:e
                    {:
                        LinkedList<Expression> list = new LinkedList<Expression>();
                        list.add(e);
                        RESULT = list;
                    :}
            ;


/*-------------------------------------- VARIABLES BLOCK -------------------------------*/
var_b ::= VAR list_vardec:l
                    {:
                        RESULT = l;
                    :}
            | /* emtpy */
                    {:
                        RESULT = new LinkedList<DefAst>();
                    :}
            ;

list_vardec ::= list_vardec:l var_dec:dl SEMICOLON
                    {:
                        try{
                            l.addAll(dl);
                        } catch (NullPointerException e){}    
                        RESULT = l;
                    :}
            | var_dec:l SEMICOLON
                    {:
                        RESULT = l;
                    :}  
        /*ERROR MANAGE*/
            | list_vardec:l var_dec:dl error var_dec
                    {:
                        try{
                            l.addAll(dl);
                        } catch (NullPointerException e){}    
                        RESULT = l;
                    :}
            | error var_dec:l
                    {:
                        RESULT = l;
                    :} 
            | var_dec:l error var_dec
                    
            ;

var_dec ::= id_list:l COLON var_type:t 
                    {:
                        RESULT = genTypeTab.userDef(l, t);
                    :}
            | id_list:l COLON ARRAY arr_range:r OF var_type:t 
                    {:
                        RESULT = genTypeTab.arrayDef(l, t, r);
                    :}
        /*MANAGE ERRORS*/
            | id_list:l error var_type:t 
                    {:
                        RESULT = genTypeTab.userDef(l, t);
                    :}
            | id_list:l error range:r 
                    {:
                        RESULT = genTypeTab.rangeDef(l, r);
                    :}
            | id_list:l error ARRAY arr_range:r OF var_type:t 
                    {:
                        RESULT = genTypeTab.arrayDef(l, t, r);
                    :}
            ;


/*---------------------------------- EXPRESSION BLOCK -------------------------------------*/

expression ::= expression:e1 AND:o expression:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.And, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | expression:e1 AND:o THEN expression:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.AndThen, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | expression:e1 OR:o expression:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.Or, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | expression:e1 OR:o ELSE expression:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.OrElse, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | NOT:o expression:e
                    {:
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Not,
                            e,
                            new Position(oleft, oright)
                        );
                    :}
            | bool_exp:e
                    {:
                        RESULT = e;
                    :}
            ;

bool_exp ::= arit_exp:e1 EQUALS:o arit_exp:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.EqualsTo, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | arit_exp:e1 DIFFERENT:o arit_exp:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.DifferentTo, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | arit_exp:e1 GRATER:o arit_exp:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.GraterThan, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | arit_exp:e1 LESS:o arit_exp:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.LessThan, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | arit_exp:e1 GRATER_EQUALS:o arit_exp:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.GraterEq, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | arit_exp:e1 LESS_EQUALS:o arit_exp:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.LessEq, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | arit_exp:e
                    {:
                        RESULT = e;
                    :}
            ;

arit_exp ::= 
        /*MANAGE ERRORS*/
                error PLUS error
            | error MINUS error
            | error TIMES error
            | error DIV error
            | error BARRA error
            | error MOD error
            | arit_exp:e1 PLUS:o arit_exp:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.Addition, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | arit_exp:e1 MINUS:o arit_exp:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.Substraction, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | arit_exp:e1 TIMES:o arit_exp:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.Multiplication, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | arit_exp:e1 DIV:o arit_exp:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.Division, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | arit_exp:e1 MOD:o arit_exp:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.Module, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | arit_exp:e1 POWER:o arit_exp:e2
                    {:
                        RESULT = new Operation(
                            DefiniteOperation.Power, e1, e2,
                            new Position(oleft, oright)
                        );
                    :}
            | literals:e
                    {:
                        RESULT = e;
                    :}
            | ID:i LBRACK arit_exp:e RBRACK
                    {:
                        RESULT = new VectorUse(
                            i, e, new Position(ileft, iright)
                        );
                    :}
            | ID:i LPAREN expression_list:l RPAREN
                    {:
                        RESULT = new FunctionUse(
                            i, l, new Position(ileft, iright)
                        );
                    :}
            | ID:i LPAREN RPAREN
                    {:
                        RESULT = new FunctionUse(
                            i, new Position(ileft, iright)
                        );
                    :}
            | ID:i
                    {:
                        RESULT = new SingleExp(
                            i, new Position(ileft,iright)
                        );
                    :}
            %prec UMINUS
            | LPAREN expression:e RPAREN
                    {:
                        RESULT = e;
                    :}
            %prec UMINUS
            | PLUS:o arit_exp:e
                    {:
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Addition,
                            e,
                            new Position(oleft, oright)
                        );
                    :}
            %prec UMINUS
            | MINUS:o arit_exp:e
                    {:
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Substraction,
                            e,
                            new Position(oleft, oright)
                        );
                    :}
        /*MANAGE ERRORS*/
            %prec UMINUS
            | LPAREN error RPAREN
            %prec UMINUS        
            | MINUS error
            %prec UMINUS
            | PLUS error
            ;

literals ::= BOOLEAN_LIT:l
                    {:
                        RESULT = new SingleExp(
                            PrimitiveType.BooleanPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    :}
            | INTEGER_LIT:l
                    {:
                        RESULT = new SingleExp(
                            PrimitiveType.IntegerPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    :}
            | FLOAT_LIT:l
                    {:
                        RESULT = new SingleExp(
                            PrimitiveType.RealPT, 
                            new Position(lleft, lright)
                        );
                    :}
            | CHAR_LIT:l
                    {:
                        RESULT = new SingleExp(
                            PrimitiveType.CharPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    :}
            | STRING_LIT:l
                    {:
                        RESULT = new SingleExp(
                            PrimitiveType.StringPT, 
                            new Position(lleft, lright)
                        );
                    :}
            ;


/*------------------------------------------- STATEMENTS BLOCK ------------------------------*/

/************************* conditionals *****************************/
conditional ::=
          if_stmt:i block_cond:ls
                {:
                    RESULT = new PassIf(new IfAst(
                        i.getExpression(), 
                        ls, 
                        i.getPosition()
                    ));
                :}
        | if_stmt:i block_cond:ls SEMICOLON
                {:
                    RESULT = new PassIf(new IfAst(
                        i.getExpression(), 
                        ls,
                        i.getPosition()
                    ));
                :}
        | if_stmt:i block_cond:ls ELSE:e elif:pi
                {:  
                    if(pi.getElseAst() != null && pi.getElseAst().getInitPos() == null){
                        pi.getElseAst().setInitPos(
                            new Position(eleft, eright)
                        );
                    }
                    RESULT = astGen.genPassIf(
                        pi, 
                        new IfAst(i.getExpression(), ls, i.getPosition())
                    );
                :}
        ;

if_stmt ::= IF:i LPAREN expression:e RPAREN THEN
                {:  
                    RESULT = new InitIf(e, new Position(ileft, iright));     
                :}
        | IF:i LPAREN error RPAREN THEN
                {:  
                    RESULT = new InitIf(null, new Position(ileft, iright));     
                :}
    /*MANAGE ERRORS*/
        | IF:i LPAREN expression:e error THEN
                {:  
                    RESULT = new InitIf(e, new Position(ileft, iright));     
                :}
        | IF:i error expression:e RPAREN THEN
                {:  
                    RESULT = new InitIf(e, new Position(ileft, iright));     
                :}
        | IF:i error expression:e error THEN
                {:  
                    RESULT = new InitIf(e, new Position(ileft, iright));     
                :}
        ;
block_cond ::= simple_stmt:s
                {:
                    RESULT = astGen.oneStmtInList(s);
                :}
        | complex_stmt:s
                {:
                    RESULT = astGen.oneStmtInList(s);
                :}
        | BEGIN block_stmt:ls END
                {:
                    RESULT = ls;
                :}
        ;
elif ::= else_block:e SEMICOLON
                {:
                    RESULT = new PassIf(e);
                :}
        | conditional:pi
                {:
                    RESULT = pi;
                :}
        ;

else_block ::= complex_else:s
                {:  
                    RESULT = new ElseAst(astGen.oneStmtInList(s)); 
                :}
        | simple_stmt:s
                {:
                    RESULT = new ElseAst(astGen.oneStmtInList(s)); 
                :}
        | BEGIN block_stmt:ls END
                {:
                    RESULT = new ElseAst(ls);
                :}
        ;

complex_else ::= case_stmt:s
                {:  RESULT = s; :}
        | while_stmt:s
                {:  RESULT = s; :}
        | for_stmt:s
                {:  RESULT = s; :}
        | repeat_stmt:s
                {:  RESULT = s; :}
        ;

/************************* case *****************************/

case_stmt ::= CASE:c LPAREN expression:e RPAREN OF case_block:lsc 
                    ELSE case_else_stmts:ls END SEMICOLON
                {:
                    RESULT = new CaseAst(e, lsc, new ElseAst(ls), new Position(cleft, cright));
                :}
        ;

case_block ::= case_block:l labels:labs COLON case_stmts:ls SEMICOLON
                {:
                    if(l != null){
                        l.add(new SimpleCase(labs, ls));
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                :}
        | labels:labs COLON case_stmts:ls SEMICOLON
                {:
                    RESULT = astGen.genSimpleCaseList(labs, ls);
                :}
        ;

labels ::= labels:l COMMA expression:e
                {:
                    if(l != null){
                        l.add(e);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                :}
        | expression:e
                {:
                    LinkedList<Expression> list = new LinkedList<>();
                    list.add(e);
                    RESULT = list;
                :}
        ;

case_stmts ::= simple_stmt:s
                {:
                    RESULT = astGen.oneStmtInList(s);
                :}
        | complex_stmt:s
                {:
                    RESULT = astGen.oneStmtInList(s);
                :}
        | BEGIN block_stmt:l END
                {:
                    RESULT = l;
                :}
        ;

case_else_stmts ::= simple_stmt:s
                {:
                    RESULT = astGen.oneStmtInList(s);
                :}
        | simple_stmt:s SEMICOLON
                {:
                    RESULT = astGen.oneStmtInList(s);
                :}
        | complex_stmt:s
                {:
                    RESULT = astGen.oneStmtInList(s);
                :}
        | BEGIN block_stmt:l
                {:      
                    RESULT = l;
                :}
        ;

/************************* ciclos *****************************/

while_stmt ::= WHILE:w LPAREN expression:e RPAREN DO statements:l
                {:
                    RESULT = new WhileAst(e, l, new Position(wleft, wright));
                :}
        | WHILE:w LPAREN error RPAREN DO statements:l
                {:
                    RESULT = new WhileAst(null, l, new Position(wleft, wright));
                :}
        ;

for_stmt ::= FOR:f ID:i ASSIGNATION expression:e1 TO expression:e2 DO statements:l
                {:
                    Range range = new Range(e1, e2);
                    Label variable = new Label(i, new Position(ileft, iright));
                    RESULT = new ForAst(variable, range, l, new Position(fleft, fright));
                :}
        | FOR:f ID:i ASSIGNATION error TO expression:e2 DO statements:l
                {:
                    Range range = new Range(null, e2);
                    Label variable = new Label(i, new Position(ileft, iright));
                    RESULT = new ForAst(variable, range, l, new Position(fleft, fright));
                :}
        | FOR:f ID:i error expression:e1 TO expression:e2 DO statements:l
                {:
                    Range range = new Range(e1, e2);
                    Label variable = new Label(i, new Position(ileft, iright));
                    RESULT = new ForAst(variable, range, l, new Position(fleft, fright));
                :}
        ;

repeat_stmt ::= REPEAT:r statements:l UNTIL expression:e
                {:
                    RESULT = new RepeatAst(e, l, new Position(rleft, rright));
                :}
        ;

/************************* statements *****************************/
statements ::= simple_stmt:s SEMICOLON
                {:
                    RESULT = astGen.oneStmtInList(s);
                :}
        | complex_stmt:s
                {:
                    RESULT = astGen.oneStmtInList(s);
                :}
        | BEGIN block_stmt:l END SEMICOLON
                {:
                    RESULT = l;
                :}
        ;

block_stmt ::= list_stmts:l
                {:  RESULT = l; :}
        | /* empty */
                {:
                    RESULT = new LinkedList<Statement>();
                :}
        ;

list_stmts ::= simple_stmt:s
                {:
                    RESULT = astGen.oneStmtInList(s);
                :}
        | simple_stmt:s SEMICOLON
                {:
                    RESULT = astGen.oneStmtInList(s);
                :}
        | complex_stmt:s
                {:
                    RESULT = astGen.oneStmtInList(s);
                :}
        | simple_stmt:s SEMICOLON more_stmts:l
                {:
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                :}
        | complex_stmt:s more_stmts:l
                {:
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                :}
        ;

more_stmts ::= 
          simple_stmt:s error
                {:
                    RESULT = astGen.oneStmtInList(s);
                :}
        | simple_stmt:s
                {:
                    RESULT = astGen.oneStmtInList(s);
                :}
        | simple_stmt:s SEMICOLON
                {:
                    RESULT = astGen.oneStmtInList(s);
                :}
        | simple_stmt:s SEMICOLON more_stmts:l
                {:
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                :}
        | complex_stmt:s more_stmts:l
                {:
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                :}
        | complex_stmt:s
                {:
                    RESULT = astGen.oneStmtInList(s);
                :}
        ;

simple_stmt ::= BREAK:b
                {:  
                    RESULT = new SimpleStmt(
                        SimpleStmt.BREAK, 
                        new Position(bleft, bright)
                    );  
                :}
        | CONTINUE:c
                {:  
                    RESULT = new SimpleStmt(
                        SimpleStmt.CONTINUE,
                        new Position(cleft, cright)
                    );  
                :}
        | ID:i ASSIGNATION expression:e
                {:  
                    RESULT = new Assignation(
                        new Label(i, new Position(ileft, iright)), e
                    );
                :}
        | ID:i LPAREN expression_list:el RPAREN
                {:
                    RESULT = new FunctionUseStmt(
                        new Label(i, new Position(ileft, iright)),
                        el
                    );
                :}
        | ID:i LPAREN RPAREN
                {:
                    RESULT = new FunctionUseStmt(
                        new Label(i, new Position(ileft, iright)),
                        new LinkedList<>()
                    );
                :}
        | ID:i LBRACK expression:e1 RBRACK ASSIGNATION expression:e2
                {:
                    RESULT = new ArrayAssign(
                        new Label(i, new Position(ileft, iright)),
                        e1,
                        e2
                    );
                :}
        | definite_fun:fu
                {: RESULT = fu; :} 
        | error
        ; 

complex_stmt ::= conditional:pi
                {:  
                    RESULT =  astGen.transformPassIf(pi); 
                :}
        | case_stmt:s
                {:  RESULT = s; :}
        | while_stmt:s
                {:  RESULT = s; :}
        | for_stmt:s
                {:  RESULT = s; :}
        | repeat_stmt:s
                {:  RESULT = s; :}
        ;

/*-------------------- FUNCTIONS -------------------------*/

functions_b ::= functions:l
                {:
                    RESULT = l;
                :}
        | /* empty */
                {:
                    RESULT = new LinkedList<>();
                :}
        ;

functions ::= functions:l function_dec:d
                {:
                    if(l != null){
                        l.add(d);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                :}
        | function_dec:d
                {:
                    LinkedList<DefAst> list = new LinkedList<>();
                    list.add(d);
                    RESULT = list;
                :}
        ;

function_dec ::= FUNCTION ID:i LPAREN arguments:a RPAREN COLON var_type:t SEMICOLON
            var_b:lv
            BEGIN block_stmt:ls END SEMICOLON
                {:  
                    RESULT = new FunctionDec(
                        new Label(i, new Position(ileft, iright)),
                        t, a, lv, ls
                    );
                :}
        ;

/*-------------------------------------- PROCEDURES ----------------------------------*/

procedure_b ::= procedures:p
                {:
                    RESULT = p;
                :} 
        | /* empty */
                {:  
                    RESULT = new LinkedList<>();
                :}
        ;

procedures ::= procedures:l procedure_dec:d
                {:
                    if(l != null){
                        l.add(d);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                :}
        | procedure_dec:d
                {:
                    LinkedList<DefAst> list = new LinkedList<>();
                    list.add(d);
                    RESULT = list;
                :}
        ;

procedure_dec ::= PROCEDURE ID:i LPAREN arguments:a RPAREN SEMICOLON
            var_b:lv
            BEGIN block_stmt:ls END SEMICOLON
                {:
                    RESULT = new ProcedureDec(
                        new Label(i, new Position(ileft, iright)),
                        a, lv, ls
                    );
                :}
        ;

/*---------------------------------- PARAMS / ARGUMENTS ----------------------------------*/
arguments ::= arguments:l COMMA type_arg:args
                {:
                    try{
                        l.addAll(args);
                    } catch (NullPointerException e){

                    }
                    
                    RESULT = l;
                :}
        | type_arg:args
                {:
                    RESULT = args;
                :}
        | /* empty */
                {:
                    RESULT = new LinkedList<Argument>();
                :}
        ;

type_arg ::= VAR id_list:l COLON var_type:t
                {:
                    RESULT = astGen.generateArgs(l, t, true);
                :}
        | id_list:l COLON var_type:t
                {:
                    RESULT = astGen.generateArgs(l, t, false);
                :}
        ;


/* --------------------------------------------------------------------------------------------------
                                            JAVA
-----------------------------------------------------------------------------------------------------*/
java_block ::= JAVA_SECTION jcontent:lc
            {:
                RESULT = lc;
            :}
        ;

/*-------------------------UTIL----------------------------*/
jmodificator ::= PUBLIC
            {: 
                RESULT = AccessMod.PUBLIC; 
            :}
        | PRIVATE
            {: 
                RESULT = AccessMod.PRIVATE; 
            :}
        | PROTECTED
            {: 
                RESULT = AccessMod.PROTECTED; 
            :}
        ;

jtype ::= INT_TKN:t jbracks_list:i
            {:
                RESULT = new JArrayType(
                    new Label(
                        PrimitiveType.IntegerPT.getName(), 
                        new Position(tleft, tright)
                    ),
                    JReferType.PrimitiveData,
                    i.getNumber()
                );
            :}
        | STRING_TKN:t jbracks_list:i
            {:
                RESULT = new JArrayType(
                    new Label(
                        PrimitiveType.StringPT.getName(), 
                        new Position(tleft, tright)
                    ),
                    JReferType.PrimitiveData,
                    i.getNumber()
                );
            :}
        | FLOAT_TKN:t jbracks_list:i
            {:
                RESULT = new JArrayType(
                    new Label(
                        PrimitiveType.RealPT.getName(), 
                        new Position(tleft, tright)
                    ),
                    JReferType.PrimitiveData,
                    i.getNumber()
                );
            :}
        | BOOLEAN_TKN:t jbracks_list:i
            {:
                RESULT = new JArrayType(
                    new Label(
                        PrimitiveType.BooleanPT.getName(), 
                        new Position(tleft, tright)
                    ),
                    JReferType.PrimitiveData,
                    i.getNumber()
                );
            :}
        | CHAR_TKN:t jbracks_list:i
            {:
                RESULT = new JArrayType(
                    new Label(
                        PrimitiveType.CharPT.getName(), 
                        new Position(tleft, tright)
                    ),
                    JReferType.PrimitiveData,
                    i.getNumber()
                );
            :}
        | ID:id jbracks_list:i
            {:
                RESULT = new JArrayType(
                    new Label( id, new Position(idleft, idright)),
                    JReferType.ObjectReference,
                    i.getNumber()
                );
            :}
        | INT_TKN:t
            {:
                RESULT = new JType(
                    JReferType.PrimitiveData,
                    new Label(
                        PrimitiveType.IntegerPT.getName(), 
                        new Position(tleft, tright)
                    )
                );
            :}
        | STRING_TKN:t
            {:
                RESULT = new JType(
                    JReferType.PrimitiveData,
                    new Label(
                        PrimitiveType.StringPT.getName(), 
                        new Position(tleft, tright)
                    )
                );
            :}
        | FLOAT_TKN:t
            {:
                RESULT = new JType(
                    JReferType.PrimitiveData,
                    new Label(
                        PrimitiveType.RealPT.getName(), 
                        new Position(tleft, tright)
                    )
                );
            :}
        | BOOLEAN_TKN:t
            {:
                RESULT = new JType(
                    JReferType.PrimitiveData,
                    new Label(
                        PrimitiveType.BooleanPT.getName(), 
                        new Position(tleft, tright)
                    )
                );
            :}
        | CHAR_TKN:t
            {:
                RESULT = new JType(
                    JReferType.PrimitiveData,
                    new Label(
                        PrimitiveType.CharPT.getName(), 
                        new Position(tleft, tright)
                    )
                );
            :}
        | ID:id
            {:
                RESULT = new JType(
                    JReferType.ObjectReference,
                    new Label(id, new Position(idleft, idright))
                );
            :}
        ;

jbracks_list ::= jbracks_list:i jbrack
            {:
                i.increment();
                RESULT = i;
            :}
        | jbrack
            {:
                RESULT = new Index();
            :}
        ;

jbrack ::= LBRACK RBRACK
        ;

jarray_access ::= LBRACK jexp:e RBRACK
        | jarray_access LBRACK jexp:e RBRACK
        ;

jexp_list ::= jexp_list COMMA jexp 
        | jexp
        ;

jliterals ::= INTEGER_LIT
        | STRING_LIT
        | BOOLEAN_LIT
        | CHAR_LIT
        | FLOAT_LIT
        ;

/*-------------------------CLASES----------------------------*/
jcontent ::= jcontent:l jclass:c
            {:
                l.add(c);
                RESULT = l;
            :}
        | /* empty */
            {:
                RESULT = new LinkedList<>();
            :}
        ;

jclass ::= PUBLIC CLASS ID:id jherence:h LBRACE jinternal_block:ld RBRACE
            {:
                RESULT = new JClass(
                    new Label(id, new Position(idleft, idright)),
                    h, ld
                );
            :}
        ;

jherence ::= EXTENDS ID:id
            {:
                RESULT = new Label(
                    id, 
                    new Position(idleft, idright)
                );
            :}
        | /* empty */
            {:
                RESULT = null;
            :}
        ;

/*-------------------------METHODS AND FIELDS----------------------------*/
jinternal_block ::= jinternal_block:l jinternal:d
            {:
                l.add(d);
                RESULT = l;
            :}
        | /* empty */
            {:
                RESULT = new LinkedList<>();
            :}
        ;

jinternal ::= 
        /* declarations */
        jmodificator:a jtype:t ID:id joptions_dec:d
            {:
                d.defineType(t);
                JDef jdef = (JDef) d;
                jdef.setAccess(a);
                jdef.setName(new Label(id, new Position(idleft, idright)));
                RESULT = jdef;
            :}
        /* void method */
        | jmodificator:a VOID ID:id jmethod_dec:m
            {:
                m.setAccess(a);
                m.setName(new Label(id, new Position(idleft, idright)));
                m.setType(new JType());
                RESULT = m;
            :}
        /* constructor */
        | jmodificator:m ID:id LPAREN jargs:la RPAREN LBRACE jstmts_block:ls RBRACE
            {:
                RESULT = new JConstructor(
                    new Label(id, new Position(idleft, idright)),
                    m, la, ls
                );
            :}
        ;

joptions_dec ::= 
        /*simple field*/
        SEMICOLON
            {:
                RESULT = new JField();
            :}
        /*simple and declaration field*/
        | ASSIGNATION jexp:e SEMICOLON
            {:
                JField field = new JField();
                field.setExpAssign(e);
                RESULT = field;
            :}
        /*method*/
        | jmethod_dec:m
            {:
                RESULT = m;
            :}
        ;

jmethod_dec ::= LPAREN jargs:la RPAREN LBRACE jstmts_block:ls RBRACE
            {:
                RESULT = new JMethod(null, null, la, ls);
            :}
        ;


/*---------------------------------- ARGS --------------------------------*/

jargs ::= jlist_args
        | /* empty */
        ;

jlist_args ::= jlist_args COMMA jarg
        | jarg
        ;

jarg ::= jtype ID
        ;

/*--------------------------- STATEMENTS -----------------------------------*/

jstmts_block ::= jstmts_block jstmt
        | jstmt
        ;

jstmt ::= jcontrol_stmts
        | jsimple_stmts
        | jdeclaration
        | jmethod_use
        | jassign
        | jdefinite_funcs
        ;

jcontrol_stmts ::= jif_stmt
        | jwhile_stmt
        | jdo_while_stmt
        | jfor_stmt
        | jswitch_stmt 
        ;

jsimple_stmts ::= BREAK SEMICOLON
        | CONTINUE SEMICOLON
        | RETURN jexp SEMICOLON
        ; 

jdefinite_funcs ::= PRINT LPAREN jexp_list RPAREN
        | PRINTLN LPAREN jexp_list RPAREN
        ;

/************************** CONDITIONAL *************************/

jif_stmt ::= IF LPAREN jexp RPAREN LBRACE jstmts_block RBRACE jelif_stmt
        ;

jelif_stmt ::= ELSE LBRACE jstmts_block RBRACE
        | ELSE jif_stmt
        | /* empty */
        ;

/**************************** CICLOS ****************************/

jwhile_stmt ::= WHILE LPAREN jexp RPAREN LBRACE jstmts_block RBRACE
        ;

jdo_while_stmt ::= DO LBRACE jstmts_block RBRACE WHILE LPAREN jexp RPAREN SEMICOLON
        ;

jfor_stmt ::= FOR RPAREN jexp SEMICOLON jexp SEMICOLON jexp RPAREN LBRACE jstmts_block RBRACE
        ;

/****************************** SWITCH **************************/

jswitch_stmt ::= SWITCH LPAREN jexp RPAREN LBRACE jswitch_cases RBRACE
        ;

jswitch_cases ::= jswitch_cases jcase
        | jcase
        ;

jcase ::= CASE jexp COLON jstmts_block
        | DEFAULT COLON jstmts_block
        ;



/****************************** ASSIGNATIONS **************************/
jassign ::= ID ASSIGNATION jexp SEMICOLON
        | THIS jaccess ASSIGNATION jexp SEMICOLON
        | SUPER jaccess ASSIGNATION jexp SEMICOLON
        | ID jaccess ASSIGNATION jexp SEMICOLON
        | ID LPAREN RPAREN jaccess ASSIGNATION jexp SEMICOLON
        | ID LPAREN jexp_list RPAREN jaccess ASSIGNATION jexp SEMICOLON
        | ID jarray_access jaccess ASSIGNATION jexp SEMICOLON
        ;

/****************************** OTHERS **************************/
jdeclaration ::= jtype ID ASSIGNATION jexp SEMICOLON
        | jtype ID SEMICOLON
        ;

jmethod_use ::= THIS jaccess SEMICOLON
        | THIS LPAREN RPAREN SEMICOLON
        | THIS LPAREN jexp_list RPAREN SEMICOLON
        | SUPER jaccess SEMICOLON
        | SUPER LPAREN RPAREN SEMICOLON
        | SUPER LPAREN jexp_list RPAREN SEMICOLON
        | ID jaccess SEMICOLON
        | ID LPAREN RPAREN SEMICOLON
        | ID LPAREN jexp_list RPAREN SEMICOLON
        | ID LPAREN RPAREN jaccess SEMICOLON
        | ID LPAREN jexp_list RPAREN jaccess SEMICOLON
        | ID jarray_access jaccess SEMICOLON
        ;

jaccess ::= DOT jcomplex_access jaccess
        | DOT jcomplex_access
        ;

jcomplex_access ::= ID
        | ID LPAREN RPAREN 
        | ID LPAREN RPAREN jarray_access
        | ID LPAREN jexp_list RPAREN
        | ID LPAREN jexp_list RPAREN jarray_access
        | ID jarray_access
        ;


/*------------------------------EXPRESSIONS --------------------------------------*/
jexp ::= jexp AND jexp
        | jexp OR jexp
        | NOT jexp
        | jbool_exp
        ;

jbool_exp ::= jarit_exp:e1 EQUALS:o jarit_exp:e2j
        | jarit_exp:e1 DIFFERENT:o jarit_exp:e2j
        | jarit_exp:e1 GRATER:o jarit_exp:e2j
        | jarit_exp:e1 LESS:o jarit_exp:e2j
        | jarit_exp:e1 GRATER_EQUALS:o jarit_exp:e2j
        | jarit_exp:e1 LESS_EQUALS:o jarit_exp:e2j
        | jarit_exp:ej
        ;

jarit_exp ::= jarit_exp:e1 PLUS:o jarit_exp:e2
        | jarit_exp:e1 MINUS:o jarit_exp:e2
        | jarit_exp:e1 TIMES:o jarit_exp:e2
        | jarit_exp:e1 DIV:o jarit_exp:e2
        | jarit_exp:e1 MOD:o jarit_exp:e2
        | jarit_exp:e1 POWER:o jarit_exp:e2
        | jliterals:e
        | ID:i jarray_access
        | ID:i jarray_access jaccess
        | ID:i LPAREN jexp_list:l RPAREN
        | ID:i LPAREN RPAREN
        | ID:i LPAREN jexp_list:l RPAREN jaccess
        | ID:i LPAREN RPAREN jaccess
        | ID:i jaccess
        | ID:i
        | THIS jaccess
        | SUPER jaccess
        | NEW ID LPAREN RPAREN
        | NEW ID LPAREN jexp_list RPAREN
        %prec UMINUS
        | LPAREN jexp:e RPAREN
        %prec UMINUS
        | PLUS:o jarit_exp:e
        %prec UMINUS
        | MINUS:o jarit_exp:e
        ;

/* --------------------------------------------------------------------------------------------------
                                            MAIN (C)
-----------------------------------------------------------------------------------------------------*/
main_program ::=  
        MAIN_SECTION
        cimports 
        cconst_b
        cvars_b
        VOID MAIN LPAREN RPAREN LBRACE cstmts RBRACE
        ;

/*--------------------------------- UTIL ---------------------------------*/

ctype ::= INT_TKN   
        | CHAR_TKN
        | FLOAT_TKN
        | STRING_TKN
        | BOOLEAN_TKN
        ;

carray_dims ::= carray_dims LBRACK cexp RBRACK
        | LBRACK cexp RBRACK
        ;

cparams ::= cexp COMMA cparams
        | cexp
        ;

cexp_list ::= cexp_list COMMA cexp
        | cexp
        ;

/*----------------------------- INIT SECTION ----------------------------*/

cimports ::= cimports HASH INCLUDE STRING_LIT
        | /* empty */
        ;

cconst_b ::= cconst_b CONST ctype ID ASSIGNATION literals SEMICOLON
        | /* empty */
        ;

cvars_b ::= cvars_b cvars_dec
        | /* empty */
        ;

cvars_dec ::= ctype ID SEMICOLON
        | ctype ID ASSIGNATION cexp SEMICOLON
        | ctype ARRAY carray_dims SEMICOLON
        | JAVA DOT ID c_java_construct SEMICOLON
        | JAVA DOT ID ARRAY carray_dims SEMICOLON
        ;

c_java_construct ::= c_j_construct COMMA c_java_construct
        | c_j_construct
        ;

c_j_construct ::= ID LPAREN RPAREN
        | ID LPAREN cparams RPAREN
        ;

/*--------------------------- STATEMENTS ---------------------------------*/

cstmts ::= ccontrol_stmts
        | single_stmt
        | def_functions_stmt
        ;


single_stmt ::= BREAK SEMICOLON
        | CONTINUE SEMICOLON
        ;

def_functions_stmt ::=  SCANF LPAREN STRING_LIT COMMA AMPERSAND ID RPAREN SEMICOLON
        | PRINT LPAREN cexp_list RPAREN
        | CLEAR LPAREN RPAREN SEMICOLON
        | GETCH LPAREN RPAREN SEMICOLON
        ;

ccontrol_stmts ::= cif_stmt
        | celif_stmt
        | cswitch_stmt
        | cfor_stmt 
        | cwhile_stmt
        | cdo_while_stmt
        ;

/************************conditional *************************/

cif_stmt ::= IF LPAREN cexp RPAREN LBRACE cstmts RBRACE celif_stmt
        ;

celif_stmt ::= ELSE cif_stmt
        | ELSE LBRACE cstmts RBRACE
        ;


/************************ switch ********************************/

cswitch_stmt ::= SWITCH LPAREN cexp RPAREN LBRACE ccases RBRACE
        ;

ccases ::= ccases ccase
        | ccase
        ;

ccase ::= CASE cexp COLON cstmts BREAK SEMICOLON
        | DEFAULT COLON cstmts BREAK SEMICOLON
        ;

/********************** ciclos ************************************/

cfor_stmt ::= FOR LPAREN casign SEMICOLON cexp SEMICOLON cexp RPAREN LBRACE cstmts RBRACE
        ;
cwhile_stmt ::= WHILE LPAREN cexp RPAREN LBRACE cstmts RBRACE
        ;

cdo_while_stmt ::= DO LBRACE cstmts RBRACE 
        WHILE LPAREN cexp RPAREN SEMICOLON
        ;

/************* functions / procedure / methods use******************/
cinvocation_stmt ::= 
        ;



/*---------------------------- EXPRESSIONS ------------------------------*/

cexp ::= cexp AND cexp
        | cexp OR cexp
        | NOT jexp
        | cbool_exp
        ;

cbool_exp ::= carit_exp:e1 EQUALS:o carit_exp:e2j
        | carit_exp:e1 DIFFERENT:o carit_exp:e2j
        | carit_exp:e1 GRATER:o carit_exp:e2j
        | carit_exp:e1 LESS:o carit_exp:e2j
        | carit_exp:e1 GRATER_EQUALS:o carit_exp:e2j
        | carit_exp:e1 LESS_EQUALS:o carit_exp:e2j
        | carit_exp:ej
        ;

carit_exp ::= carit_exp:e1 PLUS:o carit_exp:e2
        | carit_exp:e1 MINUS:o carit_exp:e2
        | carit_exp:e1 TIMES:o carit_exp:e2
        | carit_exp:e1 DIV:o carit_exp:e2
        | carit_exp:e1 MOD:o carit_exp:e2
        | carit_exp:e1 POWER:o carit_exp:e2
        | literals:e
        | ID:i carray_access
        | ID:i carray_access caccess
        | ID:i LPAREN cexp_list:l RPAREN
        | ID:i LPAREN RPAREN
        | ID:i LPAREN cexp_list:l RPAREN caccess
        | ID:i LPAREN RPAREN caccess
        | ID:i caccess
        | ID:i
        | THIS caccess
        | SUPER caccess
        %prec UMINUS
        | LPAREN cexp:e RPAREN
        %prec UMINUS
        | PLUS:o carit_exp:e
        %prec UMINUS
        | MINUS:o carit_exp:e
        ;