
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compi2.multi.compilator.analysis;

import java_cup.runtime.*;
import java.util.*;
import compi2.multi.compilator.analysis.symbolt.AccessMod;
import compi2.multi.compilator.analysis.typet.*;
import compi2.multi.compilator.analyzator.*;
import compi2.multi.compilator.semantic.*;
import compi2.multi.compilator.semantic.util.*;
import compi2.multi.compilator.semantic.pexp.*;
import compi2.multi.compilator.semantic.pobj.*;
import compi2.multi.compilator.semantic.past.*;
import compi2.multi.compilator.semantic.pmodule.*;
import compi2.multi.compilator.semantic.jexp.*;
import compi2.multi.compilator.semantic.jclases.*;
import compi2.multi.compilator.semantic.jclases.components.*;
import compi2.multi.compilator.semantic.jast.*;
import compi2.multi.compilator.semantic.jast.inv.*;
import compi2.multi.compilator.semantic.jast.others.*;
import compi2.multi.compilator.util.Position;
import compi2.multi.compilator.util.Index;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0189\000\002\002\004\000\002\002\005\000\002\004" +
    "\004\000\002\005\004\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\012\005\000\002" +
    "\012\003\000\002\026\007\000\002\027\010\000\002\024" +
    "\005\000\002\024\003\000\002\015\004\000\002\015\002" +
    "\000\002\014\005\000\002\014\004\000\002\014\006\000" +
    "\002\014\004\000\002\014\005\000\002\016\005\000\002" +
    "\016\010\000\002\016\005\000\002\016\005\000\002\016" +
    "\010\000\002\017\005\000\002\017\006\000\002\017\005" +
    "\000\002\017\006\000\002\017\004\000\002\017\003\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\003\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\003\000\002\021\006\000\002\021\006\000\002\021\005" +
    "\000\002\021\003\000\002\021\005\000\002\021\004\000" +
    "\002\021\004\000\002\021\005\000\002\021\004\000\002" +
    "\021\004\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\055\004" +
    "\000\002\055\005\000\002\055\006\000\002\023\007\000" +
    "\002\023\007\000\002\023\007\000\002\023\007\000\002" +
    "\023\007\000\002\037\003\000\002\037\003\000\002\037" +
    "\005\000\002\054\004\000\002\054\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\005\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\045\014\000\002\056\007\000\002\056\006\000\002\025" +
    "\005\000\002\025\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\005\000\002\041\003\000\002\041\004\000" +
    "\002\041\003\000\002\041\004\000\002\042\010\000\002" +
    "\042\010\000\002\043\012\000\002\043\012\000\002\043" +
    "\012\000\002\044\006\000\002\036\004\000\002\036\003" +
    "\000\002\036\006\000\002\035\003\000\002\035\002\000" +
    "\002\033\003\000\002\033\004\000\002\033\003\000\002" +
    "\033\005\000\002\033\004\000\002\034\004\000\002\034" +
    "\003\000\002\034\004\000\002\034\005\000\002\034\004" +
    "\000\002\034\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\005\000\002\030\006\000\002\030\005\000\002" +
    "\030\010\000\002\030\003\000\002\030\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\010\003\000\002\010\002\000" +
    "\002\011\004\000\002\011\003\000\002\050\017\000\002" +
    "\006\003\000\002\006\002\000\002\007\004\000\002\007" +
    "\003\000\002\051\015\000\002\052\005\000\002\052\003" +
    "\000\002\052\002\000\002\053\006\000\002\053\005\000" +
    "\002\060\004\000\002\063\003\000\002\063\003\000\002" +
    "\063\003\000\002\100\004\000\002\100\004\000\002\100" +
    "\004\000\002\100\004\000\002\100\004\000\002\100\004" +
    "\000\002\100\003\000\002\100\003\000\002\100\003\000" +
    "\002\100\003\000\002\100\003\000\002\100\003\000\002" +
    "\101\004\000\002\101\003\000\002\057\004\000\002\121" +
    "\005\000\002\121\006\000\002\120\005\000\002\120\003" +
    "\000\002\114\003\000\002\114\003\000\002\114\003\000" +
    "\002\114\003\000\002\114\003\000\002\061\004\000\002" +
    "\061\002\000\002\062\011\000\002\064\004\000\002\064" +
    "\002\000\002\065\004\000\002\065\002\000\002\066\006" +
    "\000\002\066\006\000\002\066\012\000\002\067\003\000" +
    "\002\067\005\000\002\067\003\000\002\077\010\000\002" +
    "\070\003\000\002\070\002\000\002\071\005\000\002\071" +
    "\003\000\002\102\004\000\002\072\004\000\002\072\003" +
    "\000\002\073\003\000\002\073\004\000\002\073\004\000" +
    "\002\073\004\000\002\073\004\000\002\073\004\000\002" +
    "\073\004\000\002\075\003\000\002\075\003\000\002\075" +
    "\003\000\002\075\003\000\002\075\003\000\002\076\003" +
    "\000\002\076\003\000\002\076\004\000\002\122\006\000" +
    "\002\122\006\000\002\111\012\000\002\112\006\000\002" +
    "\112\004\000\002\112\002\000\002\103\011\000\002\104" +
    "\013\000\002\105\015\000\002\074\003\000\002\074\003" +
    "\000\002\074\003\000\002\074\002\000\002\106\011\000" +
    "\002\107\004\000\002\107\003\000\002\110\006\000\002" +
    "\110\005\000\002\113\005\000\002\113\005\000\002\113" +
    "\005\000\002\113\006\000\002\113\006\000\002\113\006" +
    "\000\002\113\006\000\002\113\006\000\002\113\006\000" +
    "\002\113\006\000\002\113\010\000\002\113\010\000\002" +
    "\113\010\000\002\113\011\000\002\113\011\000\002\113" +
    "\011\000\002\113\010\000\002\113\007\000\002\113\007" +
    "\000\002\125\006\000\002\125\004\000\002\126\004\000" +
    "\002\126\004\000\002\126\004\000\002\126\005\000\002" +
    "\126\006\000\002\126\006\000\002\126\007\000\002\126" +
    "\005\000\002\127\005\000\002\127\006\000\002\127\005" +
    "\000\002\127\006\000\002\123\005\000\002\123\004\000" +
    "\002\124\003\000\002\124\005\000\002\124\006\000\002" +
    "\124\006\000\002\124\007\000\002\124\004\000\002\117" +
    "\005\000\002\117\005\000\002\117\004\000\002\117\003" +
    "\000\002\116\005\000\002\116\005\000\002\116\005\000" +
    "\002\116\005\000\002\116\005\000\002\116\005\000\002" +
    "\116\003\000\002\115\005\000\002\115\005\000\002\115" +
    "\005\000\002\115\005\000\002\115\005\000\002\115\005" +
    "\000\002\115\003\000\002\115\004\000\002\115\005\000" +
    "\002\115\006\000\002\115\005\000\002\115\007\000\002" +
    "\115\006\000\002\115\004\000\002\115\003\000\002\115" +
    "\004\000\002\115\004\000\002\115\006\000\002\115\007" +
    "\000\002\115\005\000\002\115\004\000\002\115\004\000" +
    "\002\003\015\000\002\130\003\000\002\130\003\000\002" +
    "\130\003\000\002\130\003\000\002\130\003\000\002\131" +
    "\006\000\002\131\005\000\002\134\005\000\002\134\003" +
    "\000\002\135\005\000\002\135\003\000\002\136\006\000" +
    "\002\136\002\000\002\137\011\000\002\137\002\000\002" +
    "\140\004\000\002\140\002\000\002\141\005\000\002\141" +
    "\007\000\002\141\006\000\002\141\007\000\002\141\010" +
    "\000\002\142\005\000\002\142\003\000\002\143\005\000" +
    "\002\143\006\000\002\144\003\000\002\144\003\000\002" +
    "\144\003\000\002\145\004\000\002\145\004\000\002\146" +
    "\012\000\002\146\006\000\002\146\006\000\002\146\006" +
    "\000\002\147\003\000\002\147\003\000\002\147\003\000" +
    "\002\147\003\000\002\147\003\000\002\147\003\000\002" +
    "\150\012\000\002\151\004\000\002\151\006\000\002\152" +
    "\011\000\002\153\004\000\002\153\003\000\002\154\010" +
    "\000\002\154\007\000\002\155\015\000\002\156\011\000" +
    "\002\157\013\000\002\160\002\000\002\161\005\000\002" +
    "\161\005\000\002\161\004\000\002\161\003\000\002\162" +
    "\005\000\002\162\005\000\002\162\005\000\002\162\005" +
    "\000\002\162\005\000\002\162\005\000\002\162\003\000" +
    "\002\163\005\000\002\163\005\000\002\163\005\000\002" +
    "\163\005\000\002\163\005\000\002\163\005\000\002\163" +
    "\003\000\002\163\004\000\002\163\005\000\002\163\006" +
    "\000\002\163\005\000\002\163\007\000\002\163\006\000" +
    "\002\163\004\000\002\163\003\000\002\163\004\000\002" +
    "\163\004\000\002\163\005\000\002\163\004\000\002\163" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0343\000\004\031\006\001\002\000\004\002\u0345\001" +
    "\002\000\004\030\u013f\001\002\000\010\030\uff77\057\013" +
    "\102\uff77\001\002\000\010\030\uff75\057\uff75\102\uff75\001" +
    "\002\000\004\030\uffff\001\002\000\010\030\uff78\057\013" +
    "\102\uff78\001\002\000\006\030\uff72\102\u012e\001\002\000" +
    "\004\137\014\001\002\000\004\016\015\001\002\000\012" +
    "\014\uff6c\017\uff6c\125\017\137\016\001\002\000\010\003" +
    "\ufff5\013\ufff5\014\ufff5\001\002\000\004\137\016\001\002" +
    "\000\006\014\uff6d\017\uff6d\001\002\000\006\013\u0129\014" +
    "\u0107\001\002\000\006\014\023\017\024\001\002\000\006" +
    "\125\017\137\016\001\002\000\004\013\025\001\002\000" +
    "\020\003\031\036\035\041\030\055\032\065\033\115\034" +
    "\137\026\001\002\000\016\003\ufff8\012\ufff8\014\ufff8\017" +
    "\ufff8\035\ufff8\137\ufff8\001\002\000\004\012\036\001\002" +
    "\000\016\003\ufffa\012\ufffa\014\ufffa\017\ufffa\035\ufffa\137" +
    "\ufffa\001\002\000\016\003\ufff7\012\ufff7\014\ufff7\017\ufff7" +
    "\035\ufff7\137\ufff7\001\002\000\016\003\ufffc\012\ufffc\014" +
    "\ufffc\017\ufffc\035\ufffc\137\ufffc\001\002\000\016\003\ufffd" +
    "\012\ufffd\014\ufffd\017\ufffd\035\ufffd\137\ufffd\001\002\000" +
    "\016\003\ufff9\012\ufff9\014\ufff9\017\ufff9\035\ufff9\137\ufff9" +
    "\001\002\000\016\003\ufffb\012\ufffb\014\ufffb\017\ufffb\035" +
    "\ufffb\137\ufffb\001\002\000\006\035\uffef\125\037\001\002" +
    "\000\006\003\u0101\137\016\001\002\000\004\035\041\001" +
    "\002\000\026\003\056\037\054\040\057\045\044\052\uff91" +
    "\056\064\062\051\110\065\127\046\137\052\001\002\000" +
    "\034\003\uff7c\012\uff7c\037\uff7c\040\uff7c\045\uff7c\051\uff7c" +
    "\052\uff7c\056\uff7c\062\uff7c\110\uff7c\124\uff7c\127\uff7c\137" +
    "\uff7c\001\002\000\034\003\uff79\012\uff79\037\uff79\040\uff79" +
    "\045\uff79\051\uff79\052\uff79\056\uff79\062\uff79\110\uff79\124" +
    "\uff79\127\uff79\137\uff79\001\002\000\034\003\uff84\012\uff84" +
    "\037\uff84\040\uff84\045\uff84\051\uff84\052\uff84\056\uff84\062" +
    "\uff84\110\uff84\124\uff84\127\uff84\137\uff84\001\002\000\034" +
    "\003\uff7b\012\uff7b\037\uff7b\040\uff7b\045\uff7b\051\uff7b\052" +
    "\uff7b\056\uff7b\062\uff7b\110\uff7b\124\uff7b\127\uff7b\137\uff7b" +
    "\001\002\000\004\016\367\001\002\000\006\012\365\052" +
    "\uff90\001\002\000\004\052\uff92\001\002\000\006\003\346" +
    "\016\347\001\002\000\010\016\335\022\333\131\334\001" +
    "\002\000\026\003\056\037\054\040\057\045\044\052\uff8e" +
    "\056\064\062\051\110\065\127\046\137\052\001\002\000" +
    "\034\003\uff85\012\uff85\037\uff85\040\uff85\045\uff85\051\uff85" +
    "\052\uff85\056\uff85\062\uff85\110\uff85\124\uff85\127\uff85\137" +
    "\uff85\001\002\000\034\003\uff7f\012\uff7f\037\uff7f\040\uff7f" +
    "\045\uff7f\051\uff7f\052\uff7f\056\uff7f\062\uff7f\110\uff7f\124" +
    "\uff7f\127\uff7f\137\uff7f\001\002\000\034\003\uff7e\012\uff7e" +
    "\037\uff7e\040\uff7e\045\uff7e\051\uff7e\052\uff7e\056\uff7e\062" +
    "\uff7e\110\uff7e\124\uff7e\127\uff7e\137\uff7e\001\002\000\004" +
    "\016\266\001\002\000\034\003\uff7d\012\uff7d\037\uff7d\040" +
    "\uff7d\045\uff7d\051\uff7d\052\uff7d\056\uff7d\062\uff7d\110\uff7d" +
    "\124\uff7d\127\uff7d\137\uff7d\001\002\000\004\052\264\001" +
    "\002\000\026\003\056\035\241\037\054\040\057\045\044" +
    "\056\064\062\051\110\065\127\046\137\052\001\002\000" +
    "\034\003\uff7a\012\uff7a\037\uff7a\040\uff7a\045\uff7a\051\uff7a" +
    "\052\uff7a\056\uff7a\062\uff7a\110\uff7a\124\uff7a\127\uff7a\137" +
    "\uff7a\001\002\000\004\137\215\001\002\000\026\003\056" +
    "\035\067\037\054\040\057\045\044\056\064\062\051\110" +
    "\065\127\046\137\052\001\002\000\004\012\214\001\002" +
    "\000\026\003\056\037\054\040\057\045\044\052\uff91\056" +
    "\064\062\051\110\065\127\046\137\052\001\002\000\034" +
    "\003\uff94\012\uff94\037\uff94\040\uff94\045\uff94\051\uff94\052" +
    "\uff94\056\uff94\062\uff94\110\uff94\124\uff94\127\uff94\137\uff94" +
    "\001\002\000\004\124\072\001\002\000\030\003\104\004" +
    "\100\005\073\016\111\071\110\114\106\137\103\140\101" +
    "\141\076\142\074\143\107\001\002\000\026\003\210\004" +
    "\100\005\073\016\111\114\106\137\103\140\101\141\076" +
    "\142\074\143\107\001\002\000\110\003\uffc0\004\uffc0\005" +
    "\uffc0\006\uffc0\007\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0" +
    "\015\uffc0\017\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027" +
    "\uffc0\033\uffc0\035\uffc0\037\uffc0\040\uffc0\045\uffc0\047\uffc0" +
    "\051\uffc0\052\uffc0\053\uffc0\056\uffc0\062\uffc0\074\uffc0\110" +
    "\uffc0\122\uffc0\124\uffc0\127\uffc0\132\uffc0\134\uffc0\137\uffc0" +
    "\001\002\000\110\003\uffcb\004\uffcb\005\uffcb\006\uffcb\007" +
    "\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\017\uffcb" +
    "\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\033\uffcb\035" +
    "\uffcb\037\uffcb\040\uffcb\045\uffcb\047\uffcb\051\uffcb\052\uffcb" +
    "\053\uffcb\056\uffcb\062\uffcb\074\uffcb\110\uffcb\122\uffcb\124" +
    "\uffcb\127\uffcb\132\uffcb\134\uffcb\137\uffcb\001\002\000\110" +
    "\003\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\011\uffbf\012" +
    "\uffbf\013\uffbf\014\uffbf\015\uffbf\017\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\027\uffbf\033\uffbf\035\uffbf\037\uffbf\040" +
    "\uffbf\045\uffbf\047\uffbf\051\uffbf\052\uffbf\053\uffbf\056\uffbf" +
    "\062\uffbf\074\uffbf\110\uffbf\122\uffbf\124\uffbf\127\uffbf\132" +
    "\uffbf\134\uffbf\137\uffbf\001\002\000\110\003\uffd8\004\156" +
    "\005\160\006\162\007\161\011\157\012\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\017\uffd8\023\uffd8\024\174\025\176\026\173" +
    "\027\200\033\uffd8\035\uffd8\037\uffd8\040\uffd8\045\uffd8\047" +
    "\uffd8\051\uffd8\052\uffd8\053\177\056\uffd8\062\uffd8\074\uffd8" +
    "\110\uffd8\122\uffd8\124\uffd8\127\uffd8\132\175\134\155\137" +
    "\uffd8\001\002\000\026\003\172\004\100\005\073\016\111" +
    "\114\106\137\103\140\101\141\076\142\074\143\107\001" +
    "\002\000\110\003\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd" +
    "\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\017\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\033\uffbd\035\uffbd" +
    "\037\uffbd\040\uffbd\045\uffbd\047\uffbd\051\uffbd\052\uffbd\053" +
    "\uffbd\056\uffbd\062\uffbd\074\uffbd\110\uffbd\122\uffbd\124\uffbd" +
    "\127\uffbd\132\uffbd\134\uffbd\137\uffbd\001\002\000\040\003" +
    "\uff96\012\uff96\033\132\037\uff96\040\uff96\045\uff96\051\uff96" +
    "\052\uff96\056\uff96\062\uff96\074\133\110\uff96\124\uff96\127" +
    "\uff96\137\uff96\001\002\000\114\003\uffc7\004\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015" +
    "\uffc7\016\144\017\uffc7\022\143\023\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\033\uffc7\035\uffc7\037\uffc7\040\uffc7\045" +
    "\uffc7\047\uffc7\051\uffc7\052\uffc7\053\uffc7\056\uffc7\062\uffc7" +
    "\074\uffc7\110\uffc7\122\uffc7\124\uffc7\127\uffc7\132\uffc7\134" +
    "\uffc7\137\uffc7\001\002\000\016\004\116\005\120\006\122" +
    "\007\121\134\114\136\117\001\002\000\060\003\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\017\uffdf\023\uffdf\033\uffdf" +
    "\035\uffdf\037\uffdf\040\uffdf\045\uffdf\047\uffdf\051\uffdf\052" +
    "\uffdf\056\uffdf\062\uffdf\074\uffdf\110\uffdf\122\uffdf\124\uffdf" +
    "\127\uffdf\137\uffdf\001\002\000\110\003\uffbc\004\uffbc\005" +
    "\uffbc\006\uffbc\007\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc" +
    "\015\uffbc\017\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027" +
    "\uffbc\033\uffbc\035\uffbc\037\uffbc\040\uffbc\045\uffbc\047\uffbc" +
    "\051\uffbc\052\uffbc\053\uffbc\056\uffbc\062\uffbc\074\uffbc\110" +
    "\uffbc\122\uffbc\124\uffbc\127\uffbc\132\uffbc\134\uffbc\137\uffbc" +
    "\001\002\000\110\003\uffbe\004\uffbe\005\uffbe\006\uffbe\007" +
    "\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\017\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\033\uffbe\035" +
    "\uffbe\037\uffbe\040\uffbe\045\uffbe\047\uffbe\051\uffbe\052\uffbe" +
    "\053\uffbe\056\uffbe\062\uffbe\074\uffbe\110\uffbe\122\uffbe\124" +
    "\uffbe\127\uffbe\132\uffbe\134\uffbe\137\uffbe\001\002\000\030" +
    "\003\104\004\100\005\073\016\111\071\110\114\106\137" +
    "\103\140\101\141\076\142\074\143\107\001\002\000\030" +
    "\003\113\004\100\005\073\016\111\071\110\114\106\137" +
    "\103\140\101\141\076\142\074\143\107\001\002\000\010" +
    "\017\131\033\132\074\133\001\002\000\020\004\116\005" +
    "\120\006\122\007\121\017\115\134\114\136\117\001\002" +
    "\000\004\003\130\001\002\000\110\003\uffc3\004\uffc3\005" +
    "\uffc3\006\uffc3\007\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3" +
    "\015\uffc3\017\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\033\uffc3\035\uffc3\037\uffc3\040\uffc3\045\uffc3\047\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\056\uffc3\062\uffc3\074\uffc3\110" +
    "\uffc3\122\uffc3\124\uffc3\127\uffc3\132\uffc3\134\uffc3\137\uffc3" +
    "\001\002\000\004\003\127\001\002\000\004\003\126\001" +
    "\002\000\004\003\125\001\002\000\004\003\124\001\002" +
    "\000\004\003\123\001\002\000\110\003\uffd5\004\uffd5\005" +
    "\uffd5\006\uffd5\007\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\017\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027" +
    "\uffd5\033\uffd5\035\uffd5\037\uffd5\040\uffd5\045\uffd5\047\uffd5" +
    "\051\uffd5\052\uffd5\053\uffd5\056\uffd5\062\uffd5\074\uffd5\110" +
    "\uffd5\122\uffd5\124\uffd5\127\uffd5\132\uffd5\134\uffd5\137\uffd5" +
    "\001\002\000\110\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\017\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\033\uffd4\035" +
    "\uffd4\037\uffd4\040\uffd4\045\uffd4\047\uffd4\051\uffd4\052\uffd4" +
    "\053\uffd4\056\uffd4\062\uffd4\074\uffd4\110\uffd4\122\uffd4\124" +
    "\uffd4\127\uffd4\132\uffd4\134\uffd4\137\uffd4\001\002\000\110" +
    "\003\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\017\uffd6\023\uffd6\024\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\033\uffd6\035\uffd6\037\uffd6\040" +
    "\uffd6\045\uffd6\047\uffd6\051\uffd6\052\uffd6\053\uffd6\056\uffd6" +
    "\062\uffd6\074\uffd6\110\uffd6\122\uffd6\124\uffd6\127\uffd6\132" +
    "\uffd6\134\uffd6\137\uffd6\001\002\000\110\003\uffd3\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\011\uffd3\012\uffd3\013\uffd3\014" +
    "\uffd3\015\uffd3\017\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\027\uffd3\033\uffd3\035\uffd3\037\uffd3\040\uffd3\045\uffd3\047" +
    "\uffd3\051\uffd3\052\uffd3\053\uffd3\056\uffd3\062\uffd3\074\uffd3" +
    "\110\uffd3\122\uffd3\124\uffd3\127\uffd3\132\uffd3\134\uffd3\137" +
    "\uffd3\001\002\000\110\003\uffd7\004\uffd7\005\uffd7\006\uffd7" +
    "\007\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\017" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\033\uffd7" +
    "\035\uffd7\037\uffd7\040\uffd7\045\uffd7\047\uffd7\051\uffd7\052" +
    "\uffd7\053\uffd7\056\uffd7\062\uffd7\074\uffd7\110\uffd7\122\uffd7" +
    "\124\uffd7\127\uffd7\132\uffd7\134\uffd7\137\uffd7\001\002\000" +
    "\110\003\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\014\uffd2\015\uffd2\017\uffd2\023\uffd2\024" +
    "\uffd2\025\uffd2\026\uffd2\027\uffd2\033\uffd2\035\uffd2\037\uffd2" +
    "\040\uffd2\045\uffd2\047\uffd2\051\uffd2\052\uffd2\053\uffd2\056" +
    "\uffd2\062\uffd2\074\uffd2\110\uffd2\122\uffd2\124\uffd2\127\uffd2" +
    "\132\uffd2\134\uffd2\137\uffd2\001\002\000\110\003\uffc6\004" +
    "\uffc6\005\uffc6\006\uffc6\007\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\017\uffc6\023\uffc6\024\uffc6\025\uffc6\026" +
    "\uffc6\027\uffc6\033\uffc6\035\uffc6\037\uffc6\040\uffc6\045\uffc6" +
    "\047\uffc6\051\uffc6\052\uffc6\053\uffc6\056\uffc6\062\uffc6\074" +
    "\uffc6\110\uffc6\122\uffc6\124\uffc6\127\uffc6\132\uffc6\134\uffc6" +
    "\137\uffc6\001\002\000\032\003\104\004\100\005\073\016" +
    "\111\071\110\114\106\120\137\137\103\140\101\141\076" +
    "\142\074\143\107\001\002\000\032\003\104\004\100\005" +
    "\073\016\111\051\135\071\110\114\106\137\103\140\101" +
    "\141\076\142\074\143\107\001\002\000\060\003\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\017\uffe2\023\uffe2\033\132" +
    "\035\uffe2\037\uffe2\040\uffe2\045\uffe2\047\uffe2\051\uffe2\052" +
    "\uffe2\056\uffe2\062\uffe2\074\uffe2\110\uffe2\122\uffe2\124\uffe2" +
    "\127\uffe2\137\uffe2\001\002\000\030\003\104\004\100\005" +
    "\073\016\111\071\110\114\106\137\103\140\101\141\076" +
    "\142\074\143\107\001\002\000\060\003\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\017\uffe1\023\uffe1\033\uffe1\035\uffe1" +
    "\037\uffe1\040\uffe1\045\uffe1\047\uffe1\051\uffe1\052\uffe1\056" +
    "\uffe1\062\uffe1\074\uffe1\110\uffe1\122\uffe1\124\uffe1\127\uffe1" +
    "\137\uffe1\001\002\000\030\003\104\004\100\005\073\016" +
    "\111\071\110\114\106\137\103\140\101\141\076\142\074" +
    "\143\107\001\002\000\060\003\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\017\uffe4\023\uffe4\033\uffe4\035\uffe4\037\uffe4" +
    "\040\uffe4\045\uffe4\047\uffe4\051\uffe4\052\uffe4\056\uffe4\062" +
    "\uffe4\074\uffe4\110\uffe4\122\uffe4\124\uffe4\127\uffe4\137\uffe4" +
    "\001\002\000\060\003\uffe3\012\uffe3\013\uffe3\014\uffe3\015" +
    "\uffe3\017\uffe3\023\uffe3\033\132\035\uffe3\037\uffe3\040\uffe3" +
    "\045\uffe3\047\uffe3\051\uffe3\052\uffe3\056\uffe3\062\uffe3\074" +
    "\133\110\uffe3\122\uffe3\124\uffe3\127\uffe3\137\uffe3\001\002" +
    "\000\060\003\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\017" +
    "\uffe0\023\uffe0\033\uffe0\035\uffe0\037\uffe0\040\uffe0\045\uffe0" +
    "\047\uffe0\051\uffe0\052\uffe0\056\uffe0\062\uffe0\074\uffe0\110" +
    "\uffe0\122\uffe0\124\uffe0\127\uffe0\137\uffe0\001\002\000\026" +
    "\003\104\004\100\005\073\016\111\114\106\137\103\140" +
    "\101\141\076\142\074\143\107\001\002\000\032\003\104" +
    "\004\100\005\073\016\111\017\146\071\110\114\106\137" +
    "\103\140\101\141\076\142\074\143\107\001\002\000\012" +
    "\014\ufff1\017\ufff1\033\132\074\133\001\002\000\110\003" +
    "\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\011\uffc8\012\uffc8" +
    "\013\uffc8\014\uffc8\015\uffc8\017\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\026\uffc8\027\uffc8\033\uffc8\035\uffc8\037\uffc8\040\uffc8" +
    "\045\uffc8\047\uffc8\051\uffc8\052\uffc8\053\uffc8\056\uffc8\062" +
    "\uffc8\074\uffc8\110\uffc8\122\uffc8\124\uffc8\127\uffc8\132\uffc8" +
    "\134\uffc8\137\uffc8\001\002\000\006\014\150\017\151\001" +
    "\002\000\030\003\104\004\100\005\073\016\111\071\110" +
    "\114\106\137\103\140\101\141\076\142\074\143\107\001" +
    "\002\000\110\003\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9" +
    "\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\017\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\033\uffc9\035\uffc9" +
    "\037\uffc9\040\uffc9\045\uffc9\047\uffc9\051\uffc9\052\uffc9\053" +
    "\uffc9\056\uffc9\062\uffc9\074\uffc9\110\uffc9\122\uffc9\124\uffc9" +
    "\127\uffc9\132\uffc9\134\uffc9\137\uffc9\001\002\000\012\014" +
    "\ufff2\017\ufff2\033\132\074\133\001\002\000\020\004\156" +
    "\005\160\006\162\007\161\011\157\023\154\134\155\001" +
    "\002\000\110\003\uffca\004\uffca\005\uffca\006\uffca\007\uffca" +
    "\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\017\uffca\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\027\uffca\033\uffca\035\uffca" +
    "\037\uffca\040\uffca\045\uffca\047\uffca\051\uffca\052\uffca\053" +
    "\uffca\056\uffca\062\uffca\074\uffca\110\uffca\122\uffca\124\uffca" +
    "\127\uffca\132\uffca\134\uffca\137\uffca\001\002\000\026\003" +
    "\104\004\100\005\073\016\111\114\106\137\103\140\101" +
    "\141\076\142\074\143\107\001\002\000\026\003\104\004" +
    "\100\005\073\016\111\114\106\137\103\140\101\141\076" +
    "\142\074\143\107\001\002\000\026\003\104\004\100\005" +
    "\073\016\111\114\106\137\103\140\101\141\076\142\074" +
    "\143\107\001\002\000\026\003\104\004\100\005\073\016" +
    "\111\114\106\137\103\140\101\141\076\142\074\143\107" +
    "\001\002\000\026\003\104\004\100\005\073\016\111\114" +
    "\106\137\103\140\101\141\076\142\074\143\107\001\002" +
    "\000\026\003\104\004\100\005\073\016\111\114\106\137" +
    "\103\140\101\141\076\142\074\143\107\001\002\000\110" +
    "\003\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011\157\012" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\017\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\026\uffcf\027\uffcf\033\uffcf\035\uffcf\037\uffcf\040" +
    "\uffcf\045\uffcf\047\uffcf\051\uffcf\052\uffcf\053\uffcf\056\uffcf" +
    "\062\uffcf\074\uffcf\110\uffcf\122\uffcf\124\uffcf\127\uffcf\132" +
    "\uffcf\134\uffcf\137\uffcf\001\002\000\110\003\uffce\004\uffce" +
    "\005\uffce\006\uffce\007\uffce\011\157\012\uffce\013\uffce\014" +
    "\uffce\015\uffce\017\uffce\023\uffce\024\uffce\025\uffce\026\uffce" +
    "\027\uffce\033\uffce\035\uffce\037\uffce\040\uffce\045\uffce\047" +
    "\uffce\051\uffce\052\uffce\053\uffce\056\uffce\062\uffce\074\uffce" +
    "\110\uffce\122\uffce\124\uffce\127\uffce\132\uffce\134\uffce\137" +
    "\uffce\001\002\000\110\003\uffd0\004\uffd0\005\uffd0\006\162" +
    "\007\161\011\157\012\uffd0\013\uffd0\014\uffd0\015\uffd0\017" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\033\uffd0" +
    "\035\uffd0\037\uffd0\040\uffd0\045\uffd0\047\uffd0\051\uffd0\052" +
    "\uffd0\053\uffd0\056\uffd0\062\uffd0\074\uffd0\110\uffd0\122\uffd0" +
    "\124\uffd0\127\uffd0\132\uffd0\134\155\137\uffd0\001\002\000" +
    "\110\003\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\011\uffcc" +
    "\012\uffcc\013\uffcc\014\uffcc\015\uffcc\017\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\033\uffcc\035\uffcc\037\uffcc" +
    "\040\uffcc\045\uffcc\047\uffcc\051\uffcc\052\uffcc\053\uffcc\056" +
    "\uffcc\062\uffcc\074\uffcc\110\uffcc\122\uffcc\124\uffcc\127\uffcc" +
    "\132\uffcc\134\uffcc\137\uffcc\001\002\000\110\003\uffd1\004" +
    "\uffd1\005\uffd1\006\162\007\161\011\157\012\uffd1\013\uffd1" +
    "\014\uffd1\015\uffd1\017\uffd1\023\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\027\uffd1\033\uffd1\035\uffd1\037\uffd1\040\uffd1\045\uffd1" +
    "\047\uffd1\051\uffd1\052\uffd1\053\uffd1\056\uffd1\062\uffd1\074" +
    "\uffd1\110\uffd1\122\uffd1\124\uffd1\127\uffd1\132\uffd1\134\155" +
    "\137\uffd1\001\002\000\110\003\uffcd\004\uffcd\005\uffcd\006" +
    "\uffcd\007\uffcd\011\157\012\uffcd\013\uffcd\014\uffcd\015\uffcd" +
    "\017\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\033" +
    "\uffcd\035\uffcd\037\uffcd\040\uffcd\045\uffcd\047\uffcd\051\uffcd" +
    "\052\uffcd\053\uffcd\056\uffcd\062\uffcd\074\uffcd\110\uffcd\122" +
    "\uffcd\124\uffcd\127\uffcd\132\uffcd\134\uffcd\137\uffcd\001\002" +
    "\000\110\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\011" +
    "\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\027\uffc5\033\uffc5\035\uffc5\037" +
    "\uffc5\040\uffc5\045\uffc5\047\uffc5\051\uffc5\052\uffc5\053\uffc5" +
    "\056\uffc5\062\uffc5\074\uffc5\110\uffc5\122\uffc5\124\uffc5\127" +
    "\uffc5\132\uffc5\134\uffc5\137\uffc5\001\002\000\112\003\uffc1" +
    "\004\116\005\120\006\122\007\121\011\uffc1\012\uffc1\013" +
    "\uffc1\014\uffc1\015\uffc1\017\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\027\uffc1\033\uffc1\035\uffc1\037\uffc1\040\uffc1\045" +
    "\uffc1\047\uffc1\051\uffc1\052\uffc1\053\uffc1\056\uffc1\062\uffc1" +
    "\074\uffc1\110\uffc1\122\uffc1\124\uffc1\127\uffc1\132\uffc1\134" +
    "\114\136\117\137\uffc1\001\002\000\026\003\104\004\100" +
    "\005\073\016\111\114\106\137\103\140\101\141\076\142" +
    "\074\143\107\001\002\000\026\003\104\004\100\005\073" +
    "\016\111\114\106\137\103\140\101\141\076\142\074\143" +
    "\107\001\002\000\026\003\104\004\100\005\073\016\111" +
    "\114\106\137\103\140\101\141\076\142\074\143\107\001" +
    "\002\000\026\003\104\004\100\005\073\016\111\114\106" +
    "\137\103\140\101\141\076\142\074\143\107\001\002\000" +
    "\026\003\104\004\100\005\073\016\111\114\106\137\103" +
    "\140\101\141\076\142\074\143\107\001\002\000\026\003" +
    "\104\004\100\005\073\016\111\114\106\137\103\140\101" +
    "\141\076\142\074\143\107\001\002\000\074\003\uffd9\004" +
    "\156\005\160\006\162\007\161\011\157\012\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\017\uffd9\023\uffd9\033\uffd9\035\uffd9\037" +
    "\uffd9\040\uffd9\045\uffd9\047\uffd9\051\uffd9\052\uffd9\056\uffd9" +
    "\062\uffd9\074\uffd9\110\uffd9\122\uffd9\124\uffd9\127\uffd9\134" +
    "\155\137\uffd9\001\002\000\074\003\uffde\004\156\005\160" +
    "\006\162\007\161\011\157\012\uffde\013\uffde\014\uffde\015" +
    "\uffde\017\uffde\023\uffde\033\uffde\035\uffde\037\uffde\040\uffde" +
    "\045\uffde\047\uffde\051\uffde\052\uffde\056\uffde\062\uffde\074" +
    "\uffde\110\uffde\122\uffde\124\uffde\127\uffde\134\155\137\uffde" +
    "\001\002\000\074\003\uffdb\004\156\005\160\006\162\007" +
    "\161\011\157\012\uffdb\013\uffdb\014\uffdb\015\uffdb\017\uffdb" +
    "\023\uffdb\033\uffdb\035\uffdb\037\uffdb\040\uffdb\045\uffdb\047" +
    "\uffdb\051\uffdb\052\uffdb\056\uffdb\062\uffdb\074\uffdb\110\uffdb" +
    "\122\uffdb\124\uffdb\127\uffdb\134\155\137\uffdb\001\002\000" +
    "\074\003\uffdd\004\156\005\160\006\162\007\161\011\157" +
    "\012\uffdd\013\uffdd\014\uffdd\015\uffdd\017\uffdd\023\uffdd\033" +
    "\uffdd\035\uffdd\037\uffdd\040\uffdd\045\uffdd\047\uffdd\051\uffdd" +
    "\052\uffdd\056\uffdd\062\uffdd\074\uffdd\110\uffdd\122\uffdd\124" +
    "\uffdd\127\uffdd\134\155\137\uffdd\001\002\000\074\003\uffdc" +
    "\004\156\005\160\006\162\007\161\011\157\012\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\017\uffdc\023\uffdc\033\uffdc\035\uffdc" +
    "\037\uffdc\040\uffdc\045\uffdc\047\uffdc\051\uffdc\052\uffdc\056" +
    "\uffdc\062\uffdc\074\uffdc\110\uffdc\122\uffdc\124\uffdc\127\uffdc" +
    "\134\155\137\uffdc\001\002\000\074\003\uffda\004\156\005" +
    "\160\006\162\007\161\011\157\012\uffda\013\uffda\014\uffda" +
    "\015\uffda\017\uffda\023\uffda\033\uffda\035\uffda\037\uffda\040" +
    "\uffda\045\uffda\047\uffda\051\uffda\052\uffda\056\uffda\062\uffda" +
    "\074\uffda\110\uffda\122\uffda\124\uffda\127\uffda\134\155\137" +
    "\uffda\001\002\000\110\003\uffc4\004\uffc4\005\uffc4\006\uffc4" +
    "\007\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\017" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\033\uffc4" +
    "\035\uffc4\037\uffc4\040\uffc4\045\uffc4\047\uffc4\051\uffc4\052" +
    "\uffc4\053\uffc4\056\uffc4\062\uffc4\074\uffc4\110\uffc4\122\uffc4" +
    "\124\uffc4\127\uffc4\132\uffc4\134\uffc4\137\uffc4\001\002\000" +
    "\112\003\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\011\uffc2" +
    "\012\uffc2\013\uffc2\014\uffc2\015\uffc2\017\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\033\uffc2\035\uffc2\037\uffc2" +
    "\040\uffc2\045\uffc2\047\uffc2\051\uffc2\052\uffc2\053\uffc2\056" +
    "\uffc2\062\uffc2\074\uffc2\110\uffc2\122\uffc2\124\uffc2\127\uffc2" +
    "\132\uffc2\134\uffc2\136\117\137\uffc2\001\002\000\004\052" +
    "\212\001\002\000\004\012\213\001\002\000\034\003\uff93" +
    "\012\uff93\037\uff93\040\uff93\045\uff93\051\uff93\052\uff93\056" +
    "\uff93\062\uff93\110\uff93\124\uff93\127\uff93\137\uff93\001\002" +
    "\000\034\003\uff95\012\uff95\037\uff95\040\uff95\045\uff95\051" +
    "\uff95\052\uff95\056\uff95\062\uff95\110\uff95\124\uff95\127\uff95" +
    "\137\uff95\001\002\000\006\003\216\131\217\001\002\000" +
    "\030\003\104\004\100\005\073\016\111\071\110\114\106" +
    "\137\103\140\101\141\076\142\074\143\107\001\002\000" +
    "\030\003\221\004\100\005\073\016\111\071\110\114\106" +
    "\137\103\140\101\141\076\142\074\143\107\001\002\000" +
    "\010\033\132\074\133\122\226\001\002\000\020\004\116" +
    "\005\120\006\122\007\121\122\222\134\114\136\117\001" +
    "\002\000\030\003\104\004\100\005\073\016\111\071\110" +
    "\114\106\137\103\140\101\141\076\142\074\143\107\001" +
    "\002\000\010\033\132\047\224\074\133\001\002\000\026" +
    "\003\056\035\067\037\054\040\057\045\044\056\064\062" +
    "\051\110\065\127\046\137\052\001\002\000\034\003\uff98" +
    "\012\uff98\037\uff98\040\uff98\045\uff98\051\uff98\052\uff98\056" +
    "\uff98\062\uff98\110\uff98\124\uff98\127\uff98\137\uff98\001\002" +
    "\000\030\003\104\004\100\005\073\016\111\071\110\114" +
    "\106\137\103\140\101\141\076\142\074\143\107\001\002" +
    "\000\010\033\132\047\230\074\133\001\002\000\026\003" +
    "\056\035\067\037\054\040\057\045\044\056\064\062\051" +
    "\110\065\127\046\137\052\001\002\000\034\003\uff99\012" +
    "\uff99\037\uff99\040\uff99\045\uff99\051\uff99\052\uff99\056\uff99" +
    "\062\uff99\110\uff99\124\uff99\127\uff99\137\uff99\001\002\000" +
    "\010\033\132\074\133\122\233\001\002\000\030\003\104" +
    "\004\100\005\073\016\111\071\110\114\106\137\103\140" +
    "\101\141\076\142\074\143\107\001\002\000\010\033\132" +
    "\047\235\074\133\001\002\000\026\003\056\035\067\037" +
    "\054\040\057\045\044\056\064\062\051\110\065\127\046" +
    "\137\052\001\002\000\034\003\uff97\012\uff97\037\uff97\040" +
    "\uff97\045\uff97\051\uff97\052\uff97\056\uff97\062\uff97\110\uff97" +
    "\124\uff97\127\uff97\137\uff97\001\002\000\034\003\uffb3\012" +
    "\uffb3\037\uffb3\040\uffb3\045\uffb3\051\uffb3\052\uffb3\056\uffb3" +
    "\062\uffb3\110\uffb3\124\uffb3\127\uffb3\137\uffb3\001\002\000" +
    "\034\003\uffbb\012\245\037\uffbb\040\uffbb\045\uffbb\051\246" +
    "\052\uffbb\056\uffbb\062\uffbb\110\uffbb\124\uffbb\127\uffbb\137" +
    "\uffbb\001\002\000\026\003\056\037\054\040\057\045\044" +
    "\052\uff91\056\064\062\051\110\065\127\046\137\052\001" +
    "\002\000\034\003\uffb2\012\uffb2\037\uffb2\040\uffb2\045\uffb2" +
    "\051\uffb2\052\uffb2\056\uffb2\062\uffb2\110\uffb2\124\uffb2\127" +
    "\uffb2\137\uffb2\001\002\000\004\052\244\001\002\000\034" +
    "\003\uffb1\012\uffb1\037\uffb1\040\uffb1\045\uffb1\051\uffb1\052" +
    "\uffb1\056\uffb1\062\uffb1\110\uffb1\124\uffb1\127\uffb1\137\uffb1" +
    "\001\002\000\034\003\uffba\012\uffba\037\uffba\040\uffba\045" +
    "\uffba\051\uffba\052\uffba\056\uffba\062\uffba\110\uffba\124\uffba" +
    "\127\uffba\137\uffba\001\002\000\026\003\056\035\256\037" +
    "\054\040\057\045\044\056\064\062\051\110\065\127\046" +
    "\137\052\001\002\000\004\012\uffa8\001\002\000\004\012" +
    "\uffab\001\002\000\004\012\uffaa\001\002\000\004\012\263" +
    "\001\002\000\004\012\uffad\001\002\000\034\003\uffb9\012" +
    "\uffb9\037\uffb9\040\uffb9\045\uffb9\051\uffb9\052\uffb9\056\uffb9" +
    "\062\uffb9\110\uffb9\124\uffb9\127\uffb9\137\uffb9\001\002\000" +
    "\004\012\uffae\001\002\000\026\003\056\037\054\040\057" +
    "\045\044\052\uff91\056\064\062\051\110\065\127\046\137" +
    "\052\001\002\000\034\003\uffaf\012\uffaf\037\uffaf\040\uffaf" +
    "\045\uffaf\051\uffaf\052\uffaf\056\uffaf\062\uffaf\110\uffaf\124" +
    "\uffaf\127\uffaf\137\uffaf\001\002\000\004\012\uffa9\001\002" +
    "\000\004\052\262\001\002\000\004\012\uffac\001\002\000" +
    "\034\003\uffb0\012\uffb0\037\uffb0\040\uffb0\045\uffb0\051\uffb0" +
    "\052\uffb0\056\uffb0\062\uffb0\110\uffb0\124\uffb0\127\uffb0\137" +
    "\uffb0\001\002\000\004\012\265\001\002\000\010\030\uff74" +
    "\057\uff74\102\uff74\001\002\000\030\003\104\004\100\005" +
    "\073\016\111\071\110\114\106\137\103\140\101\141\076" +
    "\142\074\143\107\001\002\000\010\017\270\033\132\074" +
    "\133\001\002\000\004\073\271\001\002\000\030\003\104" +
    "\004\100\005\073\016\111\071\110\114\106\137\103\140" +
    "\101\141\076\142\074\143\107\001\002\000\032\003\104" +
    "\004\100\005\073\016\111\051\310\071\110\114\106\137" +
    "\103\140\101\141\076\142\074\143\107\001\002\000\006" +
    "\013\276\014\275\001\002\000\012\013\uffa3\014\uffa3\033" +
    "\132\074\133\001\002\000\030\003\104\004\100\005\073" +
    "\016\111\071\110\114\106\137\103\140\101\141\076\142" +
    "\074\143\107\001\002\000\026\003\056\035\301\037\054" +
    "\040\057\045\044\056\064\062\051\110\065\127\046\137" +
    "\052\001\002\000\004\012\305\001\002\000\004\012\uffa2" +
    "\001\002\000\026\003\056\037\054\040\057\045\044\052" +
    "\uff91\056\064\062\051\110\065\127\046\137\052\001\002" +
    "\000\004\012\uffa1\001\002\000\004\052\304\001\002\000" +
    "\004\012\uffa0\001\002\000\032\003\uffa5\004\uffa5\005\uffa5" +
    "\016\uffa5\051\uffa5\071\uffa5\114\uffa5\137\uffa5\140\uffa5\141" +
    "\uffa5\142\uffa5\143\uffa5\001\002\000\012\013\uffa4\014\uffa4" +
    "\033\132\074\133\001\002\000\006\013\321\014\275\001" +
    "\002\000\026\003\056\035\312\037\054\040\057\045\044" +
    "\056\064\062\051\110\065\127\046\137\052\001\002\000" +
    "\006\012\320\052\uff9f\001\002\000\026\003\056\037\054" +
    "\040\057\045\044\052\uff91\056\064\062\051\110\065\127" +
    "\046\137\052\001\002\000\004\052\uff9d\001\002\000\004" +
    "\052\315\001\002\000\004\012\316\001\002\000\034\003" +
    "\uffa7\012\uffa7\037\uffa7\040\uffa7\045\uffa7\051\uffa7\052\uffa7" +
    "\056\uffa7\062\uffa7\110\uffa7\124\uffa7\127\uffa7\137\uffa7\001" +
    "\002\000\004\052\uff9c\001\002\000\004\052\uff9e\001\002" +
    "\000\026\003\056\035\301\037\054\040\057\045\044\056" +
    "\064\062\051\110\065\127\046\137\052\001\002\000\004" +
    "\012\323\001\002\000\032\003\uffa6\004\uffa6\005\uffa6\016" +
    "\uffa6\051\uffa6\071\uffa6\114\uffa6\137\uffa6\140\uffa6\141\uffa6" +
    "\142\uffa6\143\uffa6\001\002\000\010\003\331\012\330\052" +
    "\uff8a\001\002\000\026\003\056\037\054\040\057\045\044" +
    "\052\uff86\056\064\062\051\110\065\127\046\137\052\001" +
    "\002\000\004\052\uff8c\001\002\000\004\052\uff87\001\002" +
    "\000\026\003\056\037\054\040\057\045\044\052\uff89\056" +
    "\064\062\051\110\065\127\046\137\052\001\002\000\004" +
    "\052\uff8b\001\002\000\004\052\uff88\001\002\000\030\003" +
    "\104\004\100\005\073\016\111\071\110\114\106\137\103" +
    "\140\101\141\076\142\074\143\107\001\002\000\030\003" +
    "\104\004\100\005\073\016\111\071\110\114\106\137\103" +
    "\140\101\141\076\142\074\143\107\001\002\000\032\003" +
    "\104\004\100\005\073\016\111\017\336\071\110\114\106" +
    "\137\103\140\101\141\076\142\074\143\107\001\002\000" +
    "\034\003\uff81\012\uff81\037\uff81\040\uff81\045\uff81\051\uff81" +
    "\052\uff81\056\uff81\062\uff81\110\uff81\124\uff81\127\uff81\137" +
    "\uff81\001\002\000\006\014\150\017\340\001\002\000\034" +
    "\003\uff82\012\uff82\037\uff82\040\uff82\045\uff82\051\uff82\052" +
    "\uff82\056\uff82\062\uff82\110\uff82\124\uff82\127\uff82\137\uff82" +
    "\001\002\000\040\003\uff83\012\uff83\033\132\037\uff83\040" +
    "\uff83\045\uff83\051\uff83\052\uff83\056\uff83\062\uff83\074\133" +
    "\110\uff83\124\uff83\127\uff83\137\uff83\001\002\000\010\023" +
    "\343\033\132\074\133\001\002\000\004\131\344\001\002" +
    "\000\030\003\104\004\100\005\073\016\111\071\110\114" +
    "\106\137\103\140\101\141\076\142\074\143\107\001\002" +
    "\000\040\003\uff80\012\uff80\033\132\037\uff80\040\uff80\045" +
    "\uff80\051\uff80\052\uff80\056\uff80\062\uff80\074\133\110\uff80" +
    "\124\uff80\127\uff80\137\uff80\001\002\000\030\003\104\004" +
    "\100\005\073\016\111\071\110\114\106\137\103\140\101" +
    "\141\076\142\074\143\107\001\002\000\030\003\351\004" +
    "\100\005\073\016\111\071\110\114\106\137\103\140\101" +
    "\141\076\142\074\143\107\001\002\000\012\003\355\017" +
    "\354\033\132\074\133\001\002\000\020\004\116\005\120" +
    "\006\122\007\121\017\352\134\114\136\117\001\002\000" +
    "\004\120\353\001\002\000\026\003\uffb7\035\uffb7\037\uffb7" +
    "\040\uffb7\045\uffb7\056\uffb7\062\uffb7\110\uffb7\127\uffb7\137" +
    "\uffb7\001\002\000\004\120\357\001\002\000\004\120\356" +
    "\001\002\000\026\003\uffb6\035\uffb6\037\uffb6\040\uffb6\045" +
    "\uffb6\056\uffb6\062\uffb6\110\uffb6\127\uffb6\137\uffb6\001\002" +
    "\000\026\003\uffb8\035\uffb8\037\uffb8\040\uffb8\045\uffb8\056" +
    "\uffb8\062\uffb8\110\uffb8\127\uffb8\137\uffb8\001\002\000\012" +
    "\003\362\017\361\033\132\074\133\001\002\000\004\120" +
    "\364\001\002\000\004\120\363\001\002\000\026\003\uffb4" +
    "\035\uffb4\037\uffb4\040\uffb4\045\uffb4\056\uffb4\062\uffb4\110" +
    "\uffb4\127\uffb4\137\uffb4\001\002\000\026\003\uffb5\035\uffb5" +
    "\037\uffb5\040\uffb5\045\uffb5\056\uffb5\062\uffb5\110\uffb5\127" +
    "\uffb5\137\uffb5\001\002\000\026\003\056\037\054\040\057" +
    "\045\044\052\uff8f\056\064\062\051\110\065\127\046\137" +
    "\052\001\002\000\004\052\uff8d\001\002\000\030\003\371" +
    "\004\100\005\073\016\111\071\110\114\106\137\103\140" +
    "\101\141\076\142\074\143\107\001\002\000\010\017\375" +
    "\033\132\074\133\001\002\000\020\004\116\005\120\006" +
    "\122\007\121\017\372\134\114\136\117\001\002\000\004" +
    "\047\373\001\002\000\026\003\056\035\067\037\054\040" +
    "\057\045\044\056\064\062\051\110\065\127\046\137\052" +
    "\001\002\000\034\003\uff9a\012\uff9a\037\uff9a\040\uff9a\045" +
    "\uff9a\051\uff9a\052\uff9a\056\uff9a\062\uff9a\110\uff9a\124\uff9a" +
    "\127\uff9a\137\uff9a\001\002\000\004\047\376\001\002\000" +
    "\026\003\056\035\067\037\054\040\057\045\044\056\064" +
    "\062\051\110\065\127\046\137\052\001\002\000\034\003" +
    "\uff9b\012\uff9b\037\uff9b\040\uff9b\045\uff9b\051\uff9b\052\uff9b" +
    "\056\uff9b\062\uff9b\110\uff9b\124\uff9b\127\uff9b\137\uff9b\001" +
    "\002\000\006\035\ufff0\137\016\001\002\000\004\137\016" +
    "\001\002\000\010\003\u0108\013\u0109\014\u0107\001\002\000" +
    "\006\003\u0105\012\u0104\001\002\000\006\035\uffed\137\uffed" +
    "\001\002\000\004\137\016\001\002\000\006\035\uffea\137" +
    "\uffea\001\002\000\004\137\u0122\001\002\000\044\003\u0119" +
    "\004\100\005\073\016\111\034\u011a\036\035\041\030\055" +
    "\032\065\033\071\110\114\106\115\034\137\u0115\140\101" +
    "\141\076\142\074\143\107\001\002\000\022\003\031\034" +
    "\u010a\036\035\041\030\055\032\065\033\115\034\137\026" +
    "\001\002\000\004\022\u010d\001\002\000\012\003\uffe9\012" +
    "\uffe9\035\uffe9\137\uffe9\001\002\000\004\073\u0113\001\002" +
    "\000\030\003\104\004\100\005\073\016\111\071\110\114" +
    "\106\137\103\140\101\141\076\142\074\143\107\001\002" +
    "\000\010\015\u010f\033\132\074\133\001\002\000\004\015" +
    "\u0110\001\002\000\030\003\104\004\100\005\073\016\111" +
    "\071\110\114\106\137\103\140\101\141\076\142\074\143" +
    "\107\001\002\000\010\023\u0112\033\132\074\133\001\002" +
    "\000\004\073\ufff3\001\002\000\020\003\031\036\035\041" +
    "\030\055\032\065\033\115\034\137\026\001\002\000\012" +
    "\003\uffe8\012\uffe8\035\uffe8\137\uffe8\001\002\000\054\003" +
    "\ufff8\004\uffc7\005\uffc7\006\uffc7\007\uffc7\011\uffc7\012\ufff8" +
    "\015\uffc7\016\144\022\143\024\uffc7\025\uffc7\026\uffc7\027" +
    "\uffc7\033\uffc7\035\ufff8\053\uffc7\074\uffc7\132\uffc7\134\uffc7" +
    "\137\ufff8\001\002\000\012\003\uffe7\012\uffe7\035\uffe7\137" +
    "\uffe7\001\002\000\012\003\uffe6\012\uffe6\035\uffe6\137\uffe6" +
    "\001\002\000\010\015\u011e\033\132\074\133\001\002\000" +
    "\026\003\ufff7\004\116\005\120\006\122\007\121\012\ufff7" +
    "\035\ufff7\134\114\136\117\137\ufff7\001\002\000\004\022" +
    "\u010d\001\002\000\004\073\u011c\001\002\000\020\003\031" +
    "\036\035\041\030\055\032\065\033\115\034\137\026\001" +
    "\002\000\012\003\uffe5\012\uffe5\035\uffe5\137\uffe5\001\002" +
    "\000\004\015\u011f\001\002\000\004\015\u0120\001\002\000" +
    "\030\003\104\004\100\005\073\016\111\071\110\114\106" +
    "\137\103\140\101\141\076\142\074\143\107\001\002\000" +
    "\016\003\ufff4\012\ufff4\033\132\035\ufff4\074\133\137\ufff4" +
    "\001\002\000\010\003\ufff6\013\ufff6\014\ufff6\001\002\000" +
    "\006\035\uffeb\137\uffeb\001\002\000\006\003\u0126\012\u0125" +
    "\001\002\000\006\035\uffee\137\uffee\001\002\000\004\137" +
    "\016\001\002\000\006\035\uffec\137\uffec\001\002\000\006" +
    "\014\uff6e\017\uff6e\001\002\000\020\003\031\036\035\041" +
    "\030\055\032\065\033\115\034\137\026\001\002\000\006" +
    "\014\uff6a\017\uff6a\001\002\000\006\013\u012c\014\u0107\001" +
    "\002\000\020\003\031\036\035\041\030\055\032\065\033" +
    "\115\034\137\026\001\002\000\006\014\uff6b\017\uff6b\001" +
    "\002\000\004\137\u0133\001\002\000\004\030\ufffe\001\002" +
    "\000\006\030\uff70\102\uff70\001\002\000\006\030\uff73\102" +
    "\u012e\001\002\000\006\030\uff71\102\uff71\001\002\000\004" +
    "\016\u0134\001\002\000\012\014\uff6c\017\uff6c\125\017\137" +
    "\016\001\002\000\006\014\023\017\u0136\001\002\000\004" +
    "\012\u0137\001\002\000\006\035\uffef\125\037\001\002\000" +
    "\004\035\u0139\001\002\000\026\003\056\037\054\040\057" +
    "\045\044\052\uff91\056\064\062\051\110\065\127\046\137" +
    "\052\001\002\000\004\052\u013b\001\002\000\004\012\u013c" +
    "\001\002\000\006\030\uff6f\102\uff6f\001\002\000\010\030" +
    "\uff76\057\uff76\102\uff76\001\002\000\004\032\u0273\001\002" +
    "\000\006\032\uff4c\105\uff4c\001\002\000\006\032\uff69\105" +
    "\u0142\001\002\000\006\032\uff4d\105\uff4d\001\002\000\004" +
    "\042\u0143\001\002\000\004\137\u0144\001\002\000\006\020" +
    "\uff49\054\u0145\001\002\000\004\137\u0271\001\002\000\004" +
    "\020\u0147\001\002\000\012\021\uff47\101\uff47\104\uff47\105" +
    "\uff47\001\002\000\012\021\u014c\101\u014e\104\u014a\105\u014d" +
    "\001\002\000\020\036\u0155\041\u0150\055\u0152\065\u0153\115" +
    "\u0154\126\u0156\137\u014f\001\002\000\020\036\uff66\041\uff66" +
    "\055\uff66\065\uff66\115\uff66\126\uff66\137\uff66\001\002\000" +
    "\012\021\uff48\101\uff48\104\uff48\105\uff48\001\002\000\006" +
    "\032\uff4b\105\uff4b\001\002\000\020\036\uff68\041\uff68\055" +
    "\uff68\065\uff68\115\uff68\126\uff68\137\uff68\001\002\000\020" +
    "\036\uff67\041\uff67\055\uff67\065\uff67\115\uff67\126\uff67\137" +
    "\uff67\001\002\000\010\016\u026b\022\u0162\137\uff5a\001\002" +
    "\000\006\022\u0162\137\uff5b\001\002\000\004\137\u0263\001" +
    "\002\000\006\022\u0162\137\uff5d\001\002\000\006\022\u0162" +
    "\137\uff5f\001\002\000\006\022\u0162\137\uff5e\001\002\000" +
    "\006\022\u0162\137\uff5c\001\002\000\004\137\u0157\001\002" +
    "\000\004\016\u0159\001\002\000\012\021\uff45\101\uff45\104" +
    "\uff45\105\uff45\001\002\000\020\017\uff3e\036\u0155\041\u0150" +
    "\055\u0152\065\u0153\115\u0154\137\u015d\001\002\000\006\014" +
    "\uff3c\017\uff3c\001\002\000\004\017\u0167\001\002\000\004" +
    "\137\u0166\001\002\000\006\022\u0162\137\uff5a\001\002\000" +
    "\006\014\u015f\017\uff3f\001\002\000\016\036\u0155\041\u0150" +
    "\055\u0152\065\u0153\115\u0154\137\u015d\001\002\000\006\014" +
    "\uff3d\017\uff3d\001\002\000\006\022\u0162\137\uff60\001\002" +
    "\000\004\023\u0164\001\002\000\006\022\uff58\137\uff58\001" +
    "\002\000\006\022\uff57\137\uff57\001\002\000\006\022\uff59" +
    "\137\uff59\001\002\000\006\014\uff3b\017\uff3b\001\002\000" +
    "\004\020\u0168\001\002\000\046\036\u0155\037\u0176\041\u0150" +
    "\045\u0169\047\u0172\055\u0152\056\u0180\062\u016e\065\u0153\077" +
    "\u017a\100\u0173\111\u016b\115\u0154\116\u0181\117\u016c\121\u0171" +
    "\127\u016a\137\u016f\001\002\000\004\012\uff2b\001\002\000" +
    "\004\016\u0259\001\002\000\034\004\u0193\005\u019d\016\u0196" +
    "\070\u019e\071\u0195\114\u0191\116\u01a0\121\u0199\137\u0197\140" +
    "\u01a1\141\u019b\142\u0190\143\u019f\001\002\000\004\016\u0249" +
    "\001\002\000\054\021\uff39\036\uff39\037\uff39\040\uff39\041" +
    "\uff39\045\uff39\046\uff39\047\uff39\055\uff39\056\uff39\062\uff39" +
    "\065\uff39\077\uff39\100\uff39\111\uff39\115\uff39\116\uff39\117" +
    "\uff39\121\uff39\127\uff39\137\uff39\001\002\000\004\016\u023d" +
    "\001\002\000\020\004\u0217\005\u0216\015\u0189\016\u021c\022" +
    "\u021a\131\u0218\137\uff5a\001\002\000\054\021\uff30\036\uff30" +
    "\037\uff30\040\uff30\041\uff30\045\uff30\046\uff30\047\uff30\055" +
    "\uff30\056\uff30\062\uff30\065\uff30\077\uff30\100\uff30\111\uff30" +
    "\115\uff30\116\uff30\117\uff30\121\uff30\127\uff30\137\uff30\001" +
    "\002\000\006\015\u0189\016\u0212\001\002\000\004\020\u020a" +
    "\001\002\000\004\016\u0207\001\002\000\050\021\u0206\036" +
    "\u0155\037\u0176\041\u0150\045\u0169\047\u0172\055\u0152\056\u0180" +
    "\062\u016e\065\u0153\077\u017a\100\u0173\111\u016b\115\u0154\116" +
    "\u0181\117\u016c\121\u0171\127\u016a\137\u016f\001\002\000\004" +
    "\137\u0203\001\002\000\004\012\uff2c\001\002\000\004\012" +
    "\u0202\001\002\000\054\021\uff31\036\uff31\037\uff31\040\uff31" +
    "\041\uff31\045\uff31\046\uff31\047\uff31\055\uff31\056\uff31\062" +
    "\uff31\065\uff31\077\uff31\100\uff31\111\uff31\115\uff31\116\uff31" +
    "\117\uff31\121\uff31\127\uff31\137\uff31\001\002\000\054\021" +
    "\uff2d\036\uff2d\037\uff2d\040\uff2d\041\uff2d\045\uff2d\046\uff2d" +
    "\047\uff2d\055\uff2d\056\uff2d\062\uff2d\065\uff2d\077\uff2d\100" +
    "\uff2d\111\uff2d\115\uff2d\116\uff2d\117\uff2d\121\uff2d\127\uff2d" +
    "\137\uff2d\001\002\000\004\016\u01ff\001\002\000\004\012" +
    "\u01fe\001\002\000\004\012\u01fd\001\002\000\054\021\uff2e" +
    "\036\uff2e\037\uff2e\040\uff2e\041\uff2e\045\uff2e\046\uff2e\047" +
    "\uff2e\055\uff2e\056\uff2e\062\uff2e\065\uff2e\077\uff2e\100\uff2e" +
    "\111\uff2e\115\uff2e\116\uff2e\117\uff2e\121\uff2e\127\uff2e\137" +
    "\uff2e\001\002\000\054\021\uff38\036\uff38\037\uff38\040\uff38" +
    "\041\uff38\045\uff38\046\uff38\047\uff38\055\uff38\056\uff38\062" +
    "\uff38\065\uff38\077\uff38\100\uff38\111\uff38\115\uff38\116\uff38" +
    "\117\uff38\121\uff38\127\uff38\137\uff38\001\002\000\004\012" +
    "\u01fc\001\002\000\004\017\u01e5\001\002\000\006\015\u0189" +
    "\016\u0188\001\002\000\054\021\uff2f\036\uff2f\037\uff2f\040" +
    "\uff2f\041\uff2f\045\uff2f\046\uff2f\047\uff2f\055\uff2f\056\uff2f" +
    "\062\uff2f\065\uff2f\077\uff2f\100\uff2f\111\uff2f\115\uff2f\116" +
    "\uff2f\117\uff2f\121\uff2f\127\uff2f\137\uff2f\001\002\000\004" +
    "\012\u0186\001\002\000\004\012\u0185\001\002\000\054\021" +
    "\uff35\036\uff35\037\uff35\040\uff35\041\uff35\045\uff35\046\uff35" +
    "\047\uff35\055\uff35\056\uff35\062\uff35\065\uff35\077\uff35\100" +
    "\uff35\111\uff35\115\uff35\116\uff35\117\uff35\121\uff35\127\uff35" +
    "\137\uff35\001\002\000\054\021\uff32\036\uff32\037\uff32\040" +
    "\uff32\041\uff32\045\uff32\046\uff32\047\uff32\055\uff32\056\uff32" +
    "\062\uff32\065\uff32\077\uff32\100\uff32\111\uff32\115\uff32\116" +
    "\uff32\117\uff32\121\uff32\127\uff32\137\uff32\001\002\000\012" +
    "\004\u01e1\012\uff01\017\uff01\131\u01e2\001\002\000\036\004" +
    "\u0193\005\u019d\016\u0196\017\u01de\070\u019e\071\u0195\114\u0191" +
    "\116\u01a0\121\u0199\137\u0197\140\u01a1\141\u019b\142\u0190\143" +
    "\u019f\001\002\000\004\137\u018a\001\002\000\060\004\ufef4" +
    "\005\ufef4\006\ufef4\007\ufef4\011\ufef4\012\ufef4\013\ufef4\014" +
    "\ufef4\015\ufef4\016\u018f\017\ufef4\022\u018e\023\ufef4\024\ufef4" +
    "\025\ufef4\026\ufef4\027\ufef4\033\ufef4\053\ufef4\074\ufef4\131" +
    "\ufef4\132\ufef4\134\ufef4\001\002\000\054\004\ufef5\005\ufef5" +
    "\006\ufef5\007\ufef5\011\ufef5\012\ufef5\013\ufef5\014\ufef5\015" +
    "\u0189\017\ufef5\023\ufef5\024\ufef5\025\ufef5\026\ufef5\027\ufef5" +
    "\033\ufef5\053\ufef5\074\ufef5\131\ufef5\132\ufef5\134\ufef5\001" +
    "\002\000\052\004\ufef6\005\ufef6\006\ufef6\007\ufef6\011\ufef6" +
    "\012\ufef6\013\ufef6\014\ufef6\017\ufef6\023\ufef6\024\ufef6\025" +
    "\ufef6\026\ufef6\027\ufef6\033\ufef6\053\ufef6\074\ufef6\131\ufef6" +
    "\132\ufef6\134\ufef6\001\002\000\056\004\ufeef\005\ufeef\006" +
    "\ufeef\007\ufeef\011\ufeef\012\ufeef\013\ufeef\014\ufeef\015\ufeef" +
    "\017\ufeef\022\u01cb\023\ufeef\024\ufeef\025\ufeef\026\ufeef\027" +
    "\ufeef\033\ufeef\053\ufeef\074\ufeef\131\ufeef\132\ufeef\134\ufeef" +
    "\001\002\000\034\004\u0193\005\u019d\016\u0196\070\u019e\071" +
    "\u0195\114\u0191\116\u01a0\121\u0199\137\u0197\140\u01a1\141\u019b" +
    "\142\u0190\143\u019f\001\002\000\036\004\u0193\005\u019d\016" +
    "\u0196\017\u0194\070\u019e\071\u0195\114\u0191\116\u01a0\121\u0199" +
    "\137\u0197\140\u01a1\141\u019b\142\u0190\143\u019f\001\002\000" +
    "\050\004\uff50\005\uff50\006\uff50\007\uff50\011\uff50\012\uff50" +
    "\013\uff50\014\uff50\017\uff50\023\uff50\024\uff50\025\uff50\026" +
    "\uff50\027\uff50\033\uff50\053\uff50\074\uff50\132\uff50\134\uff50" +
    "\001\002\000\050\004\uff51\005\uff51\006\uff51\007\uff51\011" +
    "\uff51\012\uff51\013\uff51\014\uff51\017\uff51\023\uff51\024\uff51" +
    "\025\uff51\026\uff51\027\uff51\033\uff51\053\uff51\074\uff51\132" +
    "\uff51\134\uff51\001\002\000\012\014\uff53\017\uff53\033\u01c3" +
    "\074\u01c4\001\002\000\032\004\u0193\005\u019d\016\u0196\070" +
    "\u019e\114\u0191\116\u01a0\121\u0199\137\u0197\140\u01a1\141\u019b" +
    "\142\u0190\143\u019f\001\002\000\056\004\ufef3\005\ufef3\006" +
    "\ufef3\007\ufef3\011\ufef3\012\ufef3\013\ufef3\014\ufef3\015\ufef3" +
    "\017\ufef3\022\u018e\023\ufef3\024\ufef3\025\ufef3\026\ufef3\027" +
    "\ufef3\033\ufef3\053\ufef3\074\ufef3\131\ufef3\132\ufef3\134\ufef3" +
    "\001\002\000\034\004\u0193\005\u019d\016\u0196\070\u019e\071" +
    "\u0195\114\u0191\116\u01a0\121\u0199\137\u0197\140\u01a1\141\u019b" +
    "\142\u0190\143\u019f\001\002\000\034\004\u0193\005\u019d\016" +
    "\u0196\070\u019e\071\u0195\114\u0191\116\u01a0\121\u0199\137\u0197" +
    "\140\u01a1\141\u019b\142\u0190\143\u019f\001\002\000\056\004" +
    "\ufed5\005\ufed5\006\ufed5\007\ufed5\011\ufed5\012\ufed5\013\ufed5" +
    "\014\ufed5\015\u0189\016\u01d0\017\ufed5\022\u018e\023\ufed5\024" +
    "\ufed5\025\ufed5\026\ufed5\027\ufed5\033\ufed5\053\ufed5\074\ufed5" +
    "\132\ufed5\134\ufed5\001\002\000\006\014\u01c0\017\u01c9\001" +
    "\002\000\004\015\u0189\001\002\000\020\012\ufeeb\013\ufeeb" +
    "\014\ufeeb\017\ufeeb\023\ufeeb\033\ufeeb\074\ufeeb\001\002\000" +
    "\050\004\uff52\005\uff52\006\uff52\007\uff52\011\uff52\012\uff52" +
    "\013\uff52\014\uff52\017\uff52\023\uff52\024\uff52\025\uff52\026" +
    "\uff52\027\uff52\033\uff52\053\uff52\074\uff52\132\uff52\134\uff52" +
    "\001\002\000\050\004\ufedd\005\ufedd\006\ufedd\007\ufedd\011" +
    "\ufedd\012\ufedd\013\ufedd\014\ufedd\017\ufedd\023\ufedd\024\ufedd" +
    "\025\ufedd\026\ufedd\027\ufedd\033\ufedd\053\ufedd\074\ufedd\132" +
    "\ufedd\134\ufedd\001\002\000\032\004\u0193\005\u019d\016\u0196" +
    "\070\u019e\114\u0191\116\u01a0\121\u0199\137\u0197\140\u01a1\141" +
    "\u019b\142\u0190\143\u019f\001\002\000\004\137\u01bc\001\002" +
    "\000\050\004\uff4e\005\uff4e\006\uff4e\007\uff4e\011\uff4e\012" +
    "\uff4e\013\uff4e\014\uff4e\017\uff4e\023\uff4e\024\uff4e\025\uff4e" +
    "\026\uff4e\027\uff4e\033\uff4e\053\uff4e\074\uff4e\132\uff4e\134" +
    "\uff4e\001\002\000\004\015\u0189\001\002\000\050\004\uff4f" +
    "\005\uff4f\006\uff4f\007\uff4f\011\uff4f\012\uff4f\013\uff4f\014" +
    "\uff4f\017\uff4f\023\uff4f\024\uff4f\025\uff4f\026\uff4f\027\uff4f" +
    "\033\uff4f\053\uff4f\074\uff4f\132\uff4f\134\uff4f\001\002\000" +
    "\050\004\u01a8\005\u01a3\006\u01ab\007\u01a9\011\u01ac\012\ufee4" +
    "\013\ufee4\014\ufee4\017\ufee4\023\ufee4\024\u01a5\025\u01aa\026" +
    "\u01a4\027\u01ae\033\ufee4\053\u01ad\074\ufee4\132\u01a7\134\u01a6" +
    "\001\002\000\032\004\u0193\005\u019d\016\u0196\070\u019e\114" +
    "\u0191\116\u01a0\121\u0199\137\u0197\140\u01a1\141\u019b\142\u0190" +
    "\143\u019f\001\002\000\032\004\u0193\005\u019d\016\u0196\070" +
    "\u019e\114\u0191\116\u01a0\121\u0199\137\u0197\140\u01a1\141\u019b" +
    "\142\u0190\143\u019f\001\002\000\032\004\u0193\005\u019d\016" +
    "\u0196\070\u019e\114\u0191\116\u01a0\121\u0199\137\u0197\140\u01a1" +
    "\141\u019b\142\u0190\143\u019f\001\002\000\032\004\u0193\005" +
    "\u019d\016\u0196\070\u019e\114\u0191\116\u01a0\121\u0199\137\u0197" +
    "\140\u01a1\141\u019b\142\u0190\143\u019f\001\002\000\032\004" +
    "\u0193\005\u019d\016\u0196\070\u019e\114\u0191\116\u01a0\121\u0199" +
    "\137\u0197\140\u01a1\141\u019b\142\u0190\143\u019f\001\002\000" +
    "\032\004\u0193\005\u019d\016\u0196\070\u019e\114\u0191\116\u01a0" +
    "\121\u0199\137\u0197\140\u01a1\141\u019b\142\u0190\143\u019f\001" +
    "\002\000\032\004\u0193\005\u019d\016\u0196\070\u019e\114\u0191" +
    "\116\u01a0\121\u0199\137\u0197\140\u01a1\141\u019b\142\u0190\143" +
    "\u019f\001\002\000\032\004\u0193\005\u019d\016\u0196\070\u019e" +
    "\114\u0191\116\u01a0\121\u0199\137\u0197\140\u01a1\141\u019b\142" +
    "\u0190\143\u019f\001\002\000\032\004\u0193\005\u019d\016\u0196" +
    "\070\u019e\114\u0191\116\u01a0\121\u0199\137\u0197\140\u01a1\141" +
    "\u019b\142\u0190\143\u019f\001\002\000\032\004\u0193\005\u019d" +
    "\016\u0196\070\u019e\114\u0191\116\u01a0\121\u0199\137\u0197\140" +
    "\u01a1\141\u019b\142\u0190\143\u019f\001\002\000\032\004\u0193" +
    "\005\u019d\016\u0196\070\u019e\114\u0191\116\u01a0\121\u0199\137" +
    "\u0197\140\u01a1\141\u019b\142\u0190\143\u019f\001\002\000\032" +
    "\004\u0193\005\u019d\016\u0196\070\u019e\114\u0191\116\u01a0\121" +
    "\u0199\137\u0197\140\u01a1\141\u019b\142\u0190\143\u019f\001\002" +
    "\000\034\004\u01a8\005\u01a3\006\u01ab\007\u01a9\011\u01ac\012" +
    "\ufee5\013\ufee5\014\ufee5\017\ufee5\023\ufee5\033\ufee5\074\ufee5" +
    "\134\u01a6\001\002\000\034\004\u01a8\005\u01a3\006\u01ab\007" +
    "\u01a9\011\u01ac\012\ufeea\013\ufeea\014\ufeea\017\ufeea\023\ufeea" +
    "\033\ufeea\074\ufeea\134\u01a6\001\002\000\050\004\ufede\005" +
    "\ufede\006\ufede\007\ufede\011\ufede\012\ufede\013\ufede\014\ufede" +
    "\017\ufede\023\ufede\024\ufede\025\ufede\026\ufede\027\ufede\033" +
    "\ufede\053\ufede\074\ufede\132\ufede\134\ufede\001\002\000\050" +
    "\004\ufee1\005\ufee1\006\ufee1\007\ufee1\011\u01ac\012\ufee1\013" +
    "\ufee1\014\ufee1\017\ufee1\023\ufee1\024\ufee1\025\ufee1\026\ufee1" +
    "\027\ufee1\033\ufee1\053\ufee1\074\ufee1\132\ufee1\134\ufee1\001" +
    "\002\000\034\004\u01a8\005\u01a3\006\u01ab\007\u01a9\011\u01ac" +
    "\012\ufee7\013\ufee7\014\ufee7\017\ufee7\023\ufee7\033\ufee7\074" +
    "\ufee7\134\u01a6\001\002\000\050\004\ufee0\005\ufee0\006\ufee0" +
    "\007\ufee0\011\u01ac\012\ufee0\013\ufee0\014\ufee0\017\ufee0\023" +
    "\ufee0\024\ufee0\025\ufee0\026\ufee0\027\ufee0\033\ufee0\053\ufee0" +
    "\074\ufee0\132\ufee0\134\ufee0\001\002\000\050\004\ufee3\005" +
    "\ufee3\006\u01ab\007\u01a9\011\u01ac\012\ufee3\013\ufee3\014\ufee3" +
    "\017\ufee3\023\ufee3\024\ufee3\025\ufee3\026\ufee3\027\ufee3\033" +
    "\ufee3\053\ufee3\074\ufee3\132\ufee3\134\u01a6\001\002\000\034" +
    "\004\u01a8\005\u01a3\006\u01ab\007\u01a9\011\u01ac\012\ufee9\013" +
    "\ufee9\014\ufee9\017\ufee9\023\ufee9\033\ufee9\074\ufee9\134\u01a6" +
    "\001\002\000\050\004\ufedf\005\ufedf\006\ufedf\007\ufedf\011" +
    "\u01ac\012\ufedf\013\ufedf\014\ufedf\017\ufedf\023\ufedf\024\ufedf" +
    "\025\ufedf\026\ufedf\027\ufedf\033\ufedf\053\ufedf\074\ufedf\132" +
    "\ufedf\134\ufedf\001\002\000\034\004\u01a8\005\u01a3\006\u01ab" +
    "\007\u01a9\011\u01ac\012\ufee8\013\ufee8\014\ufee8\017\ufee8\023" +
    "\ufee8\033\ufee8\074\ufee8\134\u01a6\001\002\000\034\004\u01a8" +
    "\005\u01a3\006\u01ab\007\u01a9\011\u01ac\012\ufee6\013\ufee6\014" +
    "\ufee6\017\ufee6\023\ufee6\033\ufee6\074\ufee6\134\u01a6\001\002" +
    "\000\050\004\ufee2\005\ufee2\006\u01ab\007\u01a9\011\u01ac\012" +
    "\ufee2\013\ufee2\014\ufee2\017\ufee2\023\ufee2\024\ufee2\025\ufee2" +
    "\026\ufee2\027\ufee2\033\ufee2\053\ufee2\074\ufee2\132\ufee2\134" +
    "\u01a6\001\002\000\050\004\ufed3\005\ufed3\006\ufed3\007\ufed3" +
    "\011\ufed3\012\ufed3\013\ufed3\014\ufed3\017\ufed3\023\ufed3\024" +
    "\ufed3\025\ufed3\026\ufed3\027\ufed3\033\ufed3\053\ufed3\074\ufed3" +
    "\132\ufed3\134\ufed3\001\002\000\004\016\u01bd\001\002\000" +
    "\036\004\u0193\005\u019d\016\u0196\017\u01be\070\u019e\071\u0195" +
    "\114\u0191\116\u01a0\121\u0199\137\u0197\140\u01a1\141\u019b\142" +
    "\u0190\143\u019f\001\002\000\050\004\ufed2\005\ufed2\006\ufed2" +
    "\007\ufed2\011\ufed2\012\ufed2\013\ufed2\014\ufed2\017\ufed2\023" +
    "\ufed2\024\ufed2\025\ufed2\026\ufed2\027\ufed2\033\ufed2\053\ufed2" +
    "\074\ufed2\132\ufed2\134\ufed2\001\002\000\006\014\u01c0\017" +
    "\u01c1\001\002\000\034\004\u0193\005\u019d\016\u0196\070\u019e" +
    "\071\u0195\114\u0191\116\u01a0\121\u0199\137\u0197\140\u01a1\141" +
    "\u019b\142\u0190\143\u019f\001\002\000\050\004\ufed1\005\ufed1" +
    "\006\ufed1\007\ufed1\011\ufed1\012\ufed1\013\ufed1\014\ufed1\017" +
    "\ufed1\023\ufed1\024\ufed1\025\ufed1\026\ufed1\027\ufed1\033\ufed1" +
    "\053\ufed1\074\ufed1\132\ufed1\134\ufed1\001\002\000\012\014" +
    "\uff54\017\uff54\033\u01c3\074\u01c4\001\002\000\034\004\u0193" +
    "\005\u019d\016\u0196\070\u019e\071\u0195\114\u0191\116\u01a0\121" +
    "\u0199\137\u0197\140\u01a1\141\u019b\142\u0190\143\u019f\001\002" +
    "\000\034\004\u0193\005\u019d\016\u0196\070\u019e\071\u0195\114" +
    "\u0191\116\u01a0\121\u0199\137\u0197\140\u01a1\141\u019b\142\u0190" +
    "\143\u019f\001\002\000\020\012\ufeed\013\ufeed\014\ufeed\017" +
    "\ufeed\023\ufeed\033\u01c3\074\ufeed\001\002\000\020\012\ufeee" +
    "\013\ufeee\014\ufeee\017\ufeee\023\ufeee\033\ufeee\074\ufeee\001" +
    "\002\000\050\004\ufece\005\ufece\006\u01ab\007\u01a9\011\u01ac" +
    "\012\ufece\013\ufece\014\ufece\017\ufece\023\ufece\024\ufece\025" +
    "\ufece\026\ufece\027\ufece\033\ufece\053\ufece\074\ufece\132\ufece" +
    "\134\u01a6\001\002\000\050\004\ufed4\005\ufed4\006\ufed4\007" +
    "\ufed4\011\ufed4\012\ufed4\013\ufed4\014\ufed4\017\ufed4\023\ufed4" +
    "\024\ufed4\025\ufed4\026\ufed4\027\ufed4\033\ufed4\053\ufed4\074" +
    "\ufed4\132\ufed4\134\ufed4\001\002\000\056\004\ufef1\005\ufef1" +
    "\006\ufef1\007\ufef1\011\ufef1\012\ufef1\013\ufef1\014\ufef1\015" +
    "\ufef1\017\ufef1\022\u018e\023\ufef1\024\ufef1\025\ufef1\026\ufef1" +
    "\027\ufef1\033\ufef1\053\ufef1\074\ufef1\131\ufef1\132\ufef1\134" +
    "\ufef1\001\002\000\056\004\ufef0\005\ufef0\006\ufef0\007\ufef0" +
    "\011\ufef0\012\ufef0\013\ufef0\014\ufef0\015\ufef0\017\ufef0\022" +
    "\u01cb\023\ufef0\024\ufef0\025\ufef0\026\ufef0\027\ufef0\033\ufef0" +
    "\053\ufef0\074\ufef0\131\ufef0\132\ufef0\134\ufef0\001\002\000" +
    "\034\004\u0193\005\u019d\016\u0196\070\u019e\071\u0195\114\u0191" +
    "\116\u01a0\121\u0199\137\u0197\140\u01a1\141\u019b\142\u0190\143" +
    "\u019f\001\002\000\010\023\u01cd\033\u01c3\074\u01c4\001\002" +
    "\000\056\004\uff55\005\uff55\006\uff55\007\uff55\011\uff55\012" +
    "\uff55\013\uff55\014\uff55\015\uff55\017\uff55\022\uff55\023\uff55" +
    "\024\uff55\025\uff55\026\uff55\027\uff55\033\uff55\053\uff55\074" +
    "\uff55\131\uff55\132\uff55\134\uff55\001\002\000\050\004\ufed6" +
    "\005\ufed6\006\ufed6\007\ufed6\011\ufed6\012\ufed6\013\ufed6\014" +
    "\ufed6\017\ufed6\023\ufed6\024\ufed6\025\ufed6\026\ufed6\027\ufed6" +
    "\033\ufed6\053\ufed6\074\ufed6\132\ufed6\134\ufed6\001\002\000" +
    "\054\004\ufedc\005\ufedc\006\ufedc\007\ufedc\011\ufedc\012\ufedc" +
    "\013\ufedc\014\ufedc\015\u0189\017\ufedc\022\u01cb\023\ufedc\024" +
    "\ufedc\025\ufedc\026\ufedc\027\ufedc\033\ufedc\053\ufedc\074\ufedc" +
    "\132\ufedc\134\ufedc\001\002\000\036\004\u0193\005\u019d\016" +
    "\u0196\017\u01d1\070\u019e\071\u0195\114\u0191\116\u01a0\121\u0199" +
    "\137\u0197\140\u01a1\141\u019b\142\u0190\143\u019f\001\002\000" +
    "\052\004\ufed9\005\ufed9\006\ufed9\007\ufed9\011\ufed9\012\ufed9" +
    "\013\ufed9\014\ufed9\015\u0189\017\ufed9\023\ufed9\024\ufed9\025" +
    "\ufed9\026\ufed9\027\ufed9\033\ufed9\053\ufed9\074\ufed9\132\ufed9" +
    "\134\ufed9\001\002\000\006\014\u01c0\017\u01d3\001\002\000" +
    "\052\004\ufeda\005\ufeda\006\ufeda\007\ufeda\011\ufeda\012\ufeda" +
    "\013\ufeda\014\ufeda\015\u0189\017\ufeda\023\ufeda\024\ufeda\025" +
    "\ufeda\026\ufeda\027\ufeda\033\ufeda\053\ufeda\074\ufeda\132\ufeda" +
    "\134\ufeda\001\002\000\050\004\ufed8\005\ufed8\006\ufed8\007" +
    "\ufed8\011\ufed8\012\ufed8\013\ufed8\014\ufed8\017\ufed8\023\ufed8" +
    "\024\ufed8\025\ufed8\026\ufed8\027\ufed8\033\ufed8\053\ufed8\074" +
    "\ufed8\132\ufed8\134\ufed8\001\002\000\050\004\ufed7\005\ufed7" +
    "\006\ufed7\007\ufed7\011\ufed7\012\ufed7\013\ufed7\014\ufed7\017" +
    "\ufed7\023\ufed7\024\ufed7\025\ufed7\026\ufed7\027\ufed7\033\ufed7" +
    "\053\ufed7\074\ufed7\132\ufed7\134\ufed7\001\002\000\050\004" +
    "\ufedb\005\ufedb\006\ufedb\007\ufedb\011\ufedb\012\ufedb\013\ufedb" +
    "\014\ufedb\017\ufedb\023\ufedb\024\ufedb\025\ufedb\026\ufedb\027" +
    "\ufedb\033\ufedb\053\ufedb\074\ufedb\132\ufedb\134\ufedb\001\002" +
    "\000\010\017\u01d8\033\u01c3\074\u01c4\001\002\000\050\004" +
    "\ufed0\005\ufed0\006\ufed0\007\ufed0\011\ufed0\012\ufed0\013\ufed0" +
    "\014\ufed0\017\ufed0\023\ufed0\024\ufed0\025\ufed0\026\ufed0\027" +
    "\ufed0\033\ufed0\053\ufed0\074\ufed0\132\ufed0\134\ufed0\001\002" +
    "\000\020\012\ufeec\013\ufeec\014\ufeec\017\ufeec\023\ufeec\033" +
    "\ufeec\074\ufeec\001\002\000\056\004\ufef2\005\ufef2\006\ufef2" +
    "\007\ufef2\011\ufef2\012\ufef2\013\ufef2\014\ufef2\015\ufef2\017" +
    "\ufef2\022\u01cb\023\ufef2\024\ufef2\025\ufef2\026\ufef2\027\ufef2" +
    "\033\ufef2\053\ufef2\074\ufef2\131\ufef2\132\ufef2\134\ufef2\001" +
    "\002\000\050\004\ufecf\005\ufecf\006\ufecf\007\ufecf\011\ufecf" +
    "\012\ufecf\013\ufecf\014\ufecf\017\ufecf\023\ufecf\024\ufecf\025" +
    "\ufecf\026\ufecf\027\ufecf\033\ufecf\053\ufecf\074\ufecf\132\ufecf" +
    "\134\ufecf\001\002\000\010\023\u01dd\033\u01c3\074\u01c4\001" +
    "\002\000\056\004\uff56\005\uff56\006\uff56\007\uff56\011\uff56" +
    "\012\uff56\013\uff56\014\uff56\015\uff56\017\uff56\022\uff56\023" +
    "\uff56\024\uff56\025\uff56\026\uff56\027\uff56\033\uff56\053\uff56" +
    "\074\uff56\131\uff56\132\uff56\134\uff56\001\002\000\004\012" +
    "\ufef8\001\002\000\006\014\u01c0\017\u01e0\001\002\000\004" +
    "\012\ufef7\001\002\000\004\004\u01e4\001\002\000\034\004" +
    "\u0193\005\u019d\016\u0196\070\u019e\071\u0195\114\u0191\116\u01a0" +
    "\121\u0199\137\u0197\140\u01a1\141\u019b\142\u0190\143\u019f\001" +
    "\002\000\012\012\uff11\017\uff11\033\u01c3\074\u01c4\001\002" +
    "\000\006\012\uff10\017\uff10\001\002\000\024\012\uff1d\036" +
    "\u0155\041\u0150\055\u0152\065\u0153\115\u0154\116\u01e6\121\u01e9" +
    "\137\u016f\001\002\000\004\015\u0189\001\002\000\004\012" +
    "\u01f3\001\002\000\006\012\uff1e\017\uff1e\001\002\000\004" +
    "\015\u0189\001\002\000\006\012\uff1f\017\uff1f\001\002\000" +
    "\006\012\uff20\017\uff20\001\002\000\014\004\u01ed\005\u01ee" +
    "\012\uff02\017\uff02\131\u01ef\001\002\000\004\004\u01f2\001" +
    "\002\000\004\005\u01f1\001\002\000\034\004\u0193\005\u019d" +
    "\016\u0196\070\u019e\071\u0195\114\u0191\116\u01a0\121\u0199\137" +
    "\u0197\140\u01a1\141\u019b\142\u0190\143\u019f\001\002\000\012" +
    "\012\uff14\017\uff14\033\u01c3\074\u01c4\001\002\000\006\012" +
    "\uff12\017\uff12\001\002\000\006\012\uff13\017\uff13\001\002" +
    "\000\034\004\u0193\005\u019d\016\u0196\070\u019e\071\u0195\114" +
    "\u0191\116\u01a0\121\u0199\137\u0197\140\u01a1\141\u019b\142\u0190" +
    "\143\u019f\001\002\000\010\012\u01f5\033\u01c3\074\u01c4\001" +
    "\002\000\024\017\uff1d\036\u0155\041\u0150\055\u0152\065\u0153" +
    "\115\u0154\116\u01e6\121\u01e9\137\u016f\001\002\000\004\017" +
    "\u01f7\001\002\000\004\020\u01f8\001\002\000\046\036\u0155" +
    "\037\u0176\041\u0150\045\u0169\047\u0172\055\u0152\056\u0180\062" +
    "\u016e\065\u0153\077\u017a\100\u0173\111\u016b\115\u0154\116\u0181" +
    "\117\u016c\121\u0171\127\u016a\137\u016f\001\002\000\050\021" +
    "\u01fa\036\u0155\037\u0176\041\u0150\045\u0169\047\u0172\055\u0152" +
    "\056\u0180\062\u016e\065\u0153\077\u017a\100\u0173\111\u016b\115" +
    "\u0154\116\u0181\117\u016c\121\u0171\127\u016a\137\u016f\001\002" +
    "\000\054\021\uff21\036\uff21\037\uff21\040\uff21\041\uff21\045" +
    "\uff21\046\uff21\047\uff21\055\uff21\056\uff21\062\uff21\065\uff21" +
    "\077\uff21\100\uff21\111\uff21\115\uff21\116\uff21\117\uff21\121" +
    "\uff21\127\uff21\137\uff21\001\002\000\054\021\uff3a\036\uff3a" +
    "\037\uff3a\040\uff3a\041\uff3a\045\uff3a\046\uff3a\047\uff3a\055" +
    "\uff3a\056\uff3a\062\uff3a\065\uff3a\077\uff3a\100\uff3a\111\uff3a" +
    "\115\uff3a\116\uff3a\117\uff3a\121\uff3a\127\uff3a\137\uff3a\001" +
    "\002\000\054\021\uff33\036\uff33\037\uff33\040\uff33\041\uff33" +
    "\045\uff33\046\uff33\047\uff33\055\uff33\056\uff33\062\uff33\065" +
    "\uff33\077\uff33\100\uff33\111\uff33\115\uff33\116\uff33\117\uff33" +
    "\121\uff33\127\uff33\137\uff33\001\002\000\054\021\uff36\036" +
    "\uff36\037\uff36\040\uff36\041\uff36\045\uff36\046\uff36\047\uff36" +
    "\055\uff36\056\uff36\062\uff36\065\uff36\077\uff36\100\uff36\111" +
    "\uff36\115\uff36\116\uff36\117\uff36\121\uff36\127\uff36\137\uff36" +
    "\001\002\000\054\021\uff37\036\uff37\037\uff37\040\uff37\041" +
    "\uff37\045\uff37\046\uff37\047\uff37\055\uff37\056\uff37\062\uff37" +
    "\065\uff37\077\uff37\100\uff37\111\uff37\115\uff37\116\uff37\117" +
    "\uff37\121\uff37\127\uff37\137\uff37\001\002\000\034\004\u0193" +
    "\005\u019d\016\u0196\070\u019e\071\u0195\114\u0191\116\u01a0\121" +
    "\u0199\137\u0197\140\u01a1\141\u019b\142\u0190\143\u019f\001\002" +
    "\000\006\014\u01c0\017\u0201\001\002\000\004\012\uff29\001" +
    "\002\000\054\021\uff34\036\uff34\037\uff34\040\uff34\041\uff34" +
    "\045\uff34\046\uff34\047\uff34\055\uff34\056\uff34\062\uff34\065" +
    "\uff34\077\uff34\100\uff34\111\uff34\115\uff34\116\uff34\117\uff34" +
    "\121\uff34\127\uff34\137\uff34\001\002\000\010\012\uff03\017" +
    "\uff03\131\u0204\001\002\000\034\004\u0193\005\u019d\016\u0196" +
    "\070\u019e\071\u0195\114\u0191\116\u01a0\121\u0199\137\u0197\140" +
    "\u01a1\141\u019b\142\u0190\143\u019f\001\002\000\012\012\uff04" +
    "\017\uff04\033\u01c3\074\u01c4\001\002\000\012\021\uff40\101" +
    "\uff40\104\uff40\105\uff40\001\002\000\034\004\u0193\005\u019d" +
    "\016\u0196\070\u019e\071\u0195\114\u0191\116\u01a0\121\u0199\137" +
    "\u0197\140\u01a1\141\u019b\142\u0190\143\u019f\001\002\000\006" +
    "\014\u01c0\017\u0209\001\002\000\004\012\uff28\001\002\000" +
    "\046\036\u0155\037\u0176\041\u0150\045\u0169\047\u0172\055\u0152" +
    "\056\u0180\062\u016e\065\u0153\077\u017a\100\u0173\111\u016b\115" +
    "\u0154\116\u0181\117\u016c\121\u0171\127\u016a\137\u016f\001\002" +
    "\000\050\021\u020c\036\u0155\037\u0176\041\u0150\045\u0169\047" +
    "\u0172\055\u0152\056\u0180\062\u016e\065\u0153\077\u017a\100\u0173" +
    "\111\u016b\115\u0154\116\u0181\117\u016c\121\u0171\127\u016a\137" +
    "\u016f\001\002\000\004\127\u020d\001\002\000\004\016\u020e" +
    "\001\002\000\034\004\u0193\005\u019d\016\u0196\070\u019e\071" +
    "\u0195\114\u0191\116\u01a0\121\u0199\137\u0197\140\u01a1\141\u019b" +
    "\142\u0190\143\u019f\001\002\000\010\017\u0210\033\u01c3\074" +
    "\u01c4\001\002\000\004\012\u0211\001\002\000\054\021\uff22" +
    "\036\uff22\037\uff22\040\uff22\041\uff22\045\uff22\046\uff22\047" +
    "\uff22\055\uff22\056\uff22\062\uff22\065\uff22\077\uff22\100\uff22" +
    "\111\uff22\115\uff22\116\uff22\117\uff22\121\uff22\127\uff22\137" +
    "\uff22\001\002\000\036\004\u0193\005\u019d\016\u0196\017\u0213" +
    "\070\u019e\071\u0195\114\u0191\116\u01a0\121\u0199\137\u0197\140" +
    "\u01a1\141\u019b\142\u0190\143\u019f\001\002\000\004\012\ufefa" +
    "\001\002\000\006\014\u01c0\017\u0215\001\002\000\004\012" +
    "\ufef9\001\002\000\004\005\u023c\001\002\000\004\004\u023b" +
    "\001\002\000\034\004\u0193\005\u019d\016\u0196\070\u019e\071" +
    "\u0195\114\u0191\116\u01a0\121\u0199\137\u0197\140\u01a1\141\u019b" +
    "\142\u0190\143\u019f\001\002\000\006\015\u0189\022\u01cb\001" +
    "\002\000\036\004\u0193\005\u019d\016\u0196\023\u0164\070\u019e" +
    "\071\u0195\114\u0191\116\u01a0\121\u0199\137\u0197\140\u01a1\141" +
    "\u019b\142\u0190\143\u019f\001\002\000\012\004\u022e\012\uff00" +
    "\017\uff00\131\u022f\001\002\000\036\004\u0193\005\u019d\016" +
    "\u0196\017\u021d\070\u019e\071\u0195\114\u0191\116\u01a0\121\u0199" +
    "\137\u0197\140\u01a1\141\u019b\142\u0190\143\u019f\001\002\000" +
    "\010\012\ufeff\015\u0189\017\ufeff\001\002\000\006\014\u01c0" +
    "\017\u021f\001\002\000\010\012\ufefe\015\u0189\017\ufefe\001" +
    "\002\000\014\004\u0221\005\u0222\012\ufefc\017\ufefc\131\u0223" +
    "\001\002\000\004\004\u0226\001\002\000\004\005\u0225\001" +
    "\002\000\034\004\u0193\005\u019d\016\u0196\070\u019e\071\u0195" +
    "\114\u0191\116\u01a0\121\u0199\137\u0197\140\u01a1\141\u019b\142" +
    "\u0190\143\u019f\001\002\000\012\012\uff0a\017\uff0a\033\u01c3" +
    "\074\u01c4\001\002\000\006\012\uff08\017\uff08\001\002\000" +
    "\006\012\uff09\017\uff09\001\002\000\014\004\u0228\005\u022a" +
    "\012\ufefd\017\ufefd\131\u0229\001\002\000\004\004\u022d\001" +
    "\002\000\034\004\u0193\005\u019d\016\u0196\070\u019e\071\u0195" +
    "\114\u0191\116\u01a0\121\u0199\137\u0197\140\u01a1\141\u019b\142" +
    "\u0190\143\u019f\001\002\000\004\005\u022b\001\002\000\006" +
    "\012\uff0b\017\uff0b\001\002\000\012\012\uff0d\017\uff0d\033" +
    "\u01c3\074\u01c4\001\002\000\006\012\uff0c\017\uff0c\001\002" +
    "\000\004\004\u0231\001\002\000\034\004\u0193\005\u019d\016" +
    "\u0196\070\u019e\071\u0195\114\u0191\116\u01a0\121\u0199\137\u0197" +
    "\140\u01a1\141\u019b\142\u0190\143\u019f\001\002\000\012\012" +
    "\uff0f\017\uff0f\033\u01c3\074\u01c4\001\002\000\006\012\uff0e" +
    "\017\uff0e\001\002\000\014\004\u0233\005\u0235\012\ufefb\017" +
    "\ufefb\131\u0234\001\002\000\004\004\u0239\001\002\000\034" +
    "\004\u0193\005\u019d\016\u0196\070\u019e\071\u0195\114\u0191\116" +
    "\u01a0\121\u0199\137\u0197\140\u01a1\141\u019b\142\u0190\143\u019f" +
    "\001\002\000\004\005\u0236\001\002\000\006\012\uff05\017" +
    "\uff05\001\002\000\010\012\u0238\033\u01c3\074\u01c4\001\002" +
    "\000\006\012\uff07\017\uff07\001\002\000\006\012\uff06\017" +
    "\uff06\001\002\000\012\012\uff17\017\uff17\033\u01c3\074\u01c4" +
    "\001\002\000\006\012\uff16\017\uff16\001\002\000\006\012" +
    "\uff15\017\uff15\001\002\000\034\004\u0193\005\u019d\016\u0196" +
    "\070\u019e\071\u0195\114\u0191\116\u01a0\121\u0199\137\u0197\140" +
    "\u01a1\141\u019b\142\u0190\143\u019f\001\002\000\010\017\u023f" +
    "\033\u01c3\074\u01c4\001\002\000\004\020\u0240\001\002\000" +
    "\046\036\u0155\037\u0176\041\u0150\045\u0169\047\u0172\055\u0152" +
    "\056\u0180\062\u016e\065\u0153\077\u017a\100\u0173\111\u016b\115" +
    "\u0154\116\u0181\117\u016c\121\u0171\127\u016a\137\u016f\001\002" +
    "\000\050\021\u0242\036\u0155\037\u0176\041\u0150\045\u0169\047" +
    "\u0172\055\u0152\056\u0180\062\u016e\065\u0153\077\u017a\100\u0173" +
    "\111\u016b\115\u0154\116\u0181\117\u016c\121\u0171\127\u016a\137" +
    "\u016f\001\002\000\056\021\uff24\036\uff24\037\uff24\040\uff24" +
    "\041\uff24\045\uff24\046\uff24\047\uff24\051\u0244\055\uff24\056" +
    "\uff24\062\uff24\065\uff24\077\uff24\100\uff24\111\uff24\115\uff24" +
    "\116\uff24\117\uff24\121\uff24\127\uff24\137\uff24\001\002\000" +
    "\054\021\uff27\036\uff27\037\uff27\040\uff27\041\uff27\045\uff27" +
    "\046\uff27\047\uff27\055\uff27\056\uff27\062\uff27\065\uff27\077" +
    "\uff27\100\uff27\111\uff27\115\uff27\116\uff27\117\uff27\121\uff27" +
    "\127\uff27\137\uff27\001\002\000\006\020\u0245\062\u016e\001" +
    "\002\000\046\036\u0155\037\u0176\041\u0150\045\u0169\047\u0172" +
    "\055\u0152\056\u0180\062\u016e\065\u0153\077\u017a\100\u0173\111" +
    "\u016b\115\u0154\116\u0181\117\u016c\121\u0171\127\u016a\137\u016f" +
    "\001\002\000\054\021\uff25\036\uff25\037\uff25\040\uff25\041" +
    "\uff25\045\uff25\046\uff25\047\uff25\055\uff25\056\uff25\062\uff25" +
    "\065\uff25\077\uff25\100\uff25\111\uff25\115\uff25\116\uff25\117" +
    "\uff25\121\uff25\127\uff25\137\uff25\001\002\000\050\021\u0248" +
    "\036\u0155\037\u0176\041\u0150\045\u0169\047\u0172\055\u0152\056" +
    "\u0180\062\u016e\065\u0153\077\u017a\100\u0173\111\u016b\115\u0154" +
    "\116\u0181\117\u016c\121\u0171\127\u016a\137\u016f\001\002\000" +
    "\054\021\uff26\036\uff26\037\uff26\040\uff26\041\uff26\045\uff26" +
    "\046\uff26\047\uff26\055\uff26\056\uff26\062\uff26\065\uff26\077" +
    "\uff26\100\uff26\111\uff26\115\uff26\116\uff26\117\uff26\121\uff26" +
    "\127\uff26\137\uff26\001\002\000\034\004\u0193\005\u019d\016" +
    "\u0196\070\u019e\071\u0195\114\u0191\116\u01a0\121\u0199\137\u0197" +
    "\140\u01a1\141\u019b\142\u0190\143\u019f\001\002\000\010\017" +
    "\u024b\033\u01c3\074\u01c4\001\002\000\004\020\u024c\001\002" +
    "\000\006\040\u024f\046\u024d\001\002\000\004\013\u0256\001" +
    "\002\000\010\021\uff1a\040\uff1a\046\uff1a\001\002\000\034" +
    "\004\u0193\005\u019d\016\u0196\070\u019e\071\u0195\114\u0191\116" +
    "\u01a0\121\u0199\137\u0197\140\u01a1\141\u019b\142\u0190\143\u019f" +
    "\001\002\000\010\021\u0252\040\u024f\046\u024d\001\002\000" +
    "\010\021\uff1b\040\uff1b\046\uff1b\001\002\000\054\021\uff1c" +
    "\036\uff1c\037\uff1c\040\uff1c\041\uff1c\045\uff1c\046\uff1c\047" +
    "\uff1c\055\uff1c\056\uff1c\062\uff1c\065\uff1c\077\uff1c\100\uff1c" +
    "\111\uff1c\115\uff1c\116\uff1c\117\uff1c\121\uff1c\127\uff1c\137" +
    "\uff1c\001\002\000\010\013\u0254\033\u01c3\074\u01c4\001\002" +
    "\000\046\036\u0155\037\u0176\041\u0150\045\u0169\047\u0172\055" +
    "\u0152\056\u0180\062\u016e\065\u0153\077\u017a\100\u0173\111\u016b" +
    "\115\u0154\116\u0181\117\u016c\121\u0171\127\u016a\137\u016f\001" +
    "\002\000\054\021\uff19\036\u0155\037\u0176\040\uff19\041\u0150" +
    "\045\u0169\046\uff19\047\u0172\055\u0152\056\u0180\062\u016e\065" +
    "\u0153\077\u017a\100\u0173\111\u016b\115\u0154\116\u0181\117\u016c" +
    "\121\u0171\127\u016a\137\u016f\001\002\000\046\036\u0155\037" +
    "\u0176\041\u0150\045\u0169\047\u0172\055\u0152\056\u0180\062\u016e" +
    "\065\u0153\077\u017a\100\u0173\111\u016b\115\u0154\116\u0181\117" +
    "\u016c\121\u0171\127\u016a\137\u016f\001\002\000\054\021\uff18" +
    "\036\u0155\037\u0176\040\uff18\041\u0150\045\u0169\046\uff18\047" +
    "\u0172\055\u0152\056\u0180\062\u016e\065\u0153\077\u017a\100\u0173" +
    "\111\u016b\115\u0154\116\u0181\117\u016c\121\u0171\127\u016a\137" +
    "\u016f\001\002\000\010\012\uff2a\033\u01c3\074\u01c4\001\002" +
    "\000\034\004\u0193\005\u019d\016\u0196\070\u019e\071\u0195\114" +
    "\u0191\116\u01a0\121\u0199\137\u0197\140\u01a1\141\u019b\142\u0190" +
    "\143\u019f\001\002\000\010\017\u025b\033\u01c3\074\u01c4\001" +
    "\002\000\004\020\u025c\001\002\000\046\036\u0155\037\u0176" +
    "\041\u0150\045\u0169\047\u0172\055\u0152\056\u0180\062\u016e\065" +
    "\u0153\077\u017a\100\u0173\111\u016b\115\u0154\116\u0181\117\u016c" +
    "\121\u0171\127\u016a\137\u016f\001\002\000\050\021\u025e\036" +
    "\u0155\037\u0176\041\u0150\045\u0169\047\u0172\055\u0152\056\u0180" +
    "\062\u016e\065\u0153\077\u017a\100\u0173\111\u016b\115\u0154\116" +
    "\u0181\117\u016c\121\u0171\127\u016a\137\u016f\001\002\000\054" +
    "\021\uff23\036\uff23\037\uff23\040\uff23\041\uff23\045\uff23\046" +
    "\uff23\047\uff23\055\uff23\056\uff23\062\uff23\065\uff23\077\uff23" +
    "\100\uff23\111\uff23\115\uff23\116\uff23\117\uff23\121\uff23\127" +
    "\uff23\137\uff23\001\002\000\006\022\u0162\137\uff62\001\002" +
    "\000\006\022\u0162\137\uff64\001\002\000\006\022\u0162\137" +
    "\uff65\001\002\000\006\022\u0162\137\uff63\001\002\000\010" +
    "\012\u0264\016\u0159\131\u0267\001\002\000\012\021\uff43\101" +
    "\uff43\104\uff43\105\uff43\001\002\000\012\021\uff41\101\uff41" +
    "\104\uff41\105\uff41\001\002\000\012\021\uff46\101\uff46\104" +
    "\uff46\105\uff46\001\002\000\034\004\u0193\005\u019d\016\u0196" +
    "\070\u019e\071\u0195\114\u0191\116\u01a0\121\u0199\137\u0197\140" +
    "\u01a1\141\u019b\142\u0190\143\u019f\001\002\000\010\012\u0269" +
    "\033\u01c3\074\u01c4\001\002\000\012\021\uff42\101\uff42\104" +
    "\uff42\105\uff42\001\002\000\006\022\u0162\137\uff61\001\002" +
    "\000\020\017\uff3e\036\u0155\041\u0150\055\u0152\065\u0153\115" +
    "\u0154\137\u015d\001\002\000\004\017\u026d\001\002\000\004" +
    "\020\u026e\001\002\000\046\036\u0155\037\u0176\041\u0150\045" +
    "\u0169\047\u0172\055\u0152\056\u0180\062\u016e\065\u0153\077\u017a" +
    "\100\u0173\111\u016b\115\u0154\116\u0181\117\u016c\121\u0171\127" +
    "\u016a\137\u016f\001\002\000\050\021\u0270\036\u0155\037\u0176" +
    "\041\u0150\045\u0169\047\u0172\055\u0152\056\u0180\062\u016e\065" +
    "\u0153\077\u017a\100\u0173\111\u016b\115\u0154\116\u0181\117\u016c" +
    "\121\u0171\127\u016a\137\u016f\001\002\000\012\021\uff44\101" +
    "\uff44\104\uff44\105\uff44\001\002\000\004\020\uff4a\001\002" +
    "\000\004\002\000\001\002\000\024\036\ufec0\041\ufec0\044" +
    "\ufec0\055\ufec0\061\ufec0\065\ufec0\066\ufec0\115\ufec0\126\ufec0" +
    "\001\002\000\024\036\ufebe\041\ufebe\044\ufebe\055\ufebe\061" +
    "\u0275\065\ufebe\066\ufebe\115\ufebe\126\ufebe\001\002\000\004" +
    "\064\u0343\001\002\000\022\036\ufebc\041\ufebc\044\u0277\055" +
    "\ufebc\065\ufebc\066\ufebc\115\ufebc\126\ufebc\001\002\000\014" +
    "\036\u027e\041\u0281\055\u027c\065\u027d\115\u0279\001\002\000" +
    "\020\036\u027e\041\u0281\055\u027c\065\u027d\066\u027a\115\u0279" +
    "\126\u027f\001\002\000\006\034\ufec9\137\ufec9\001\002\000" +
    "\004\015\u032c\001\002\000\006\034\u031f\137\u031e\001\002" +
    "\000\006\034\ufeca\137\ufeca\001\002\000\006\034\ufecc\137" +
    "\ufecc\001\002\000\006\034\ufec8\137\ufec8\001\002\000\004" +
    "\067\u0282\001\002\000\020\036\ufebd\041\ufebd\055\ufebd\065" +
    "\ufebd\066\ufebd\115\ufebd\126\ufebd\001\002\000\006\034\ufecb" +
    "\137\ufecb\001\002\000\004\016\u0283\001\002\000\004\017" +
    "\u0284\001\002\000\004\020\u0285\001\002\000\032\037\u0296" +
    "\043\u028d\045\u0287\047\u0294\051\u0288\056\u029a\060\u0299\062" +
    "\u0292\077\u0298\112\u028c\117\u0291\127\u028b\001\002\000\006" +
    "\021\ufea7\037\ufea7\001\002\000\004\012\u031d\001\002\000" +
    "\006\020\u031a\062\u0292\001\002\000\006\021\ufea9\037\ufea9" +
    "\001\002\000\006\021\ufea5\037\ufea5\001\002\000\004\016" +
    "\u0313\001\002\000\004\016\u030c\001\002\000\004\016\u0309" +
    "\001\002\000\006\021\ufeb1\037\ufeb1\001\002\000\006\021" +
    "\ufea8\037\ufea8\001\002\000\006\021\ufeb2\037\ufeb2\001\002" +
    "\000\004\016\u02f6\001\002\000\004\016\u02ef\001\002\000" +
    "\006\021\ufea4\037\ufea4\001\002\000\004\020\u02e7\001\002" +
    "\000\006\021\ufeb0\037\ufeb0\001\002\000\004\012\u02e6\001" +
    "\002\000\004\021\u02e5\001\002\000\004\016\u02e2\001\002" +
    "\000\004\016\u02df\001\002\000\004\016\u029c\001\002\000" +
    "\006\021\ufea6\037\ufea6\001\002\000\002\001\002\000\004" +
    "\012\u029e\001\002\000\032\004\u02a2\005\u029f\016\u02a9\071" +
    "\u02a7\114\106\116\u02a1\121\u02a6\137\u02a5\140\101\141\076" +
    "\142\074\143\107\001\002\000\030\004\u02a2\005\u029f\016" +
    "\u02a9\114\106\116\u02a1\121\u02a6\137\u02a5\140\101\141\076" +
    "\142\074\143\107\001\002\000\050\004\ufe86\005\ufe86\006" +
    "\ufe86\007\ufe86\011\ufe86\012\ufe86\013\ufe86\014\ufe86\017\ufe86" +
    "\023\ufe86\024\ufe86\025\ufe86\026\ufe86\027\ufe86\033\ufe86\053" +
    "\ufe86\074\ufe86\132\ufe86\134\ufe86\001\002\000\002\001\002" +
    "\000\030\004\u02a2\005\u029f\016\u02a9\114\106\116\u02a1\121" +
    "\u02a6\137\u02a5\140\101\141\076\142\074\143\107\001\002" +
    "\000\010\012\u02d6\033\u02ac\074\u02ad\001\002\000\020\012" +
    "\ufe94\013\ufe94\014\ufe94\017\ufe94\023\ufe94\033\ufe94\074\ufe94" +
    "\001\002\000\052\004\ufe7e\005\ufe7e\006\ufe7e\007\ufe7e\011" +
    "\ufe7e\012\ufe7e\013\ufe7e\014\ufe7e\016\u02cc\017\ufe7e\023\ufe7e" +
    "\024\ufe7e\025\ufe7e\026\ufe7e\027\ufe7e\033\ufe7e\053\ufe7e\074" +
    "\ufe7e\132\ufe7e\134\ufe7e\001\002\000\002\001\002\000\034" +
    "\004\u0193\005\u019d\016\u0196\070\u019e\071\u0195\114\u0191\116" +
    "\u01a0\121\u0199\137\u0197\140\u01a1\141\u019b\142\u0190\143\u019f" +
    "\001\002\000\050\004\u02b5\005\u02b0\006\u02b8\007\u02b6\011" +
    "\u02b9\012\ufe8d\013\ufe8d\014\ufe8d\017\ufe8d\023\ufe8d\024\u02b2" +
    "\025\u02b7\026\u02b1\027\u02bb\033\ufe8d\053\u02ba\074\ufe8d\132" +
    "\u02b4\134\u02b3\001\002\000\032\004\u02a2\005\u029f\016\u02a9" +
    "\071\u02a7\114\106\116\u02a1\121\u02a6\137\u02a5\140\101\141" +
    "\076\142\074\143\107\001\002\000\010\017\u02ab\033\u02ac" +
    "\074\u02ad\001\002\000\050\004\ufe7b\005\ufe7b\006\ufe7b\007" +
    "\ufe7b\011\ufe7b\012\ufe7b\013\ufe7b\014\ufe7b\017\ufe7b\023\ufe7b" +
    "\024\ufe7b\025\ufe7b\026\ufe7b\027\ufe7b\033\ufe7b\053\ufe7b\074" +
    "\ufe7b\132\ufe7b\134\ufe7b\001\002\000\032\004\u02a2\005\u029f" +
    "\016\u02a9\071\u02a7\114\106\116\u02a1\121\u02a6\137\u02a5\140" +
    "\101\141\076\142\074\143\107\001\002\000\032\004\u02a2" +
    "\005\u029f\016\u02a9\071\u02a7\114\106\116\u02a1\121\u02a6\137" +
    "\u02a5\140\101\141\076\142\074\143\107\001\002\000\020" +
    "\012\ufe96\013\ufe96\014\ufe96\017\ufe96\023\ufe96\033\u02ac\074" +
    "\ufe96\001\002\000\020\012\ufe97\013\ufe97\014\ufe97\017\ufe97" +
    "\023\ufe97\033\ufe97\074\ufe97\001\002\000\030\004\u02a2\005" +
    "\u029f\016\u02a9\114\106\116\u02a1\121\u02a6\137\u02a5\140\101" +
    "\141\076\142\074\143\107\001\002\000\030\004\u02a2\005" +
    "\u029f\016\u02a9\114\106\116\u02a1\121\u02a6\137\u02a5\140\101" +
    "\141\076\142\074\143\107\001\002\000\030\004\u02a2\005" +
    "\u029f\016\u02a9\114\106\116\u02a1\121\u02a6\137\u02a5\140\101" +
    "\141\076\142\074\143\107\001\002\000\030\004\u02a2\005" +
    "\u029f\016\u02a9\114\106\116\u02a1\121\u02a6\137\u02a5\140\101" +
    "\141\076\142\074\143\107\001\002\000\030\004\u02a2\005" +
    "\u029f\016\u02a9\114\106\116\u02a1\121\u02a6\137\u02a5\140\101" +
    "\141\076\142\074\143\107\001\002\000\030\004\u02a2\005" +
    "\u029f\016\u02a9\114\106\116\u02a1\121\u02a6\137\u02a5\140\101" +
    "\141\076\142\074\143\107\001\002\000\030\004\u02a2\005" +
    "\u029f\016\u02a9\114\106\116\u02a1\121\u02a6\137\u02a5\140\101" +
    "\141\076\142\074\143\107\001\002\000\030\004\u02a2\005" +
    "\u029f\016\u02a9\114\106\116\u02a1\121\u02a6\137\u02a5\140\101" +
    "\141\076\142\074\143\107\001\002\000\030\004\u02a2\005" +
    "\u029f\016\u02a9\114\106\116\u02a1\121\u02a6\137\u02a5\140\101" +
    "\141\076\142\074\143\107\001\002\000\030\004\u02a2\005" +
    "\u029f\016\u02a9\114\106\116\u02a1\121\u02a6\137\u02a5\140\101" +
    "\141\076\142\074\143\107\001\002\000\030\004\u02a2\005" +
    "\u029f\016\u02a9\114\106\116\u02a1\121\u02a6\137\u02a5\140\101" +
    "\141\076\142\074\143\107\001\002\000\030\004\u02a2\005" +
    "\u029f\016\u02a9\114\106\116\u02a1\121\u02a6\137\u02a5\140\101" +
    "\141\076\142\074\143\107\001\002\000\034\004\u02b5\005" +
    "\u02b0\006\u02b8\007\u02b6\011\u02b9\012\ufe8e\013\ufe8e\014\ufe8e" +
    "\017\ufe8e\023\ufe8e\033\ufe8e\074\ufe8e\134\u02b3\001\002\000" +
    "\034\004\u02b5\005\u02b0\006\u02b8\007\u02b6\011\u02b9\012\ufe93" +
    "\013\ufe93\014\ufe93\017\ufe93\023\ufe93\033\ufe93\074\ufe93\134" +
    "\u02b3\001\002\000\050\004\ufe87\005\ufe87\006\ufe87\007\ufe87" +
    "\011\ufe87\012\ufe87\013\ufe87\014\ufe87\017\ufe87\023\ufe87\024" +
    "\ufe87\025\ufe87\026\ufe87\027\ufe87\033\ufe87\053\ufe87\074\ufe87" +
    "\132\ufe87\134\ufe87\001\002\000\050\004\ufe8a\005\ufe8a\006" +
    "\ufe8a\007\ufe8a\011\u02b9\012\ufe8a\013\ufe8a\014\ufe8a\017\ufe8a" +
    "\023\ufe8a\024\ufe8a\025\ufe8a\026\ufe8a\027\ufe8a\033\ufe8a\053" +
    "\ufe8a\074\ufe8a\132\ufe8a\134\ufe8a\001\002\000\034\004\u02b5" +
    "\005\u02b0\006\u02b8\007\u02b6\011\u02b9\012\ufe90\013\ufe90\014" +
    "\ufe90\017\ufe90\023\ufe90\033\ufe90\074\ufe90\134\u02b3\001\002" +
    "\000\050\004\ufe89\005\ufe89\006\ufe89\007\ufe89\011\u02b9\012" +
    "\ufe89\013\ufe89\014\ufe89\017\ufe89\023\ufe89\024\ufe89\025\ufe89" +
    "\026\ufe89\027\ufe89\033\ufe89\053\ufe89\074\ufe89\132\ufe89\134" +
    "\ufe89\001\002\000\050\004\ufe8c\005\ufe8c\006\u02b8\007\u02b6" +
    "\011\u02b9\012\ufe8c\013\ufe8c\014\ufe8c\017\ufe8c\023\ufe8c\024" +
    "\ufe8c\025\ufe8c\026\ufe8c\027\ufe8c\033\ufe8c\053\ufe8c\074\ufe8c" +
    "\132\ufe8c\134\u02b3\001\002\000\034\004\u02b5\005\u02b0\006" +
    "\u02b8\007\u02b6\011\u02b9\012\ufe92\013\ufe92\014\ufe92\017\ufe92" +
    "\023\ufe92\033\ufe92\074\ufe92\134\u02b3\001\002\000\050\004" +
    "\ufe88\005\ufe88\006\ufe88\007\ufe88\011\u02b9\012\ufe88\013\ufe88" +
    "\014\ufe88\017\ufe88\023\ufe88\024\ufe88\025\ufe88\026\ufe88\027" +
    "\ufe88\033\ufe88\053\ufe88\074\ufe88\132\ufe88\134\ufe88\001\002" +
    "\000\034\004\u02b5\005\u02b0\006\u02b8\007\u02b6\011\u02b9\012" +
    "\ufe91\013\ufe91\014\ufe91\017\ufe91\023\ufe91\033\ufe91\074\ufe91" +
    "\134\u02b3\001\002\000\034\004\u02b5\005\u02b0\006\u02b8\007" +
    "\u02b6\011\u02b9\012\ufe8f\013\ufe8f\014\ufe8f\017\ufe8f\023\ufe8f" +
    "\033\ufe8f\074\ufe8f\134\u02b3\001\002\000\050\004\ufe8b\005" +
    "\ufe8b\006\u02b8\007\u02b6\011\u02b9\012\ufe8b\013\ufe8b\014\ufe8b" +
    "\017\ufe8b\023\ufe8b\024\ufe8b\025\ufe8b\026\ufe8b\027\ufe8b\033" +
    "\ufe8b\053\ufe8b\074\ufe8b\132\ufe8b\134\u02b3\001\002\000\020" +
    "\012\ufe95\013\ufe95\014\ufe95\017\ufe95\023\ufe95\033\ufe95\074" +
    "\ufe95\001\002\000\050\004\ufe7d\005\ufe7d\006\ufe7d\007\ufe7d" +
    "\011\ufe7d\012\ufe7d\013\ufe7d\014\ufe7d\017\ufe7d\023\ufe7d\024" +
    "\ufe7d\025\ufe7d\026\ufe7d\027\ufe7d\033\ufe7d\053\ufe7d\074\ufe7d" +
    "\132\ufe7d\134\ufe7d\001\002\000\050\004\ufe85\005\ufe85\006" +
    "\ufe85\007\ufe85\011\ufe85\012\ufe85\013\ufe85\014\ufe85\017\ufe85" +
    "\023\ufe85\024\ufe85\025\ufe85\026\ufe85\027\ufe85\033\ufe85\053" +
    "\ufe85\074\ufe85\132\ufe85\134\ufe85\001\002\000\050\004\ufe7f" +
    "\005\ufe7f\006\ufe7f\007\ufe7f\011\ufe7f\012\ufe7f\013\ufe7f\014" +
    "\ufe7f\017\ufe7f\023\ufe7f\024\ufe7f\025\ufe7f\026\ufe7f\027\ufe7f" +
    "\033\ufe7f\053\ufe7f\074\ufe7f\132\ufe7f\134\ufe7f\001\002\000" +
    "\034\004\u02a2\005\u029f\016\u02a9\017\u02ce\071\u02a7\114\106" +
    "\116\u02a1\121\u02a6\137\u02a5\140\101\141\076\142\074\143" +
    "\107\001\002\000\012\014\ufec2\017\ufec2\033\u02ac\074\u02ad" +
    "\001\002\000\050\004\ufe82\005\ufe82\006\ufe82\007\ufe82\011" +
    "\ufe82\012\ufe82\013\ufe82\014\ufe82\017\ufe82\023\ufe82\024\ufe82" +
    "\025\ufe82\026\ufe82\027\ufe82\033\ufe82\053\ufe82\074\ufe82\132" +
    "\ufe82\134\ufe82\001\002\000\006\014\u02d0\017\u02d1\001\002" +
    "\000\032\004\u02a2\005\u029f\016\u02a9\071\u02a7\114\106\116" +
    "\u02a1\121\u02a6\137\u02a5\140\101\141\076\142\074\143\107" +
    "\001\002\000\050\004\ufe83\005\ufe83\006\ufe83\007\ufe83\011" +
    "\ufe83\012\ufe83\013\ufe83\014\ufe83\017\ufe83\023\ufe83\024\ufe83" +
    "\025\ufe83\026\ufe83\027\ufe83\033\ufe83\053\ufe83\074\ufe83\132" +
    "\ufe83\134\ufe83\001\002\000\050\004\ufe81\005\ufe81\006\ufe81" +
    "\007\ufe81\011\ufe81\012\ufe81\013\ufe81\014\ufe81\017\ufe81\023" +
    "\ufe81\024\ufe81\025\ufe81\026\ufe81\027\ufe81\033\ufe81\053\ufe81" +
    "\074\ufe81\132\ufe81\134\ufe81\001\002\000\012\014\ufec3\017" +
    "\ufec3\033\u02ac\074\u02ad\001\002\000\050\004\ufe80\005\ufe80" +
    "\006\ufe80\007\ufe80\011\ufe80\012\ufe80\013\ufe80\014\ufe80\017" +
    "\ufe80\023\ufe80\024\ufe80\025\ufe80\026\ufe80\027\ufe80\033\ufe80" +
    "\053\ufe80\074\ufe80\132\ufe80\134\ufe80\001\002\000\050\004" +
    "\ufe84\005\ufe84\006\ufe84\007\ufe84\011\ufe84\012\ufe84\013\ufe84" +
    "\014\ufe84\017\ufe84\023\ufe84\024\ufe84\025\ufe84\026\ufe84\027" +
    "\ufe84\033\ufe84\053\ufe84\074\ufe84\132\ufe84\134\ufe84\001\002" +
    "\000\032\004\u02a2\005\u029f\016\u02a9\071\u02a7\114\106\116" +
    "\u02a1\121\u02a6\137\u02a5\140\101\141\076\142\074\143\107" +
    "\001\002\000\010\017\u02d8\033\u02ac\074\u02ad\001\002\000" +
    "\004\020\u02d9\001\002\000\032\037\u0296\043\u028d\045\u0287" +
    "\047\u0294\051\u0288\056\u029a\060\u0299\062\u0292\077\u0298\112" +
    "\u028c\117\u0291\127\u028b\001\002\000\004\021\u02db\001\002" +
    "\000\006\021\ufe9b\037\ufe9b\001\002\000\050\004\ufe7a\005" +
    "\ufe7a\006\ufe7a\007\ufe7a\011\ufe7a\012\ufe7a\013\ufe7a\014\ufe7a" +
    "\017\ufe7a\023\ufe7a\024\ufe7a\025\ufe7a\026\ufe7a\027\ufe7a\033" +
    "\ufe7a\053\ufe7a\074\ufe7a\132\ufe7a\134\ufe7a\001\002\000\050" +
    "\004\ufe7c\005\ufe7c\006\ufe7c\007\ufe7c\011\ufe7c\012\ufe7c\013" +
    "\ufe7c\014\ufe7c\017\ufe7c\023\ufe7c\024\ufe7c\025\ufe7c\026\ufe7c" +
    "\027\ufe7c\033\ufe7c\053\ufe7c\074\ufe7c\132\ufe7c\134\ufe7c\001" +
    "\002\000\050\004\ufe79\005\ufe79\006\u02b8\007\u02b6\011\u02b9" +
    "\012\ufe79\013\ufe79\014\ufe79\017\ufe79\023\ufe79\024\ufe79\025" +
    "\ufe79\026\ufe79\027\ufe79\033\ufe79\053\ufe79\074\ufe79\132\ufe79" +
    "\134\u02b3\001\002\000\004\017\u02e0\001\002\000\004\012" +
    "\u02e1\001\002\000\006\021\ufeaa\037\ufeaa\001\002\000\032" +
    "\004\u02a2\005\u029f\016\u02a9\071\u02a7\114\106\116\u02a1\121" +
    "\u02a6\137\u02a5\140\101\141\076\142\074\143\107\001\002" +
    "\000\006\014\u02d0\017\u02e4\001\002\000\006\021\ufeac\037" +
    "\ufeac\001\002\000\004\002\ufecd\001\002\000\006\021\ufeaf" +
    "\037\ufeaf\001\002\000\032\037\u0296\043\u028d\045\u0287\047" +
    "\u0294\051\u0288\056\u029a\060\u0299\062\u0292\077\u0298\112\u028c" +
    "\117\u0291\127\u028b\001\002\000\004\021\u02e9\001\002\000" +
    "\004\127\u02ea\001\002\000\004\016\u02eb\001\002\000\032" +
    "\004\u02a2\005\u029f\016\u02a9\071\u02a7\114\106\116\u02a1\121" +
    "\u02a6\137\u02a5\140\101\141\076\142\074\143\107\001\002" +
    "\000\010\017\u02ed\033\u02ac\074\u02ad\001\002\000\004\012" +
    "\u02ee\001\002\000\006\021\ufe99\037\ufe99\001\002\000\032" +
    "\004\u02a2\005\u029f\016\u02a9\071\u02a7\114\106\116\u02a1\121" +
    "\u02a6\137\u02a5\140\101\141\076\142\074\143\107\001\002" +
    "\000\010\017\u02f1\033\u02ac\074\u02ad\001\002\000\004\020" +
    "\u02f2\001\002\000\032\037\u0296\043\u028d\045\u0287\047\u0294" +
    "\051\u0288\056\u029a\060\u0299\062\u0292\077\u0298\112\u028c\117" +
    "\u0291\127\u028b\001\002\000\004\021\u02f4\001\002\000\004" +
    "\051\u0288\001\002\000\006\021\ufea3\037\ufea3\001\002\000" +
    "\032\004\u02a2\005\u029f\016\u02a9\071\u02a7\114\106\116\u02a1" +
    "\121\u02a6\137\u02a5\140\101\141\076\142\074\143\107\001" +
    "\002\000\010\017\u02f8\033\u02ac\074\u02ad\001\002\000\004" +
    "\020\u02f9\001\002\000\006\040\u02fd\046\u02fa\001\002\000" +
    "\004\013\u0305\001\002\000\010\021\ufe9e\040\ufe9e\046\ufe9e" +
    "\001\002\000\010\021\u0304\040\u02fd\046\u02fa\001\002\000" +
    "\032\004\u02a2\005\u029f\016\u02a9\071\u02a7\114\106\116\u02a1" +
    "\121\u02a6\137\u02a5\140\101\141\076\142\074\143\107\001" +
    "\002\000\010\013\u02ff\033\u02ac\074\u02ad\001\002\000\032" +
    "\037\u0296\043\u028d\045\u0287\047\u0294\051\u0288\056\u029a\060" +
    "\u0299\062\u0292\077\u0298\112\u028c\117\u0291\127\u028b\001\002" +
    "\000\004\037\u0301\001\002\000\004\012\u0302\001\002\000" +
    "\010\021\ufe9d\040\ufe9d\046\ufe9d\001\002\000\010\021\ufe9f" +
    "\040\ufe9f\046\ufe9f\001\002\000\006\021\ufea0\037\ufea0\001" +
    "\002\000\032\037\u0296\043\u028d\045\u0287\047\u0294\051\u0288" +
    "\056\u029a\060\u0299\062\u0292\077\u0298\112\u028c\117\u0291\127" +
    "\u028b\001\002\000\004\037\u0307\001\002\000\004\012\u0308" +
    "\001\002\000\010\021\ufe9c\040\ufe9c\046\ufe9c\001\002\000" +
    "\004\017\u030a\001\002\000\004\012\u030b\001\002\000\006" +
    "\021\ufeab\037\ufeab\001\002\000\004\114\u030d\001\002\000" +
    "\004\014\u030e\001\002\000\004\133\u030f\001\002\000\004" +
    "\137\u0310\001\002\000\004\017\u0311\001\002\000\004\012" +
    "\u0312\001\002\000\006\021\ufead\037\ufead\001\002\000\032" +
    "\004\u02a2\005\u029f\016\u02a9\071\u02a7\114\106\116\u02a1\121" +
    "\u02a6\137\u02a5\140\101\141\076\142\074\143\107\001\002" +
    "\000\010\017\u0315\033\u02ac\074\u02ad\001\002\000\004\020" +
    "\u0316\001\002\000\032\037\u0296\043\u028d\045\u0287\047\u0294" +
    "\051\u0288\056\u029a\060\u0299\062\u0292\077\u0298\112\u028c\117" +
    "\u0291\127\u028b\001\002\000\004\021\u0318\001\002\000\006" +
    "\021\ufe9a\037\ufe9a\001\002\000\006\021\ufea2\037\ufea2\001" +
    "\002\000\032\037\u0296\043\u028d\045\u0287\047\u0294\051\u0288" +
    "\056\u029a\060\u0299\062\u0292\077\u0298\112\u028c\117\u0291\127" +
    "\u028b\001\002\000\004\021\u031c\001\002\000\006\021\ufea1" +
    "\037\ufea1\001\002\000\006\021\ufeae\037\ufeae\001\002\000" +
    "\006\012\u0328\131\u0329\001\002\000\004\022\u0320\001\002" +
    "\000\032\004\u02a2\005\u029f\016\u02a9\071\u02a7\114\106\116" +
    "\u02a1\121\u02a6\137\u02a5\140\101\141\076\142\074\143\107" +
    "\001\002\000\006\012\u0322\022\u0323\001\002\000\020\036" +
    "\ufeb9\041\ufeb9\055\ufeb9\065\ufeb9\066\ufeb9\115\ufeb9\126\ufeb9" +
    "\001\002\000\032\004\u02a2\005\u029f\016\u02a9\071\u02a7\114" +
    "\106\116\u02a1\121\u02a6\137\u02a5\140\101\141\076\142\074" +
    "\143\107\001\002\000\010\023\u0325\033\u02ac\074\u02ad\001" +
    "\002\000\006\012\ufec7\022\ufec7\001\002\000\010\023\u0327" +
    "\033\u02ac\074\u02ad\001\002\000\006\012\ufec6\022\ufec6\001" +
    "\002\000\020\036\ufebb\041\ufebb\055\ufebb\065\ufebb\066\ufebb" +
    "\115\ufebb\126\ufebb\001\002\000\032\004\u02a2\005\u029f\016" +
    "\u02a9\071\u02a7\114\106\116\u02a1\121\u02a6\137\u02a5\140\101" +
    "\141\076\142\074\143\107\001\002\000\010\012\u032b\033" +
    "\u02ac\074\u02ad\001\002\000\020\036\ufeba\041\ufeba\055\ufeba" +
    "\065\ufeba\066\ufeba\115\ufeba\126\ufeba\001\002\000\004\137" +
    "\u032d\001\002\000\006\034\u0331\137\u032e\001\002\000\004" +
    "\016\u0337\001\002\000\004\012\u0336\001\002\000\006\012" +
    "\ufeb5\014\u0334\001\002\000\004\022\u0320\001\002\000\006" +
    "\012\u0333\022\u0323\001\002\000\020\036\ufeb7\041\ufeb7\055" +
    "\ufeb7\065\ufeb7\066\ufeb7\115\ufeb7\126\ufeb7\001\002\000\004" +
    "\137\u032e\001\002\000\004\012\ufeb6\001\002\000\020\036" +
    "\ufeb8\041\ufeb8\055\ufeb8\065\ufeb8\066\ufeb8\115\ufeb8\126\ufeb8" +
    "\001\002\000\034\004\u02a2\005\u029f\016\u02a9\017\u0339\071" +
    "\u02a7\114\106\116\u02a1\121\u02a6\137\u02a5\140\101\141\076" +
    "\142\074\143\107\001\002\000\012\014\u033c\017\ufec4\033" +
    "\u02ac\074\u02ad\001\002\000\006\012\ufeb4\014\ufeb4\001\002" +
    "\000\004\017\u033b\001\002\000\006\012\ufeb3\014\ufeb3\001" +
    "\002\000\032\004\u02a2\005\u029f\016\u02a9\071\u02a7\114\106" +
    "\116\u02a1\121\u02a6\137\u02a5\140\101\141\076\142\074\143" +
    "\107\001\002\000\004\017\ufec5\001\002\000\004\137\u033f" +
    "\001\002\000\004\131\u0340\001\002\000\014\114\106\140" +
    "\101\141\076\142\074\143\107\001\002\000\004\012\u0342" +
    "\001\002\000\022\036\ufebf\041\ufebf\044\ufebf\055\ufebf\065" +
    "\ufebf\066\ufebf\115\ufebf\126\ufebf\001\002\000\004\114\u0344" +
    "\001\002\000\024\036\ufec1\041\ufec1\044\ufec1\055\ufec1\061" +
    "\ufec1\065\ufec1\066\ufec1\115\ufec1\126\ufec1\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0343\000\006\002\003\004\004\001\001\000\002\001" +
    "\001\000\004\060\u013d\001\001\000\012\005\007\010\011" +
    "\011\010\050\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\u013c\001\001\000\010\006\u012e\007\u0130" +
    "\051\u012f\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\020\052\021\053\017\001\001\000\002\001\001" +
    "\000\004\012\u012a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\020\053\u0127\001\001" +
    "\000\002\001\001\000\004\013\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\037\001\001\000\010\012\u0101" +
    "\014\377\016\u0102\001\001\000\002\001\001\000\030\023" +
    "\061\030\046\031\052\033\047\035\060\042\044\043\062" +
    "\044\042\045\041\047\054\055\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\023\061\030\323" +
    "\031\324\034\325\042\044\043\062\044\042\045\041\047" +
    "\054\055\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\023\061\030\236\031\241\037\237" +
    "\042\044\043\062\044\042\045\041\047\054\055\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\023\061" +
    "\030\065\031\067\036\070\042\044\043\062\044\042\045" +
    "\041\047\054\055\057\001\001\000\002\001\001\000\030" +
    "\023\061\030\046\031\052\033\047\035\210\042\044\043" +
    "\062\044\042\045\041\047\054\055\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\101\020\104\021" +
    "\076\022\074\001\001\000\006\021\206\022\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\170\022\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\141\020\104\021\076\022\074\001\001\000" +
    "\012\017\111\020\104\021\076\022\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\137\020\104\021\076\022\074\001\001\000\012\017\133" +
    "\020\104\021\076\022\074\001\001\000\002\001\001\000" +
    "\012\017\135\020\104\021\076\022\074\001\001\000\002" +
    "\001\001\000\012\017\140\020\104\021\076\022\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\152\022\074\001\001\000\014\017\144\020" +
    "\104\021\076\022\074\024\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\151\020" +
    "\104\021\076\022\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\167\022\074\001\001\000\006\021\166\022\074\001\001" +
    "\000\006\021\165\022\074\001\001\000\006\021\164\022" +
    "\074\001\001\000\006\021\163\022\074\001\001\000\006" +
    "\021\162\022\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\205\022\074\001\001\000\006\021\204\022\074" +
    "\001\001\000\006\021\203\022\074\001\001\000\006\021" +
    "\202\022\074\001\001\000\006\021\201\022\074\001\001" +
    "\000\006\021\200\022\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\231\020" +
    "\104\021\076\022\074\001\001\000\012\017\217\020\104" +
    "\021\076\022\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\017\222\020\104\021\076\022\074\001\001" +
    "\000\002\001\001\000\026\023\061\030\065\031\067\036" +
    "\224\042\044\043\062\044\042\045\041\047\054\055\057" +
    "\001\001\000\002\001\001\000\012\017\226\020\104\021" +
    "\076\022\074\001\001\000\002\001\001\000\026\023\061" +
    "\030\065\031\067\036\230\042\044\043\062\044\042\045" +
    "\041\047\054\055\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\233\020\104\021\076\022\074\001" +
    "\001\000\002\001\001\000\026\023\061\030\065\031\067" +
    "\036\235\042\044\043\062\044\042\045\041\047\054\055" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\023\061\030\046\031\052\033\047\035" +
    "\242\042\044\043\062\044\042\045\041\047\054\055\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\023\061\030\252\032\254" +
    "\042\250\043\257\044\246\045\247\046\251\047\054\054" +
    "\253\055\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\023\061\030\046" +
    "\031\052\033\047\035\260\042\044\043\062\044\042\045" +
    "\041\047\054\055\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\266" +
    "\020\104\021\076\022\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\017\273\020\104\021\076\022\074" +
    "\025\272\056\271\001\001\000\014\017\273\020\104\021" +
    "\076\022\074\025\306\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\305\020\104\021\076\022\074\001" +
    "\001\000\026\023\061\030\277\031\301\040\276\042\044" +
    "\043\062\044\042\045\041\047\054\055\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\023\061\030\046" +
    "\031\052\033\047\035\302\042\044\043\062\044\042\045" +
    "\041\047\054\055\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\023\061\030\310\031\312" +
    "\041\313\042\044\043\062\044\042\045\041\047\054\055" +
    "\057\001\001\000\002\001\001\000\030\023\061\030\046" +
    "\031\052\033\047\035\316\042\044\043\062\044\042\045" +
    "\041\047\054\055\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\023\061\030\277\031\301" +
    "\040\321\042\044\043\062\044\042\045\041\047\054\055" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\023\061\030\323\031\324\034\326\042" +
    "\044\043\062\044\042\045\041\047\054\055\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\023\061\030" +
    "\323\031\324\034\331\042\044\043\062\044\042\045\041" +
    "\047\054\055\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\017\341\020\104\021\076\022\074\001\001" +
    "\000\012\017\340\020\104\021\076\022\074\001\001\000" +
    "\014\017\144\020\104\021\076\022\074\024\336\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\344\020\104\021\076\022\074\001\001\000\002\001" +
    "\001\000\012\017\357\020\104\021\076\022\074\001\001" +
    "\000\012\017\347\020\104\021\076\022\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\023\061\030\323\031\324\034\365\042\044\043\062" +
    "\044\042\045\041\047\054\055\057\001\001\000\002\001" +
    "\001\000\012\017\367\020\104\021\076\022\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\023\061\030\065\031\067\036\373\042\044\043\062" +
    "\044\042\045\041\047\054\055\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\023\061\030\065\031\067" +
    "\036\376\042\044\043\062\044\042\045\041\047\054\055" +
    "\057\001\001\000\002\001\001\000\006\012\u0101\016\u0123" +
    "\001\001\000\006\012\u0101\016\u0122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\u0101" +
    "\016\u0105\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\013\u0115\017\u0117\020\104\021\076\022\074\026\u0116" +
    "\001\001\000\004\013\u010a\001\001\000\004\027\u010b\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\u010d" +
    "\020\104\021\076\022\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\u0110\020\104\021\076\022\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u0113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\u011a\001\001\000\002\001\001\000\004" +
    "\013\u011c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\u0120\020\104\021\076\022\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\u0101" +
    "\016\u0126\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u0129\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u012c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\u0131" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\020\052\u0134\053\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\u0137\001\001\000\002\001\001\000" +
    "\030\023\061\030\046\031\052\033\047\035\u0139\042\044" +
    "\043\062\044\042\045\041\047\054\055\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\u0271\001\001\000\004\061\u013f\001" +
    "\001\000\004\062\u0140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\064\u0145\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\u0147\001\001" +
    "\000\006\063\u0148\066\u014a\001\001\000\004\100\u0150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\057\u0162\101" +
    "\u0160\001\001\000\006\057\u0162\101\u0269\001\001\000\002" +
    "\001\001\000\006\057\u0162\101\u0261\001\001\000\006\057" +
    "\u0162\101\u0260\001\001\000\006\057\u0162\101\u025f\001\001" +
    "\000\006\057\u0162\101\u025e\001\001\000\002\001\001\000" +
    "\004\077\u0157\001\001\000\002\001\001\000\012\070\u015a" +
    "\071\u015d\100\u015b\102\u0159\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\057\u0162\101\u0160" +
    "\001\001\000\002\001\001\000\006\100\u015b\102\u015f\001" +
    "\001\000\002\001\001\000\004\057\u0164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\072\u0173" +
    "\073\u016c\075\u017d\076\u017a\100\u0174\103\u016f\104\u0181\105" +
    "\u017c\106\u0178\111\u0177\113\u017e\122\u0182\125\u017b\126\u0183" +
    "\127\u0176\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\114\u019b\115\u01a1\116\u0199\117\u0257\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\057" +
    "\u0162\101\u0160\121\u0218\123\u021a\001\001\000\002\001\001" +
    "\000\004\123\u01eb\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\073\u01fa\075\u017d\076\u017a\100\u0174\103\u016f" +
    "\104\u0181\105\u017c\106\u0178\111\u0177\113\u017e\122\u0182\125" +
    "\u017b\126\u0183\127\u0176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\123\u0186\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\114\u019b\115\u01a1" +
    "\116\u0199\117\u0191\120\u01de\001\001\000\004\124\u018a\001" +
    "\001\000\004\121\u018c\001\001\000\004\123\u018b\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\114\u019b\115" +
    "\u01a1\116\u0199\117\u01db\001\001\000\014\114\u019b\115\u01a1" +
    "\116\u0199\117\u0191\120\u0197\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\114\u019b\115\u01da" +
    "\001\001\000\004\121\u01d9\001\001\000\012\114\u019b\115" +
    "\u01a1\116\u0199\117\u01d8\001\001\000\012\114\u019b\115\u01a1" +
    "\116\u0199\117\u01d6\001\001\000\006\121\u01ce\123\u01cd\001" +
    "\001\000\002\001\001\000\004\123\u01c7\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\114" +
    "\u019b\115\u01c6\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\123\u01ba\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\114\u019b\115\u01b9\001\001\000\006\114\u019b" +
    "\115\u01b8\001\001\000\006\114\u019b\115\u01b7\001\001\000" +
    "\006\114\u019b\115\u01b6\001\001\000\006\114\u019b\115\u01b5" +
    "\001\001\000\006\114\u019b\115\u01b4\001\001\000\006\114" +
    "\u019b\115\u01b3\001\001\000\006\114\u019b\115\u01b2\001\001" +
    "\000\006\114\u019b\115\u01b1\001\001\000\006\114\u019b\115" +
    "\u01b0\001\001\000\006\114\u019b\115\u01af\001\001\000\006" +
    "\114\u019b\115\u01ae\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\114" +
    "\u019b\115\u01a1\116\u0199\117\u0191\120\u01be\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\114\u019b\115\u01a1\116" +
    "\u0199\117\u01c1\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\114\u019b\115\u01a1\116\u0199\117\u01c5\001\001\000" +
    "\012\114\u019b\115\u01a1\116\u0199\117\u01c4\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u01c9\001\001\000\002\001\001\000\012" +
    "\114\u019b\115\u01a1\116\u0199\117\u01cb\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\123\u01d5" +
    "\001\001\000\014\114\u019b\115\u01a1\116\u0199\117\u0191\120" +
    "\u01d1\001\001\000\004\123\u01d4\001\001\000\002\001\001" +
    "\000\004\123\u01d3\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\114" +
    "\u019b\115\u01a1\116\u0199\117\u01e2\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\074\u01e6\100\u0174\113\u01e7\125" +
    "\u01ea\126\u01e9\001\001\000\004\123\u0186\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\123\u01eb\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\114\u019b\115\u01a1\116" +
    "\u0199\117\u01ef\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\114\u019b\115\u01a1\116\u0199\117" +
    "\u01f3\001\001\000\002\001\001\000\014\074\u01f5\100\u0174" +
    "\113\u01e7\125\u01ea\126\u01e9\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\072\u01f8\073\u016c\075\u017d\076\u017a" +
    "\100\u0174\103\u016f\104\u0181\105\u017c\106\u0178\111\u0177\113" +
    "\u017e\122\u0182\125\u017b\126\u0183\127\u0176\001\001\000\036" +
    "\073\u01fa\075\u017d\076\u017a\100\u0174\103\u016f\104\u0181\105" +
    "\u017c\106\u0178\111\u0177\113\u017e\122\u0182\125\u017b\126\u0183" +
    "\127\u0176\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\114\u019b\115\u01a1\116\u0199\117\u0191\120\u01ff\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\114\u019b\115\u01a1\116\u0199\117\u0204\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\114\u019b" +
    "\115\u01a1\116\u0199\117\u0191\120\u0207\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\072\u020a\073\u016c\075\u017d" +
    "\076\u017a\100\u0174\103\u016f\104\u0181\105\u017c\106\u0178\111" +
    "\u0177\113\u017e\122\u0182\125\u017b\126\u0183\127\u0176\001\001" +
    "\000\036\073\u01fa\075\u017d\076\u017a\100\u0174\103\u016f\104" +
    "\u0181\105\u017c\106\u0178\111\u0177\113\u017e\122\u0182\125\u017b" +
    "\126\u0183\127\u0176\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\114\u019b\115\u01a1\116\u0199\117\u020e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\114\u019b\115\u01a1\116\u0199\117\u0191\120\u0213\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\114\u019b\115\u01a1" +
    "\116\u0199\117\u0239\001\001\000\004\123\u0231\001\001\000" +
    "\012\114\u019b\115\u01a1\116\u0199\117\u01db\001\001\000\002" +
    "\001\001\000\014\114\u019b\115\u01a1\116\u0199\117\u0191\120" +
    "\u021d\001\001\000\004\123\u0226\001\001\000\002\001\001" +
    "\000\004\123\u021f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\114\u019b\115\u01a1\116\u0199" +
    "\117\u0223\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\114\u019b\115\u01a1\116\u0199\117\u022b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\114\u019b\115\u01a1\116\u0199\117" +
    "\u022f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\114\u019b\115\u01a1\116" +
    "\u0199\117\u0236\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\114\u019b\115\u01a1\116\u0199\117\u023d\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\072\u0240\073\u016c\075\u017d" +
    "\076\u017a\100\u0174\103\u016f\104\u0181\105\u017c\106\u0178\111" +
    "\u0177\113\u017e\122\u0182\125\u017b\126\u0183\127\u0176\001\001" +
    "\000\036\073\u01fa\075\u017d\076\u017a\100\u0174\103\u016f\104" +
    "\u0181\105\u017c\106\u0178\111\u0177\113\u017e\122\u0182\125\u017b" +
    "\126\u0183\127\u0176\001\001\000\004\112\u0242\001\001\000" +
    "\002\001\001\000\004\111\u0245\001\001\000\040\072\u0246" +
    "\073\u016c\075\u017d\076\u017a\100\u0174\103\u016f\104\u0181\105" +
    "\u017c\106\u0178\111\u0177\113\u017e\122\u0182\125\u017b\126\u0183" +
    "\127\u0176\001\001\000\002\001\001\000\036\073\u01fa\075" +
    "\u017d\076\u017a\100\u0174\103\u016f\104\u0181\105\u017c\106\u0178" +
    "\111\u0177\113\u017e\122\u0182\125\u017b\126\u0183\127\u0176\001" +
    "\001\000\002\001\001\000\012\114\u019b\115\u01a1\116\u0199" +
    "\117\u0249\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\107\u024f\110\u024d\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\114\u019b\115\u01a1\116\u0199\117\u0252\001" +
    "\001\000\004\110\u0250\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\072\u0254\073\u016c\075" +
    "\u017d\076\u017a\100\u0174\103\u016f\104\u0181\105\u017c\106\u0178" +
    "\111\u0177\113\u017e\122\u0182\125\u017b\126\u0183\127\u0176\001" +
    "\001\000\036\073\u01fa\075\u017d\076\u017a\100\u0174\103\u016f" +
    "\104\u0181\105\u017c\106\u0178\111\u0177\113\u017e\122\u0182\125" +
    "\u017b\126\u0183\127\u0176\001\001\000\040\072\u0256\073\u016c" +
    "\075\u017d\076\u017a\100\u0174\103\u016f\104\u0181\105\u017c\106" +
    "\u0178\111\u0177\113\u017e\122\u0182\125\u017b\126\u0183\127\u0176" +
    "\001\001\000\036\073\u01fa\075\u017d\076\u017a\100\u0174\103" +
    "\u016f\104\u0181\105\u017c\106\u0178\111\u0177\113\u017e\122\u0182" +
    "\125\u017b\126\u0183\127\u0176\001\001\000\002\001\001\000" +
    "\012\114\u019b\115\u01a1\116\u0199\117\u0259\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\072\u025c\073\u016c\075" +
    "\u017d\076\u017a\100\u0174\103\u016f\104\u0181\105\u017c\106\u0178" +
    "\111\u0177\113\u017e\122\u0182\125\u017b\126\u0183\127\u0176\001" +
    "\001\000\036\073\u01fa\075\u017d\076\u017a\100\u0174\103\u016f" +
    "\104\u0181\105\u017c\106\u0178\111\u0177\113\u017e\122\u0182\125" +
    "\u017b\126\u0183\127\u0176\001\001\000\002\001\001\000\004" +
    "\057\u0164\001\001\000\004\057\u0164\001\001\000\004\057" +
    "\u0164\001\001\000\004\057\u0164\001\001\000\006\067\u0265" +
    "\077\u0264\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\114\u019b\115\u01a1\116\u0199\117\u0267" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\u0164\001\001\000\012\070\u026b\071\u015d\100\u015b\102\u0159" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\072" +
    "\u026e\073\u016c\075\u017d\076\u017a\100\u0174\103\u016f\104\u0181" +
    "\105\u017c\106\u0178\111\u0177\113\u017e\122\u0182\125\u017b\126" +
    "\u0183\127\u0176\001\001\000\036\073\u01fa\075\u017d\076\u017a" +
    "\100\u0174\103\u016f\104\u0181\105\u017c\106\u0178\111\u0177\113" +
    "\u017e\122\u0182\125\u017b\126\u0183\127\u0176\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\136" +
    "\u0273\001\001\000\004\137\u0275\001\001\000\002\001\001" +
    "\000\004\140\u0277\001\001\000\004\130\u033d\001\001\000" +
    "\006\130\u027a\141\u027f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\144\u0296\145\u028d\146\u0294\147\u028f" +
    "\150\u0288\151\u028e\152\u0285\155\u029a\156\u0289\157\u0292\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\150\u0318" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\164\u029c\001\001\000\002\001\001\000\012\022" +
    "\u029f\161\u02a2\162\u02a3\163\u02a7\001\001\000\006\022\u029f" +
    "\163\u02dd\001\001\000\002\001\001\000\004\133\u02dc\001" +
    "\001\000\006\022\u029f\163\u02db\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\132\u02c9\133\u02ca\001\001\000" +
    "\004\133\u02c8\001\001\000\012\114\u019b\115\u01a1\116\u0199" +
    "\117\u02c7\001\001\000\002\001\001\000\012\022\u029f\161" +
    "\u02a9\162\u02a3\163\u02a7\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\022\u029f\161\u02ae\162\u02a3\163\u02a7\001" +
    "\001\000\012\022\u029f\161\u02ad\162\u02a3\163\u02a7\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\u029f\163" +
    "\u02c6\001\001\000\006\022\u029f\163\u02c5\001\001\000\006" +
    "\022\u029f\163\u02c4\001\001\000\006\022\u029f\163\u02c3\001" +
    "\001\000\006\022\u029f\163\u02c2\001\001\000\006\022\u029f" +
    "\163\u02c1\001\001\000\006\022\u029f\163\u02c0\001\001\000" +
    "\006\022\u029f\163\u02bf\001\001\000\006\022\u029f\163\u02be" +
    "\001\001\000\006\022\u029f\163\u02bd\001\001\000\006\022" +
    "\u029f\163\u02bc\001\001\000\006\022\u029f\163\u02bb\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\133\u02d4\001\001\000\002\001" +
    "\001\000\014\022\u029f\135\u02ce\161\u02cc\162\u02a3\163\u02a7" +
    "\001\001\000\002\001\001\000\004\133\u02d3\001\001\000" +
    "\002\001\001\000\012\022\u029f\161\u02d2\162\u02a3\163\u02a7" +
    "\001\001\000\004\133\u02d1\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\022\u029f\161\u02d6\162\u02a3\163\u02a7\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\144\u02d9\145\u028d\146\u0294" +
    "\147\u028f\150\u0288\151\u028e\152\u0285\155\u029a\156\u0289\157" +
    "\u0292\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\022\u029f" +
    "\135\u02e2\161\u02cc\162\u02a3\163\u02a7\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\144\u02e7\145\u028d\146\u0294\147\u028f\150\u0288\151" +
    "\u028e\152\u0285\155\u029a\156\u0289\157\u0292\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\022" +
    "\u029f\161\u02eb\162\u02a3\163\u02a7\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\022\u029f\161" +
    "\u02ef\162\u02a3\163\u02a7\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\144\u02f2\145\u028d\146\u0294\147\u028f\150" +
    "\u0288\151\u028e\152\u0285\155\u029a\156\u0289\157\u0292\001\001" +
    "\000\002\001\001\000\004\151\u02f4\001\001\000\002\001" +
    "\001\000\012\022\u029f\161\u02f6\162\u02a3\163\u02a7\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\153\u02fb\154" +
    "\u02fa\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\154\u0302\001\001\000\012\022\u029f\161\u02fd\162\u02a3\163" +
    "\u02a7\001\001\000\002\001\001\000\026\144\u02ff\145\u028d" +
    "\146\u0294\147\u028f\150\u0288\151\u028e\152\u0285\155\u029a\156" +
    "\u0289\157\u0292\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\144\u0305\145\u028d\146\u0294\147\u028f\150\u0288\151\u028e" +
    "\152\u0285\155\u029a\156\u0289\157\u0292\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\022" +
    "\u029f\161\u0313\162\u02a3\163\u02a7\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\144\u0316\145\u028d\146\u0294\147" +
    "\u028f\150\u0288\151\u028e\152\u0285\155\u029a\156\u0289\157\u0292" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\144\u031a\145\u028d\146\u0294\147\u028f\150\u0288" +
    "\151\u028e\152\u0285\155\u029a\156\u0289\157\u0292\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\131\u0320\001\001\000\012\022\u029f\161" +
    "\u0325\162\u02a3\163\u02a7\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\022\u029f\161\u0323\162\u02a3\163\u02a7\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\022\u029f\161" +
    "\u0329\162\u02a3\163\u02a7\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\142\u032e\143\u032f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\131\u0331\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\142\u0334\143\u032f\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\022\u029f\134\u0339\161\u0337\162" +
    "\u02a3\163\u02a7\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\022\u029f\134" +
    "\u033c\161\u0337\162\u02a3\163\u02a7\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\u0340\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //fields
    Lexer lex;
    private List<String> syntaxErrors;
    private GenTypeTab genTypeTab;
    private AstGen astGen;
    private Analyzator analyzator;

    //conect the parser with the lexer
    public Parser(Lexer lex, Analyzator analyzator){
        super(lex);
        syntaxErrors = new LinkedList<>();
        genTypeTab = new GenTypeTab();
        astGen = new AstGen();
        this.analyzator = analyzator;
    }

    //getters
    public Lexer getLexer(){
        return this.lex;
    }
    public List<String> getSyntaxErrors(){
        return this.syntaxErrors;
    }
    
    /*SOBREESCRIBIR LOS METODOS DE ERROR*/
    public void syntax_error(Symbol cur_token) {
        StringBuilder mssBuilder = new StringBuilder("Simbolo: ");
        mssBuilder.append(symbl_name_from_id(cur_token.sym));
        
        if(cur_token.value != null){
            mssBuilder.append(", lexema <");
            mssBuilder.append(cur_token.value.toString());
            mssBuilder.append(">");
        }
        mssBuilder.append(", linea: ");
        mssBuilder.append(cur_token.left);
        mssBuilder.append(", columna: ");
        mssBuilder.append(cur_token.right);
        
        if (expected_token_ids().isEmpty()) {
            mssBuilder.append(" -- ya no se esperaba ningun simbolo");
        } else {
            mssBuilder.append(" -- Se esperaba [");
            for (Integer expected_token_id : expected_token_ids()) {
                if(!symbl_name_from_id(expected_token_id).equals("error")){
                    mssBuilder.append(symbl_name_from_id(expected_token_id));
                    mssBuilder.append(" ");
                }
                
            }
            mssBuilder.append("]");
        }
        syntaxErrors.add(mssBuilder.toString());
    }
    
    public void report_error(String message, Object info){
        try{
            Symbol cur_token = (Symbol) info;
            StringBuilder mssBuilder = new StringBuilder("Simbolo: ");
            mssBuilder.append(symbl_name_from_id(cur_token.sym));
            mssBuilder.append(", linea: ");
            mssBuilder.append(cur_token.left);
            mssBuilder.append(", columna: ");
            mssBuilder.append(cur_token.right);
            if(cur_token != null){
                mssBuilder.append(", Lexema: ");
                mssBuilder.append(cur_token.value);
            }

            if(message != null){
                mssBuilder.append(", Info: ");
                mssBuilder.append(message);
            }
            
            syntaxErrors.add(mssBuilder.toString());
        } catch (Exception e){
            syntaxErrors.add(message);
        }
    }


    public void unrecovered_syntax_error(Symbol cur_token) {
        syntaxErrors.add("Errores de sintaxis severos detectados, revisa municiosamente el codigo");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= pascal_block java_block main_program 
            {
              Object RESULT =null;
		int pbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DefAst> pb = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int jbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int jbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JClass> jb = (List<JClass>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                analyzator.pascalSemanticAnalysis(pb);
                analyzator.javaSemanticAnalysis(jb);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // pascal_block ::= PASCAL_SECTION pcontent 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pascal_block",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // pcontent ::= functions_b procedure_b 
            {
              List<DefAst> RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> lf = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> lp = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(lf != null && lp != null){
                    lf.addAll(lp);
                    RESULT = lf;
                } else if (lf != null){
                    RESULT = lf;
                } else if (lp != null){
                    RESULT = lp;
                } else {
                    RESULT = new LinkedList<>();
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pcontent",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // var_type ::= INT_TKN 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.IntegerPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // var_type ::= FLOAT_TKN 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.RealPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_type ::= BOOLEAN_TKN 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.BooleanPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_type ::= CHAR_TKN 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.CharPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_type ::= STRING_TKN 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.StringPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_type ::= ID 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            t, 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_type ::= error 
            {
              Label RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // id_list ::= id_list COMMA ID 
            {
              List<Label> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(l != null){
                            l.add(new Label(i, new Position(ileft, iright)));
                        } else {
                            l = new ArrayList<>();
                        }
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // id_list ::= ID 
            {
              List<Label> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        List<Label> list = new ArrayList<>();
                        list.add(new Label(i, new Position(ileft, iright)));
                        RESULT = list;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // range ::= expression DOT DOT DOT expression 
            {
              Range RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Range(e1, e2);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arr_range ::= LBRACK expression DOT DOT expression RBRACK 
            {
              Range RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                         RESULT = new Range(e1, e2);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr_range",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression_list ::= expression_list COMMA expression 
            {
              List<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(l != null){
                            l.add(e);
                        } else {
                            l = new LinkedList<>();
                        }
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression_list ::= expression 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        LinkedList<Expression> list = new LinkedList<Expression>();
                        list.add(e);
                        RESULT = list;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_b ::= VAR list_vardec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_b",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_b ::= 
            {
              List<DefAst> RESULT =null;
		
                        RESULT = new LinkedList<DefAst>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_b",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // list_vardec ::= list_vardec var_dec SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> dl = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        try{
                            l.addAll(dl);
                        } catch (NullPointerException e){}    
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // list_vardec ::= var_dec SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // list_vardec ::= list_vardec var_dec error var_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DefAst> dl = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        try{
                            l.addAll(dl);
                        } catch (NullPointerException e){}    
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // list_vardec ::= error var_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // list_vardec ::= var_dec error var_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // var_dec ::= id_list COLON var_type 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = genTypeTab.userDef(l, t);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // var_dec ::= id_list COLON ARRAY arr_range OF var_type 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = genTypeTab.arrayDef(l, t, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // var_dec ::= id_list error var_type 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = genTypeTab.userDef(l, t);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var_dec ::= id_list error range 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = genTypeTab.rangeDef(l, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var_dec ::= id_list error ARRAY arr_range OF var_type 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = genTypeTab.arrayDef(l, t, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.And, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= expression AND THEN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.AndThen, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Or, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= expression OR ELSE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.OrElse, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= NOT expression 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Not,
                            e,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= bool_exp 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bool_exp ::= arit_exp EQUALS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.EqualsTo, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bool_exp ::= arit_exp DIFFERENT arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.DifferentTo, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bool_exp ::= arit_exp GRATER arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.GraterThan, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bool_exp ::= arit_exp LESS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.LessThan, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bool_exp ::= arit_exp GRATER_EQUALS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.GraterEq, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bool_exp ::= arit_exp LESS_EQUALS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.LessEq, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bool_exp ::= arit_exp 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arit_exp ::= error PLUS error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arit_exp ::= error MINUS error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arit_exp ::= error TIMES error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arit_exp ::= error DIV error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arit_exp ::= error BARRA error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arit_exp ::= error MOD error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arit_exp ::= arit_exp PLUS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Addition, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arit_exp ::= arit_exp MINUS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Substraction, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arit_exp ::= arit_exp TIMES arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Multiplication, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arit_exp ::= arit_exp DIV arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Division, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arit_exp ::= arit_exp MOD arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Module, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arit_exp ::= arit_exp POWER arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Power, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arit_exp ::= literals 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arit_exp ::= ID LBRACK arit_exp RBRACK 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new VectorUse(
                            i, e, new Position(ileft, iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arit_exp ::= ID LPAREN expression_list RPAREN 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new FunctionUse(
                            i, l, new Position(ileft, iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arit_exp ::= ID LPAREN RPAREN 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = new FunctionUse(
                            i, new Position(ileft, iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arit_exp ::= ID 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            i, new Position(ileft,iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arit_exp ::= LPAREN expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // arit_exp ::= PLUS arit_exp 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Addition,
                            e,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arit_exp ::= MINUS arit_exp 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Substraction,
                            e,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arit_exp ::= LPAREN error RPAREN 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arit_exp ::= MINUS error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arit_exp ::= PLUS error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // literals ::= BOOLEAN_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		boolean l = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.BooleanPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // literals ::= INTEGER_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.IntegerPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // literals ::= FLOAT_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		float l = (float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.RealPT, 
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // literals ::= CHAR_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character l = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.CharPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // literals ::= STRING_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.StringPT, 
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // conditional ::= if_stmt block_cond 
            {
              PassIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InitIf i = (InitIf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new PassIf(new IfAst(
                        i.getExpression(), 
                        ls, 
                        i.getPosition()
                    ));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // conditional ::= if_stmt block_cond SEMICOLON 
            {
              PassIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		InitIf i = (InitIf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new PassIf(new IfAst(
                        i.getExpression(), 
                        ls,
                        i.getPosition()
                    ));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // conditional ::= if_stmt block_cond ELSE elif 
            {
              PassIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		InitIf i = (InitIf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PassIf pi = (PassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    if(pi.getElseAst() != null && pi.getElseAst().getInitPos() == null){
                        pi.getElseAst().setInitPos(
                            new Position(eleft, eright)
                        );
                    }
                    RESULT = astGen.genPassIf(
                        pi, 
                        new IfAst(i.getExpression(), ls, i.getPosition())
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // if_stmt ::= IF LPAREN expression RPAREN THEN 
            {
              InitIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                    RESULT = new InitIf(e, new Position(ileft, iright));     
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // if_stmt ::= IF LPAREN error RPAREN THEN 
            {
              InitIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		  
                    RESULT = new InitIf(null, new Position(ileft, iright));     
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // if_stmt ::= IF LPAREN expression error THEN 
            {
              InitIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                    RESULT = new InitIf(e, new Position(ileft, iright));     
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // if_stmt ::= IF error expression RPAREN THEN 
            {
              InitIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                    RESULT = new InitIf(e, new Position(ileft, iright));     
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // if_stmt ::= IF error expression error THEN 
            {
              InitIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                    RESULT = new InitIf(e, new Position(ileft, iright));     
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // block_cond ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_cond",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // block_cond ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_cond",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // block_cond ::= BEGIN block_stmt END 
            {
              List<Statement> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = ls;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_cond",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // elif ::= else_block SEMICOLON 
            {
              PassIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ElseAst e = (ElseAst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new PassIf(e);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // elif ::= conditional 
            {
              PassIf RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PassIf pi = (PassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = pi;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // else_block ::= complex_else 
            {
              ElseAst RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT = new ElseAst(astGen.oneStmtInList(s)); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_block",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // else_block ::= simple_stmt 
            {
              ElseAst RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new ElseAst(astGen.oneStmtInList(s)); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_block",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // else_block ::= BEGIN block_stmt END 
            {
              ElseAst RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new ElseAst(ls);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_block",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // complex_else ::= case_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseAst s = (CaseAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // complex_else ::= while_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileAst s = (WhileAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // complex_else ::= for_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForAst s = (ForAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // complex_else ::= repeat_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RepeatAst s = (RepeatAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // case_stmt ::= CASE LPAREN expression RPAREN OF case_block ELSE case_else_stmts END SEMICOLON 
            {
              CaseAst RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int lscleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lscright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<SimpleCase> lsc = (List<SimpleCase>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = new CaseAst(e, lsc, new ElseAst(ls), new Position(cleft, cright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // case_block ::= case_block labels COLON case_stmts SEMICOLON 
            {
              List<SimpleCase> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<SimpleCase> l = (List<SimpleCase>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int labsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int labsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Expression> labs = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    if(l != null){
                        l.add(new SimpleCase(labs, ls));
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_block",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // case_block ::= labels COLON case_stmts SEMICOLON 
            {
              List<SimpleCase> RESULT =null;
		int labsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int labsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Expression> labs = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.genSimpleCaseList(labs, ls);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_block",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // labels ::= labels COMMA expression 
            {
              List<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(e);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labels",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // labels ::= expression 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    LinkedList<Expression> list = new LinkedList<>();
                    list.add(e);
                    RESULT = list;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labels",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // case_stmts ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmts",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // case_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmts",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // case_stmts ::= BEGIN block_stmt END 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmts",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // case_else_stmts ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // case_else_stmts ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // case_else_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // case_else_stmts ::= BEGIN block_stmt 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		      
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // while_stmt ::= WHILE LPAREN expression RPAREN DO statements 
            {
              WhileAst RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new WhileAst(e, l, new Position(wleft, wright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // while_stmt ::= WHILE LPAREN error RPAREN DO statements 
            {
              WhileAst RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new WhileAst(null, l, new Position(wleft, wright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // for_stmt ::= FOR ID ASSIGNATION expression TO expression DO statements 
            {
              ForAst RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Range range = new Range(e1, e2);
                    Label variable = new Label(i, new Position(ileft, iright));
                    RESULT = new ForAst(variable, range, l, new Position(fleft, fright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // for_stmt ::= FOR ID ASSIGNATION error TO expression DO statements 
            {
              ForAst RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Range range = new Range(null, e2);
                    Label variable = new Label(i, new Position(ileft, iright));
                    RESULT = new ForAst(variable, range, l, new Position(fleft, fright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // for_stmt ::= FOR ID error expression TO expression DO statements 
            {
              ForAst RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Range range = new Range(e1, e2);
                    Label variable = new Label(i, new Position(ileft, iright));
                    RESULT = new ForAst(variable, range, l, new Position(fleft, fright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // repeat_stmt ::= REPEAT statements UNTIL expression 
            {
              RepeatAst RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new RepeatAst(e, l, new Position(rleft, rright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // statements ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // statements ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // statements ::= BEGIN block_stmt END SEMICOLON 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // block_stmt ::= list_stmts 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // block_stmt ::= 
            {
              List<Statement> RESULT =null;
		
                    RESULT = new LinkedList<Statement>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_stmt",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // list_stmts ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // list_stmts ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // list_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // list_stmts ::= simple_stmt SEMICOLON more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // list_stmts ::= complex_stmt more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // more_stmts ::= simple_stmt error 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // more_stmts ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // more_stmts ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // more_stmts ::= simple_stmt SEMICOLON more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // more_stmts ::= complex_stmt more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // more_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // simple_stmt ::= BREAK 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT = new SimpleStmt(
                        SimpleStmt.BREAK, 
                        new Position(bleft, bright)
                    );  
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // simple_stmt ::= CONTINUE 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT = new SimpleStmt(
                        SimpleStmt.CONTINUE,
                        new Position(cleft, cright)
                    );  
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // simple_stmt ::= ID ASSIGNATION expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT = new Assignation(
                        new Label(i, new Position(ileft, iright)), e
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // simple_stmt ::= ID LPAREN expression_list RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new FunctionUseStmt(
                        new Label(i, new Position(ileft, iright)),
                        el
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // simple_stmt ::= ID LPAREN RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = new FunctionUseStmt(
                        new Label(i, new Position(ileft, iright)),
                        new LinkedList<>()
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // simple_stmt ::= ID LBRACK expression RBRACK ASSIGNATION expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new ArrayAssign(
                        new Label(i, new Position(ileft, iright)),
                        e1,
                        e2
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // simple_stmt ::= definite_fun 
            {
              Statement RESULT =null;
		int fuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int furight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionUseStmt fu = (FunctionUseStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fu; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // simple_stmt ::= error 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // complex_stmt ::= conditional 
            {
              Statement RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PassIf pi = (PassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT =  astGen.transformPassIf(pi); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // complex_stmt ::= case_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseAst s = (CaseAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // complex_stmt ::= while_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileAst s = (WhileAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // complex_stmt ::= for_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForAst s = (ForAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // complex_stmt ::= repeat_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RepeatAst s = (RepeatAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // functions_b ::= functions 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_b",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // functions_b ::= 
            {
              List<DefAst> RESULT =null;
		
                    RESULT = new LinkedList<>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_b",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // functions ::= functions function_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDec d = (FunctionDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(d);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // functions ::= function_dec 
            {
              List<DefAst> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDec d = (FunctionDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    LinkedList<DefAst> list = new LinkedList<>();
                    list.add(d);
                    RESULT = list;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // function_dec ::= FUNCTION ID LPAREN arguments RPAREN COLON var_type SEMICOLON var_b BEGIN block_stmt END SEMICOLON 
            {
              FunctionDec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		List<Argument> a = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<DefAst> lv = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                    RESULT = new FunctionDec(
                        new Label(i, new Position(ileft, iright)),
                        t, a, lv, ls
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_dec",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // procedure_b ::= procedures 
            {
              List<DefAst> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> p = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = p;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_b",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // procedure_b ::= 
            {
              List<DefAst> RESULT =null;
		  
                    RESULT = new LinkedList<>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_b",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // procedures ::= procedures procedure_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProcedureDec d = (ProcedureDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(d);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // procedures ::= procedure_dec 
            {
              List<DefAst> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProcedureDec d = (ProcedureDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    LinkedList<DefAst> list = new LinkedList<>();
                    list.add(d);
                    RESULT = list;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // procedure_dec ::= PROCEDURE ID LPAREN arguments RPAREN SEMICOLON var_b BEGIN block_stmt END SEMICOLON 
            {
              ProcedureDec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		List<Argument> a = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<DefAst> lv = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = new ProcedureDec(
                        new Label(i, new Position(ileft, iright)),
                        a, lv, ls
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_dec",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // arguments ::= arguments COMMA type_arg 
            {
              List<Argument> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Argument> l = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Argument> args = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    try{
                        l.addAll(args);
                    } catch (NullPointerException e){

                    }
                    
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // arguments ::= type_arg 
            {
              List<Argument> RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Argument> args = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = args;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // arguments ::= 
            {
              List<Argument> RESULT =null;
		
                    RESULT = new LinkedList<Argument>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // type_arg ::= VAR id_list COLON var_type 
            {
              List<Argument> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.generateArgs(l, t, true);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arg",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // type_arg ::= id_list COLON var_type 
            {
              List<Argument> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.generateArgs(l, t, false);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arg",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // java_block ::= JAVA_SECTION jcontent 
            {
              List<JClass> RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JClass> lc = (List<JClass>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = lc;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("java_block",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // jmodificator ::= PUBLIC 
            {
              AccessMod RESULT =null;
		 
                RESULT = AccessMod.PUBLIC; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmodificator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // jmodificator ::= PRIVATE 
            {
              AccessMod RESULT =null;
		 
                RESULT = AccessMod.PRIVATE; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmodificator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // jmodificator ::= PROTECTED 
            {
              AccessMod RESULT =null;
		 
                RESULT = AccessMod.PROTECTED; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmodificator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // jtype ::= INT_TKN jbracks_list 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Index i = (Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArrayType(
                    new Label(
                        PrimitiveType.IntegerPT.getName(), 
                        new Position(tleft, tright)
                    ),
                    JReferType.PrimitiveData,
                    i.getNumber()
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // jtype ::= STRING_TKN jbracks_list 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Index i = (Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArrayType(
                    new Label(
                        PrimitiveType.StringPT.getName(), 
                        new Position(tleft, tright)
                    ),
                    JReferType.PrimitiveData,
                    i.getNumber()
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // jtype ::= FLOAT_TKN jbracks_list 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Index i = (Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArrayType(
                    new Label(
                        PrimitiveType.RealPT.getName(), 
                        new Position(tleft, tright)
                    ),
                    JReferType.PrimitiveData,
                    i.getNumber()
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // jtype ::= BOOLEAN_TKN jbracks_list 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Index i = (Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArrayType(
                    new Label(
                        PrimitiveType.BooleanPT.getName(), 
                        new Position(tleft, tright)
                    ),
                    JReferType.PrimitiveData,
                    i.getNumber()
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // jtype ::= CHAR_TKN jbracks_list 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Index i = (Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArrayType(
                    new Label(
                        PrimitiveType.CharPT.getName(), 
                        new Position(tleft, tright)
                    ),
                    JReferType.PrimitiveData,
                    i.getNumber()
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // jtype ::= ID jbracks_list 
            {
              JType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Index i = (Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArrayType(
                    new Label( id, new Position(idleft, idright)),
                    JReferType.ObjectReference,
                    i.getNumber()
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // jtype ::= INT_TKN 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JType(
                    JReferType.PrimitiveData,
                    new Label(
                        PrimitiveType.IntegerPT.getName(), 
                        new Position(tleft, tright)
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // jtype ::= STRING_TKN 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JType(
                    JReferType.PrimitiveData,
                    new Label(
                        PrimitiveType.StringPT.getName(), 
                        new Position(tleft, tright)
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // jtype ::= FLOAT_TKN 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JType(
                    JReferType.PrimitiveData,
                    new Label(
                        PrimitiveType.RealPT.getName(), 
                        new Position(tleft, tright)
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // jtype ::= BOOLEAN_TKN 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JType(
                    JReferType.PrimitiveData,
                    new Label(
                        PrimitiveType.BooleanPT.getName(), 
                        new Position(tleft, tright)
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // jtype ::= CHAR_TKN 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JType(
                    JReferType.PrimitiveData,
                    new Label(
                        PrimitiveType.CharPT.getName(), 
                        new Position(tleft, tright)
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // jtype ::= ID 
            {
              JType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JType(
                    JReferType.ObjectReference,
                    new Label(id, new Position(idleft, idright))
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // jbracks_list ::= jbracks_list jbrack 
            {
              Index RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Index i = (Index)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                i.increment();
                RESULT = i;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbracks_list",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // jbracks_list ::= jbrack 
            {
              Index RESULT =null;
		
                RESULT = new Index();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbracks_list",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // jbrack ::= LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbrack",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // jarray_access ::= LBRACK jexp RBRACK 
            {
              List<JPassExp> RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JPassExp pe = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                List<JPassExp> list = new LinkedList<>();
                list.add(pe);
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarray_access",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // jarray_access ::= jarray_access LBRACK jexp RBRACK 
            {
              List<JPassExp> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<JPassExp> l = (List<JPassExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JPassExp pe = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                l.add(pe);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarray_access",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // jexp_list ::= jexp_list COMMA jexp 
            {
              List<JPassExp> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<JPassExp> l = (List<JPassExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassExp pe = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(pe);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jexp_list",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // jexp_list ::= jexp 
            {
              List<JPassExp> RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassExp pe = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                List<JPassExp> list = new LinkedList<>();
                list.add(pe);
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jexp_list",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // jliterals ::= INTEGER_LIT 
            {
              JLiteral RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JLiteral(
                    new Position(oleft, oright),
                    o
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jliterals",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // jliterals ::= STRING_LIT 
            {
              JLiteral RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JLiteral(
                    new Position(oleft, oright),
                    o
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jliterals",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // jliterals ::= BOOLEAN_LIT 
            {
              JLiteral RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		boolean o = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JLiteral(
                    new Position(oleft, oright),
                    o
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jliterals",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // jliterals ::= CHAR_LIT 
            {
              JLiteral RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character o = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JLiteral(
                    new Position(oleft, oright),
                    o
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jliterals",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // jliterals ::= FLOAT_LIT 
            {
              JLiteral RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		float o = (float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JLiteral(
                    new Position(oleft, oright),
                    o
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jliterals",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // jcontent ::= jcontent jclass 
            {
              List<JClass> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JClass> l = (List<JClass>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JClass c = (JClass)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(c);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcontent",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // jcontent ::= 
            {
              List<JClass> RESULT =null;
		
                RESULT = new LinkedList<>();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcontent",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // jclass ::= PUBLIC CLASS ID jherence LBRACE jinternal_block RBRACE 
            {
              JClass RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Label h = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JDef> ld = (List<JDef>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JClass(
                    new Label(id, new Position(idleft, idright)),
                    h, ld
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jclass",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // jherence ::= EXTENDS ID 
            {
              Label RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Label(
                    id, 
                    new Position(idleft, idright)
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jherence",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // jherence ::= 
            {
              Label RESULT =null;
		
                RESULT = null;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jherence",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // jinternal_block ::= jinternal_block jinternal 
            {
              List<JDef> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JDef> l = (List<JDef>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JDef d = (JDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(d);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jinternal_block",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // jinternal_block ::= 
            {
              List<JDef> RESULT =null;
		
                RESULT = new LinkedList<>();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jinternal_block",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // jinternal ::= jmodificator jtype ID joptions_dec 
            {
              JDef RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AccessMod a = (AccessMod)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JType t = (JType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Typable d = (Typable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                d.defineType(t);
                JDef jdef = (JDef) d;
                jdef.setAccess(a);
                jdef.setName(new Label(id, new Position(idleft, idright)));
                RESULT = jdef;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jinternal",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // jinternal ::= jmodificator VOID ID jmethod_dec 
            {
              JDef RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AccessMod a = (AccessMod)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JMethod m = (JMethod)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                m.setAccess(a);
                m.setName(new Label(id, new Position(idleft, idright)));
                m.setType(new JType());
                RESULT = m;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jinternal",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // jinternal ::= jmodificator ID LPAREN jargs RPAREN LBRACE jstmts_block RBRACE 
            {
              JDef RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		AccessMod m = (AccessMod)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<JArg> la = (List<JArg>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JConstructor(
                    new Label(id, new Position(idleft, idright)),
                    m, la, ls
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jinternal",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // joptions_dec ::= SEMICOLON 
            {
              Typable RESULT =null;
		
                RESULT = new JField();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("joptions_dec",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // joptions_dec ::= ASSIGNATION jexp SEMICOLON 
            {
              Typable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JPassExp e = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                JField field = new JField();
                field.setExpAssign(e);
                RESULT = field;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("joptions_dec",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // joptions_dec ::= jmethod_dec 
            {
              Typable RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JMethod m = (JMethod)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = m;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("joptions_dec",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // jmethod_dec ::= LPAREN jargs RPAREN LBRACE jstmts_block RBRACE 
            {
              JMethod RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<JArg> la = (List<JArg>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JMethod(null, null, la, ls);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_dec",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // jargs ::= jlist_args 
            {
              List<JArg> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JArg> l = (List<JArg>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jargs",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // jargs ::= 
            {
              List<JArg> RESULT =null;
		
                RESULT = new LinkedList<>();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jargs",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // jlist_args ::= jlist_args COMMA jarg 
            {
              List<JArg> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<JArg> l = (List<JArg>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JArg a = (JArg)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(a);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jlist_args",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // jlist_args ::= jarg 
            {
              List<JArg> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JArg a = (JArg)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                List<JArg> list = new LinkedList<>();
                list.add(a);
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jlist_args",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // jarg ::= jtype ID 
            {
              JArg RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JType t = (JType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArg(
                    t, new Label(id, new Position(idleft, idright))
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarg",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // jstmts_block ::= jstmts_block jstmt 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(s);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmts_block",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // jstmts_block ::= jstmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                List<Statement> list = new LinkedList<>();
                list.add(s);
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmts_block",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // jstmt ::= jcontrol_stmts 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmt",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // jstmt ::= jsimple_stmts SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmt",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // jstmt ::= jdeclaration SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JDeclaration s = (JDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmt",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // jstmt ::= jmethod_use SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JMethodUseStmt s = (JMethodUseStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmt",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // jstmt ::= jconstruct_use SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JConstructUse s = (JConstructUse)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmt",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // jstmt ::= jassign SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JAssignAst s = (JAssignAst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmt",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // jstmt ::= jdefinite_funcs SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JDefiniteFunc s = (JDefiniteFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmt",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // jcontrol_stmts ::= jif_stmt 
            {
              Statement RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassIf pi = (JPassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = astGen.transformPassJIf(pi);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcontrol_stmts",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // jcontrol_stmts ::= jwhile_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JWhileAst s = (JWhileAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcontrol_stmts",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // jcontrol_stmts ::= jdo_while_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JDoWhileAst s = (JDoWhileAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcontrol_stmts",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // jcontrol_stmts ::= jfor_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JForAst s = (JForAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcontrol_stmts",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // jcontrol_stmts ::= jswitch_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JSwitchAst s = (JSwitchAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcontrol_stmts",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // jsimple_stmts ::= BREAK 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JSimpleStmt(
                    new Position(sleft, sright), true
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jsimple_stmts",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // jsimple_stmts ::= CONTINUE 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JSimpleStmt(
                    new Position(sleft, sright), false
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jsimple_stmts",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // jsimple_stmts ::= RETURN jexp 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassExp pe = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JReturnStmt(
                    new Position(sleft, sright), pe
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jsimple_stmts",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // jdefinite_funcs ::= PRINT LPAREN jexp_list RPAREN 
            {
              JDefiniteFunc RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lpeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JPassExp> lpe = (List<JPassExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JDefiniteFunc(
                    new Position(pleft, pright), lpe, false
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jdefinite_funcs",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // jdefinite_funcs ::= PRINTLN LPAREN jexp_list RPAREN 
            {
              JDefiniteFunc RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lpeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JPassExp> lpe = (List<JPassExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JDefiniteFunc(
                    new Position(pleft, pright), lpe, true
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jdefinite_funcs",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // jif_stmt ::= IF LPAREN jexp RPAREN LBRACE jstmts_block RBRACE jelif_stmt 
            {
              JPassIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		JPassExp e = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassIf pi = (JPassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = astGen.generateJPassIf(
                    pi,
                    new JIfAst(
                        new Position(ileft, iright),
                        e, ls
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jif_stmt",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // jelif_stmt ::= ELSE LBRACE jstmts_block RBRACE 
            {
              JPassIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                JElseAst elseStmt = new JElseAst(
                    new Position(eleft, eright),
                    ls
                );
                RESULT = new JPassIf(elseStmt);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jelif_stmt",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // jelif_stmt ::= ELSE jif_stmt 
            {
              JPassIf RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassIf pi = (JPassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = pi;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jelif_stmt",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // jelif_stmt ::= 
            {
              JPassIf RESULT =null;
		
                RESULT = new JPassIf();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jelif_stmt",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // jwhile_stmt ::= WHILE LPAREN jexp RPAREN LBRACE jstmts_block RBRACE 
            {
              JWhileAst RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		JPassExp e = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JWhileAst(
                    new Position(wleft, wright),
                    e, ls
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jwhile_stmt",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // jdo_while_stmt ::= DO LBRACE jstmts_block RBRACE WHILE LPAREN jexp RPAREN SEMICOLON 
            {
              JDoWhileAst RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JPassExp e = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new JDoWhileAst(
                    new Position(dleft, dright),
                    e, ls
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jdo_while_stmt",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // jfor_stmt ::= FOR RPAREN jfor_reduced_stmt SEMICOLON jexp SEMICOLON jfor_reduced_stmt RPAREN LBRACE jstmts_block RBRACE 
            {
              JForAst RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		JPassExp e = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JForAst(
                    new Position(fleft, fright),
                    s1, e, s2, ls
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jfor_stmt",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // jfor_reduced_stmt ::= jdeclaration 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JDeclaration s = (JDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jfor_reduced_stmt",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // jfor_reduced_stmt ::= jmethod_use 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JMethodUseStmt s = (JMethodUseStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jfor_reduced_stmt",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // jfor_reduced_stmt ::= jassign 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JAssignAst s = (JAssignAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jfor_reduced_stmt",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // jfor_reduced_stmt ::= 
            {
              Statement RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jfor_reduced_stmt",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // jswitch_stmt ::= SWITCH LPAREN jexp RPAREN LBRACE jswitch_cases RBRACE 
            {
              JSwitchAst RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		JPassExp e = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JCase> lc = (List<JCase>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JSwitchAst(
                    new Position(sleft, sright),
                    e, lc
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jswitch_stmt",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // jswitch_cases ::= jswitch_cases jcase 
            {
              List<JCase> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JCase> l = (List<JCase>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JCase c = (JCase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(c);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jswitch_cases",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // jswitch_cases ::= jcase 
            {
              List<JCase> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JCase c = (JCase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                List<JCase> list = new LinkedList<>();
                list.add(c);
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jswitch_cases",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // jcase ::= CASE jexp COLON jstmts_block 
            {
              JCase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JPassExp e = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JCase(e, ls);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcase",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // jcase ::= DEFAULT COLON jstmts_block 
            {
              JCase RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JCase(ls);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcase",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // jassign ::= ID ASSIGNATION jexp 
            {
              JAssignAst RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassExp e = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPos = new Position(idleft,idright);
                RESULT = new JAssignAst(
                    initPos,
                    astGen.genListInv(new JVarUse(initPos, id, JContextRef.Local)),
                    e
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // jassign ::= ID PLUS PLUS 
            {
              JAssignAst RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                Position initPos =  new Position(idleft, idright);
                RESULT = new JAssignAst(
                    initPos,
                    astGen.genListInv(new JVarUse(initPos, id, JContextRef.Local)),
                    new JPassExp( 
                        new JOperation(
                            initPos, 
                            DefiniteOperation.Addition,
                            new JPassExp(),
                            new JPassExp()
                        )
                    )
                )
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // jassign ::= ID MINUS MINUS 
            {
              JAssignAst RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // jassign ::= THIS jaccess ASSIGNATION jexp 
            {
              JAssignAst RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // jassign ::= THIS jaccess PLUS PLUS 
            {
              JAssignAst RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // jassign ::= THIS jaccess MINUS MINUS 
            {
              JAssignAst RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // jassign ::= SUPER jaccess ASSIGNATION jexp 
            {
              JAssignAst RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // jassign ::= SUPER jaccess PLUS PLUS 
            {
              JAssignAst RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // jassign ::= ID jaccess ASSIGNATION jexp 
            {
              JAssignAst RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // jassign ::= ID jaccess PLUS PLUS 
            {
              JAssignAst RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // jassign ::= ID LPAREN RPAREN jaccess ASSIGNATION jexp 
            {
              JAssignAst RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // jassign ::= ID LPAREN RPAREN jaccess PLUS PLUS 
            {
              JAssignAst RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // jassign ::= ID LPAREN RPAREN jaccess MINUS MINUS 
            {
              JAssignAst RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // jassign ::= ID LPAREN jexp_list RPAREN jaccess ASSIGNATION jexp 
            {
              JAssignAst RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // jassign ::= ID LPAREN jexp_list RPAREN jaccess PLUS PLUS 
            {
              JAssignAst RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // jassign ::= ID LPAREN jexp_list RPAREN jaccess MINUS MINUS 
            {
              JAssignAst RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // jassign ::= ID jarray_access jaccess ASSIGNATION jexp SEMICOLON 
            {
              JAssignAst RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // jassign ::= ID jarray_access jaccess PLUS PLUS 
            {
              JAssignAst RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // jassign ::= ID jarray_access jaccess MINUS MINUS 
            {
              JAssignAst RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // jdeclaration ::= jtype ID ASSIGNATION jexp 
            {
              JDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		JType t = (JType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassExp pe = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JDeclaration(
                    new Position(ileft, iright),
                    i, t, pe
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jdeclaration",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // jdeclaration ::= jtype ID 
            {
              JDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JType t = (JType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JDeclaration(
                    new Position(ileft, iright),
                    i, t
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jdeclaration",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // jmethod_use ::= THIS jaccess 
            {
              JMethodUseStmt RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // jmethod_use ::= SUPER jaccess 
            {
              JMethodUseStmt RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // jmethod_use ::= ID jaccess 
            {
              JMethodUseStmt RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // jmethod_use ::= ID LPAREN RPAREN 
            {
              JMethodUseStmt RESULT =null;
		

            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // jmethod_use ::= ID LPAREN jexp_list RPAREN 
            {
              JMethodUseStmt RESULT =null;
		
            
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // jmethod_use ::= ID LPAREN RPAREN jaccess 
            {
              JMethodUseStmt RESULT =null;
		

            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // jmethod_use ::= ID LPAREN jexp_list RPAREN jaccess 
            {
              JMethodUseStmt RESULT =null;
		

            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // jmethod_use ::= ID jarray_access jaccess 
            {
              JMethodUseStmt RESULT =null;
		

            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // jconstruct_use ::= THIS LPAREN RPAREN 
            {
              JConstructUse RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new JConstructUse(
                    new Position(tleft, tright),
                    false
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jconstruct_use",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // jconstruct_use ::= THIS LPAREN jexp_list RPAREN 
            {
              JConstructUse RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lpeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JPassExp> lpe = (List<JPassExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JConstructUse(
                    new Position(tleft, tright),
                    lpe, false
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jconstruct_use",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // jconstruct_use ::= SUPER LPAREN RPAREN 
            {
              JConstructUse RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new JConstructUse(
                    new Position(sleft, sright),
                    true
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jconstruct_use",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // jconstruct_use ::= SUPER LPAREN jexp_list RPAREN 
            {
              JConstructUse RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lpeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JPassExp> lpe = (List<JPassExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JConstructUse(
                    new Position(sleft, sright),
                    lpe, true
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jconstruct_use",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // jaccess ::= DOT jcomplex_access jaccess 
            {
              List<JInvocation> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JInvocation i = (JInvocation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> l = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(0, i);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jaccess",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // jaccess ::= DOT jcomplex_access 
            {
              List<JInvocation> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JInvocation i = (JInvocation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                List<JInvocation> list = new LinkedList<>();
                list.add(i);
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jaccess",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // jcomplex_access ::= ID 
            {
              JInvocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JVarUse(
                    new Position(ileft, iright),
                    i, JContextRef.Local
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcomplex_access",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // jcomplex_access ::= ID LPAREN RPAREN 
            {
              JInvocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new JMethodUse(
                    new Position(ileft, iright),
                    i, JContextRef.Local
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcomplex_access",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // jcomplex_access ::= ID LPAREN RPAREN jarray_access 
            {
              JInvocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JPassExp> ac = (List<JPassExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArrayFMUse(
                    new Position(ileft, iright), 
                    i, JContextRef.Local, ac
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcomplex_access",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // jcomplex_access ::= ID LPAREN jexp_list RPAREN 
            {
              JInvocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JPassExp> el = (List<JPassExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JMethodUse(
                    new Position(ileft, iright),
                    i, JContextRef.Local, el
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcomplex_access",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // jcomplex_access ::= ID LPAREN jexp_list RPAREN jarray_access 
            {
              JInvocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<JPassExp> el = (List<JPassExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JPassExp> ac = (List<JPassExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArrayFMUse(
                    new Position(ileft, iright),
                    i, JContextRef.Local, el, ac
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcomplex_access",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // jcomplex_access ::= ID jarray_access 
            {
              JInvocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JPassExp> ac = (List<JPassExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArrayUse(
                    new Position(ileft, iright),
                    i, JContextRef.Local, ac
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcomplex_access",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // jexp ::= jexp AND jexp 
            {
              JPassExp RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JPassExp p1 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassExp p2 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JPassExp(
                    new JOperation(
                        new Position(oleft, oright), 
                        DefiniteOperation.And, 
                        p1, p2
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jexp",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // jexp ::= jexp OR jexp 
            {
              JPassExp RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JPassExp p1 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassExp p2 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JPassExp(
                    new JOperation(
                        new Position(oleft, oright), 
                        DefiniteOperation.Or, 
                        p1, p2
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jexp",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // jexp ::= NOT jexp 
            {
              JPassExp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassExp p = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JPassExp(
                    new JUnaryOp(
                        new Position(oleft, oright),
                        p, DefiniteOperation.Not
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jexp",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // jexp ::= jbool_exp 
            {
              JPassExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassExp e = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = e;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jexp",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // jbool_exp ::= jarit_exp EQUALS jarit_exp 
            {
              JPassExp RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JPassExp p1 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassExp p2 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JPassExp(
                    new JOperation(
                        new Position(oleft, oright), 
                        DefiniteOperation.EqualsTo, 
                        p1, p2
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // jbool_exp ::= jarit_exp DIFFERENT jarit_exp 
            {
              JPassExp RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JPassExp p1 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassExp p2 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JPassExp(
                    new JOperation(
                        new Position(oleft, oright), 
                        DefiniteOperation.DifferentTo, 
                        p1, p2
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // jbool_exp ::= jarit_exp GRATER jarit_exp 
            {
              JPassExp RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JPassExp p1 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassExp p2 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JPassExp(
                    new JOperation(
                        new Position(oleft, oright), 
                        DefiniteOperation.GraterThan, 
                        p1, p2
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // jbool_exp ::= jarit_exp LESS jarit_exp 
            {
              JPassExp RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JPassExp p1 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassExp p2 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JPassExp(
                    new JOperation(
                        new Position(oleft, oright), 
                        DefiniteOperation.LessThan, 
                        p1, p2
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // jbool_exp ::= jarit_exp GRATER_EQUALS jarit_exp 
            {
              JPassExp RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JPassExp p1 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassExp p2 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JPassExp(
                    new JOperation(
                        new Position(oleft, oright), 
                        DefiniteOperation.GraterEq, 
                        p1, p2
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // jbool_exp ::= jarit_exp LESS_EQUALS jarit_exp 
            {
              JPassExp RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JPassExp p1 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassExp p2 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JPassExp(
                    new JOperation(
                        new Position(oleft, oright), 
                        DefiniteOperation.LessEq, 
                        p1, p2
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // jbool_exp ::= jarit_exp 
            {
              JPassExp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassExp p = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = p;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // jarit_exp ::= jarit_exp PLUS jarit_exp 
            {
              JPassExp RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JPassExp p1 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassExp p2 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JPassExp(
                    new JOperation(
                        new Position(oleft, oright), 
                        DefiniteOperation.Addition, 
                        p1, p2
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // jarit_exp ::= jarit_exp MINUS jarit_exp 
            {
              JPassExp RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JPassExp p1 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassExp p2 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JPassExp(
                    new JOperation(
                        new Position(oleft, oright), 
                        DefiniteOperation.Substraction, 
                        p1, p2
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // jarit_exp ::= jarit_exp TIMES jarit_exp 
            {
              JPassExp RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JPassExp p1 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassExp p2 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JPassExp(
                    new JOperation(
                        new Position(oleft, oright), 
                        DefiniteOperation.Multiplication, 
                        p1, p2
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // jarit_exp ::= jarit_exp DIV jarit_exp 
            {
              JPassExp RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JPassExp p1 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassExp p2 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JPassExp(
                    new JOperation(
                        new Position(oleft, oright), 
                        DefiniteOperation.Division, 
                        p1, p2
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // jarit_exp ::= jarit_exp MOD jarit_exp 
            {
              JPassExp RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JPassExp p1 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassExp p2 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JPassExp(
                    new JOperation(
                        new Position(oleft, oright), 
                        DefiniteOperation.Module, 
                        p1, p2
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // jarit_exp ::= jarit_exp POWER jarit_exp 
            {
              JPassExp RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JPassExp p1 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassExp p2 = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JPassExp(
                    new JOperation(
                        new Position(oleft, oright), 
                        DefiniteOperation.Power, 
                        p1, p2
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // jarit_exp ::= jliterals 
            {
              JPassExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JLiteral l = (JLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JPassExp(astGen.genListInv(l));
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // jarit_exp ::= ID jarray_access 
            {
              JPassExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // jarit_exp ::= ID jarray_access jaccess 
            {
              JPassExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // jarit_exp ::= ID LPAREN jexp_list RPAREN 
            {
              JPassExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JPassExp> l = (List<JPassExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // jarit_exp ::= ID LPAREN RPAREN 
            {
              JPassExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // jarit_exp ::= ID LPAREN jexp_list RPAREN jaccess 
            {
              JPassExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<JPassExp> l = (List<JPassExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // jarit_exp ::= ID LPAREN RPAREN jaccess 
            {
              JPassExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // jarit_exp ::= ID jaccess 
            {
              JPassExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000001(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // jarit_exp ::= ID 
            {
              JPassExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                List<JInvocation> invlist = astGen.genListInv(
                    new JVarUse(
                        new Position(ileft, iright), 
                        i, JContextRef.Local
                    )
                );
                JPassExp passExp = new JPassExp(invlist);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // jarit_exp ::= THIS jaccess 
            {
              JPassExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> l = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // jarit_exp ::= SUPER jaccess 
            {
              JPassExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> l = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // jarit_exp ::= NEW ID LPAREN RPAREN 
            {
              JPassExp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // jarit_exp ::= NEW ID LPAREN jexp_list RPAREN 
            {
              JPassExp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // jarit_exp ::= LPAREN jexp RPAREN 
            {
              JPassExp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JPassExp p = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = p;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // jarit_exp ::= PLUS jarit_exp 
            {
              JPassExp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassExp pe = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JPassExp(
                    new JUnaryOp(
                        new Position(oleft, oright), 
                        pe, DefiniteOperation.Addition
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // jarit_exp ::= MINUS jarit_exp 
            {
              JPassExp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassExp pe = (JPassExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JPassExp(
                    new JUnaryOp(
                        new Position(oleft, oright),
                        pe, DefiniteOperation.Substraction
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // main_program ::= MAIN_SECTION cimports cconst_b cvars_b VOID MAIN LPAREN RPAREN LBRACE cstmts RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_program",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // ctype ::= INT_TKN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ctype",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // ctype ::= CHAR_TKN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ctype",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // ctype ::= FLOAT_TKN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ctype",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // ctype ::= STRING_TKN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ctype",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // ctype ::= BOOLEAN_TKN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ctype",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // carray_dims ::= carray_dims LBRACK cexp RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carray_dims",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // carray_dims ::= LBRACK cexp RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carray_dims",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // cparams ::= cexp COMMA cparams 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cparams",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // cparams ::= cexp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cparams",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // cexp_list ::= cexp_list COMMA cexp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexp_list",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // cexp_list ::= cexp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexp_list",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // cimports ::= cimports HASH INCLUDE STRING_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cimports",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // cimports ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cimports",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // cconst_b ::= cconst_b CONST ctype ID ASSIGNATION literals SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cconst_b",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // cconst_b ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cconst_b",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // cvars_b ::= cvars_b cvars_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvars_b",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // cvars_b ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvars_b",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // cvars_dec ::= ctype ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvars_dec",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // cvars_dec ::= ctype ID ASSIGNATION cexp SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvars_dec",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // cvars_dec ::= ctype ARRAY carray_dims SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvars_dec",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // cvars_dec ::= JAVA DOT ID c_java_construct SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvars_dec",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // cvars_dec ::= JAVA DOT ID ARRAY carray_dims SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvars_dec",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // c_java_construct ::= c_j_construct COMMA c_java_construct 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_java_construct",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // c_java_construct ::= c_j_construct 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_java_construct",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // c_j_construct ::= ID LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_j_construct",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // c_j_construct ::= ID LPAREN cparams RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_j_construct",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // cstmts ::= ccontrol_stmts 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cstmts",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // cstmts ::= single_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cstmts",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // cstmts ::= def_functions_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cstmts",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // single_stmt ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_stmt",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // single_stmt ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_stmt",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // def_functions_stmt ::= SCANF LPAREN STRING_LIT COMMA AMPERSAND ID RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_functions_stmt",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // def_functions_stmt ::= PRINT LPAREN cexp_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_functions_stmt",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // def_functions_stmt ::= CLEAR LPAREN RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_functions_stmt",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // def_functions_stmt ::= GETCH LPAREN RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_functions_stmt",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // ccontrol_stmts ::= cif_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccontrol_stmts",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // ccontrol_stmts ::= celif_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccontrol_stmts",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // ccontrol_stmts ::= cswitch_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccontrol_stmts",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // ccontrol_stmts ::= cfor_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccontrol_stmts",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // ccontrol_stmts ::= cwhile_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccontrol_stmts",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // ccontrol_stmts ::= cdo_while_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccontrol_stmts",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // cif_stmt ::= IF LPAREN cexp RPAREN LBRACE cstmts RBRACE celif_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cif_stmt",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // celif_stmt ::= ELSE cif_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("celif_stmt",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // celif_stmt ::= ELSE LBRACE cstmts RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("celif_stmt",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // cswitch_stmt ::= SWITCH LPAREN cexp RPAREN LBRACE ccases RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cswitch_stmt",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // ccases ::= ccases ccase 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccases",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // ccases ::= ccase 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccases",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // ccase ::= CASE cexp COLON cstmts BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccase",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // ccase ::= DEFAULT COLON cstmts BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccase",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // cfor_stmt ::= FOR LPAREN casign SEMICOLON cexp SEMICOLON cexp RPAREN LBRACE cstmts RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cfor_stmt",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // cwhile_stmt ::= WHILE LPAREN cexp RPAREN LBRACE cstmts RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cwhile_stmt",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // cdo_while_stmt ::= DO LBRACE cstmts RBRACE WHILE LPAREN cexp RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cdo_while_stmt",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // cinvocation_stmt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cinvocation_stmt",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // cexp ::= cexp AND cexp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexp",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // cexp ::= cexp OR cexp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexp",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // cexp ::= NOT jexp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexp",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // cexp ::= cbool_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexp",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // cbool_exp ::= carit_exp EQUALS carit_exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2j = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cbool_exp",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // cbool_exp ::= carit_exp DIFFERENT carit_exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2j = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cbool_exp",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // cbool_exp ::= carit_exp GRATER carit_exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2j = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cbool_exp",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // cbool_exp ::= carit_exp LESS carit_exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2j = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cbool_exp",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // cbool_exp ::= carit_exp GRATER_EQUALS carit_exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2j = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cbool_exp",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // cbool_exp ::= carit_exp LESS_EQUALS carit_exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2j = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cbool_exp",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // cbool_exp ::= carit_exp 
            {
              Object RESULT =null;
		int ejleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ejright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ej = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cbool_exp",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // carit_exp ::= carit_exp PLUS carit_exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // carit_exp ::= carit_exp MINUS carit_exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // carit_exp ::= carit_exp TIMES carit_exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // carit_exp ::= carit_exp DIV carit_exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // carit_exp ::= carit_exp MOD carit_exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // carit_exp ::= carit_exp POWER carit_exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // carit_exp ::= literals 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // carit_exp ::= ID carray_access 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // carit_exp ::= ID carray_access caccess 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // carit_exp ::= ID LPAREN cexp_list RPAREN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // carit_exp ::= ID LPAREN RPAREN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // carit_exp ::= ID LPAREN cexp_list RPAREN caccess 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // carit_exp ::= ID LPAREN RPAREN caccess 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // carit_exp ::= ID caccess 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // carit_exp ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // carit_exp ::= THIS caccess 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // carit_exp ::= SUPER caccess 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // carit_exp ::= LPAREN cexp RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // carit_exp ::= PLUS carit_exp 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // carit_exp ::= MINUS carit_exp 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$Parser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$Parser$do_action_part00000001(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
