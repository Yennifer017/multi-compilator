
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compi2.multi.compilator.analysis;

import java_cup.runtime.*;
import java.util.*;
import compi2.multi.compilator.analysis.typet.*;
import compi2.multi.compilator.analyzator.*;
import compi2.multi.compilator.semantic.*;
import compi2.multi.compilator.semantic.exp.*;
import compi2.multi.compilator.semantic.obj.*;
import compi2.multi.compilator.semantic.ast.*;
import compi2.multi.compilator.semantic.module.*;
import compi2.multi.compilator.util.Position;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\364\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\006\004\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\007\005\000\002" +
    "\007\003\000\002\027\007\000\002\030\010\000\002\010" +
    "\005\000\002\010\003\000\002\013\004\000\002\017\006" +
    "\000\002\017\012\000\002\012\004\000\002\012\002\000" +
    "\002\025\005\000\002\025\003\000\002\015\004\000\002" +
    "\015\002\000\002\014\005\000\002\014\004\000\002\014" +
    "\006\000\002\014\004\000\002\014\005\000\002\016\005" +
    "\000\002\016\010\000\002\016\005\000\002\016\005\000" +
    "\002\016\010\000\002\020\005\000\002\020\006\000\002" +
    "\020\005\000\002\020\006\000\002\020\004\000\002\020" +
    "\003\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\003\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\003\000\002\022\006\000\002\022\006\000\002" +
    "\022\005\000\002\022\003\000\002\022\005\000\002\022" +
    "\004\000\002\022\004\000\002\022\005\000\002\022\004" +
    "\000\002\022\004\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\064\004\000\002\064\005\000\002\064\006\000\002\024" +
    "\007\000\002\024\007\000\002\024\007\000\002\024\007" +
    "\000\002\024\007\000\002\040\003\000\002\040\003\000" +
    "\002\040\005\000\002\063\004\000\002\063\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\005\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\046\014\000\002\065\007\000\002\065\006\000" +
    "\002\026\005\000\002\026\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\005\000\002\042\003\000\002\042" +
    "\004\000\002\042\003\000\002\042\004\000\002\043\010" +
    "\000\002\043\010\000\002\044\012\000\002\044\012\000" +
    "\002\044\012\000\002\045\006\000\002\037\004\000\002" +
    "\037\003\000\002\037\006\000\002\036\003\000\002\036" +
    "\002\000\002\034\003\000\002\034\004\000\002\034\003" +
    "\000\002\034\005\000\002\034\004\000\002\035\004\000" +
    "\002\035\003\000\002\035\004\000\002\035\005\000\002" +
    "\035\004\000\002\035\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\005\000\002\031\006\000\002\031\005" +
    "\000\002\031\010\000\002\031\003\000\002\031\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\057\003\000\002\057" +
    "\002\000\002\060\004\000\002\060\003\000\002\053\017" +
    "\000\002\055\003\000\002\055\002\000\002\056\004\000" +
    "\002\056\003\000\002\054\015\000\002\061\005\000\002" +
    "\061\003\000\002\061\002\000\002\062\006\000\002\062" +
    "\005\000\002\004\004\000\002\066\003\000\002\066\003" +
    "\000\002\066\003\000\002\066\002\000\002\067\003\000" +
    "\002\067\003\000\002\067\003\000\002\067\003\000\002" +
    "\067\003\000\002\067\003\000\002\070\004\000\002\070" +
    "\002\000\002\071\011\000\002\072\004\000\002\072\002" +
    "\000\002\073\004\000\002\073\002\000\002\074\006\000" +
    "\002\074\006\000\002\074\012\000\002\075\003\000\002" +
    "\075\004\000\002\075\005\000\002\075\006\000\002\075" +
    "\003\000\002\076\010\000\002\077\003\000\002\077\002" +
    "\000\002\100\005\000\002\100\003\000\002\101\004\000" +
    "\002\101\005\000\002\102\004\000\002\102\003\000\002" +
    "\103\004\000\002\104\003\000\002\104\003\000\002\104" +
    "\003\000\002\104\003\000\002\104\003\000\002\104\004" +
    "\000\002\104\004\000\002\105\012\000\002\106\006\000" +
    "\002\106\004\000\002\106\002\000\002\107\011\000\002" +
    "\110\013\000\002\111\015\000\002\112\011\000\002\113" +
    "\004\000\002\113\003\000\002\114\006\000\002\114\005" +
    "\000\002\115\005\000\002\115\005\000\002\115\004\000" +
    "\002\115\003\000\002\116\005\000\002\116\005\000\002" +
    "\116\005\000\002\116\005\000\002\116\005\000\002\116" +
    "\005\000\002\116\003\000\002\117\005\000\002\117\005" +
    "\000\002\117\005\000\002\117\005\000\002\117\005\000" +
    "\002\117\005\000\002\117\003\000\002\117\004\000\002" +
    "\117\006\000\002\117\005\000\002\117\003\000\002\117" +
    "\005\000\002\117\004\000\002\117\004\000\002\120\004" +
    "\000\002\120\003\000\002\121\005\000\002\121\006\000" +
    "\002\005\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01fd\000\004\031\006\001\002\000\004\002\u01ff\001" +
    "\002\000\004\030\u013f\001\002\000\010\030\uff70\057\013" +
    "\100\uff70\001\002\000\010\030\uff6e\057\uff6e\100\uff6e\001" +
    "\002\000\010\030\uff71\057\013\100\uff71\001\002\000\004" +
    "\030\uffff\001\002\000\006\030\uff6b\100\u012e\001\002\000" +
    "\004\135\014\001\002\000\004\016\015\001\002\000\012" +
    "\014\uff65\017\uff65\123\016\135\017\001\002\000\004\135" +
    "\017\001\002\000\010\003\ufff5\013\ufff5\014\ufff5\001\002" +
    "\000\006\014\uff66\017\uff66\001\002\000\006\013\u0129\014" +
    "\u0107\001\002\000\006\014\023\017\024\001\002\000\006" +
    "\123\016\135\017\001\002\000\004\013\025\001\002\000" +
    "\020\003\031\036\035\041\030\055\032\064\033\113\034" +
    "\135\026\001\002\000\016\003\ufff8\012\ufff8\014\ufff8\017" +
    "\ufff8\035\ufff8\135\ufff8\001\002\000\004\012\036\001\002" +
    "\000\016\003\ufffa\012\ufffa\014\ufffa\017\ufffa\035\ufffa\135" +
    "\ufffa\001\002\000\016\003\ufff7\012\ufff7\014\ufff7\017\ufff7" +
    "\035\ufff7\135\ufff7\001\002\000\016\003\ufffc\012\ufffc\014" +
    "\ufffc\017\ufffc\035\ufffc\135\ufffc\001\002\000\016\003\ufffd" +
    "\012\ufffd\014\ufffd\017\ufffd\035\ufffd\135\ufffd\001\002\000" +
    "\016\003\ufff9\012\ufff9\014\ufff9\017\ufff9\035\ufff9\135\ufff9" +
    "\001\002\000\016\003\ufffb\012\ufffb\014\ufffb\017\ufffb\035" +
    "\ufffb\135\ufffb\001\002\000\006\035\uffe8\123\037\001\002" +
    "\000\006\003\u0101\135\017\001\002\000\004\035\041\001" +
    "\002\000\026\003\060\037\054\040\057\045\044\052\uff8a" +
    "\056\064\061\051\106\065\125\046\135\052\001\002\000" +
    "\034\003\uff75\012\uff75\037\uff75\040\uff75\045\uff75\051\uff75" +
    "\052\uff75\056\uff75\061\uff75\106\uff75\122\uff75\125\uff75\135" +
    "\uff75\001\002\000\034\003\uff72\012\uff72\037\uff72\040\uff72" +
    "\045\uff72\051\uff72\052\uff72\056\uff72\061\uff72\106\uff72\122" +
    "\uff72\125\uff72\135\uff72\001\002\000\034\003\uff7d\012\uff7d" +
    "\037\uff7d\040\uff7d\045\uff7d\051\uff7d\052\uff7d\056\uff7d\061" +
    "\uff7d\106\uff7d\122\uff7d\125\uff7d\135\uff7d\001\002\000\034" +
    "\003\uff74\012\uff74\037\uff74\040\uff74\045\uff74\051\uff74\052" +
    "\uff74\056\uff74\061\uff74\106\uff74\122\uff74\125\uff74\135\uff74" +
    "\001\002\000\004\016\367\001\002\000\006\012\365\052" +
    "\uff89\001\002\000\004\052\uff8b\001\002\000\006\003\346" +
    "\016\347\001\002\000\010\016\335\022\334\127\333\001" +
    "\002\000\026\003\060\037\054\040\057\045\044\052\uff87" +
    "\056\064\061\051\106\065\125\046\135\052\001\002\000" +
    "\034\003\uff7e\012\uff7e\037\uff7e\040\uff7e\045\uff7e\051\uff7e" +
    "\052\uff7e\056\uff7e\061\uff7e\106\uff7e\122\uff7e\125\uff7e\135" +
    "\uff7e\001\002\000\034\003\uff78\012\uff78\037\uff78\040\uff78" +
    "\045\uff78\051\uff78\052\uff78\056\uff78\061\uff78\106\uff78\122" +
    "\uff78\125\uff78\135\uff78\001\002\000\034\003\uff76\012\uff76" +
    "\037\uff76\040\uff76\045\uff76\051\uff76\052\uff76\056\uff76\061" +
    "\uff76\106\uff76\122\uff76\125\uff76\135\uff76\001\002\000\004" +
    "\016\266\001\002\000\034\003\uff77\012\uff77\037\uff77\040" +
    "\uff77\045\uff77\051\uff77\052\uff77\056\uff77\061\uff77\106\uff77" +
    "\122\uff77\125\uff77\135\uff77\001\002\000\004\052\264\001" +
    "\002\000\026\003\060\035\241\037\054\040\057\045\044" +
    "\056\064\061\051\106\065\125\046\135\052\001\002\000" +
    "\034\003\uff73\012\uff73\037\uff73\040\uff73\045\uff73\051\uff73" +
    "\052\uff73\056\uff73\061\uff73\106\uff73\122\uff73\125\uff73\135" +
    "\uff73\001\002\000\004\135\215\001\002\000\026\003\060" +
    "\035\067\037\054\040\057\045\044\056\064\061\051\106" +
    "\065\125\046\135\052\001\002\000\004\012\214\001\002" +
    "\000\026\003\060\037\054\040\057\045\044\052\uff8a\056" +
    "\064\061\051\106\065\125\046\135\052\001\002\000\034" +
    "\003\uff8d\012\uff8d\037\uff8d\040\uff8d\045\uff8d\051\uff8d\052" +
    "\uff8d\056\uff8d\061\uff8d\106\uff8d\122\uff8d\125\uff8d\135\uff8d" +
    "\001\002\000\004\122\072\001\002\000\030\003\104\004" +
    "\100\005\074\016\111\067\107\112\105\135\103\136\101" +
    "\137\076\140\073\141\110\001\002\000\126\003\uffb9\004" +
    "\uffb9\005\uffb9\006\uffb9\007\uffb9\011\uffb9\012\uffb9\013\uffb9" +
    "\014\uffb9\015\uffb9\016\uffb9\017\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\026\uffb9\027\uffb9\033\uffb9\035\uffb9\037\uffb9\040\uffb9" +
    "\045\uffb9\047\uffb9\051\uffb9\052\uffb9\053\uffb9\056\uffb9\061" +
    "\uffb9\067\uffb9\072\uffb9\106\uffb9\112\uffb9\120\uffb9\122\uffb9" +
    "\125\uffb9\130\uffb9\132\uffb9\135\uffb9\136\uffb9\137\uffb9\140" +
    "\uffb9\141\uffb9\001\002\000\026\003\210\004\100\005\074" +
    "\016\111\112\105\135\103\136\101\137\076\140\073\141" +
    "\110\001\002\000\110\003\uffc4\004\uffc4\005\uffc4\006\uffc4" +
    "\007\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\017" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\033\uffc4" +
    "\035\uffc4\037\uffc4\040\uffc4\045\uffc4\047\uffc4\051\uffc4\052" +
    "\uffc4\053\uffc4\056\uffc4\061\uffc4\072\uffc4\106\uffc4\120\uffc4" +
    "\122\uffc4\125\uffc4\130\uffc4\132\uffc4\135\uffc4\001\002\000" +
    "\126\003\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\011\uffb8" +
    "\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\023" +
    "\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\033\uffb8\035\uffb8" +
    "\037\uffb8\040\uffb8\045\uffb8\047\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\056\uffb8\061\uffb8\067\uffb8\072\uffb8\106\uffb8\112\uffb8" +
    "\120\uffb8\122\uffb8\125\uffb8\130\uffb8\132\uffb8\135\uffb8\136" +
    "\uffb8\137\uffb8\140\uffb8\141\uffb8\001\002\000\110\003\uffd1" +
    "\004\156\005\160\006\162\007\161\011\157\012\uffd1\013" +
    "\uffd1\014\uffd1\015\uffd1\017\uffd1\023\uffd1\024\174\025\176" +
    "\026\173\027\200\033\uffd1\035\uffd1\037\uffd1\040\uffd1\045" +
    "\uffd1\047\uffd1\051\uffd1\052\uffd1\053\177\056\uffd1\061\uffd1" +
    "\072\uffd1\106\uffd1\120\uffd1\122\uffd1\125\uffd1\130\175\132" +
    "\155\135\uffd1\001\002\000\026\003\172\004\100\005\074" +
    "\016\111\112\105\135\103\136\101\137\076\140\073\141" +
    "\110\001\002\000\126\003\uffb6\004\uffb6\005\uffb6\006\uffb6" +
    "\007\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6" +
    "\033\uffb6\035\uffb6\037\uffb6\040\uffb6\045\uffb6\047\uffb6\051" +
    "\uffb6\052\uffb6\053\uffb6\056\uffb6\061\uffb6\067\uffb6\072\uffb6" +
    "\106\uffb6\112\uffb6\120\uffb6\122\uffb6\125\uffb6\130\uffb6\132" +
    "\uffb6\135\uffb6\136\uffb6\137\uffb6\140\uffb6\141\uffb6\001\002" +
    "\000\040\003\uff8f\012\uff8f\033\132\037\uff8f\040\uff8f\045" +
    "\uff8f\051\uff8f\052\uff8f\056\uff8f\061\uff8f\072\133\106\uff8f" +
    "\122\uff8f\125\uff8f\135\uff8f\001\002\000\114\003\uffc0\004" +
    "\uffc0\005\uffc0\006\uffc0\007\uffc0\011\uffc0\012\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\016\144\017\uffc0\022\143\023\uffc0\024" +
    "\uffc0\025\uffc0\026\uffc0\027\uffc0\033\uffc0\035\uffc0\037\uffc0" +
    "\040\uffc0\045\uffc0\047\uffc0\051\uffc0\052\uffc0\053\uffc0\056" +
    "\uffc0\061\uffc0\072\uffc0\106\uffc0\120\uffc0\122\uffc0\125\uffc0" +
    "\130\uffc0\132\uffc0\135\uffc0\001\002\000\016\004\117\005" +
    "\120\006\122\007\121\132\114\134\116\001\002\000\126" +
    "\003\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\011\uffb5\012" +
    "\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\023\uffb5" +
    "\024\uffb5\025\uffb5\026\uffb5\027\uffb5\033\uffb5\035\uffb5\037" +
    "\uffb5\040\uffb5\045\uffb5\047\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\056\uffb5\061\uffb5\067\uffb5\072\uffb5\106\uffb5\112\uffb5\120" +
    "\uffb5\122\uffb5\125\uffb5\130\uffb5\132\uffb5\135\uffb5\136\uffb5" +
    "\137\uffb5\140\uffb5\141\uffb5\001\002\000\060\003\uffd8\012" +
    "\uffd8\013\uffd8\014\uffd8\015\uffd8\017\uffd8\023\uffd8\033\uffd8" +
    "\035\uffd8\037\uffd8\040\uffd8\045\uffd8\047\uffd8\051\uffd8\052" +
    "\uffd8\056\uffd8\061\uffd8\072\uffd8\106\uffd8\120\uffd8\122\uffd8" +
    "\125\uffd8\135\uffd8\001\002\000\030\003\104\004\100\005" +
    "\074\016\111\067\107\112\105\135\103\136\101\137\076" +
    "\140\073\141\110\001\002\000\126\003\uffb7\004\uffb7\005" +
    "\uffb7\006\uffb7\007\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\023\uffb7\024\uffb7\025\uffb7\026" +
    "\uffb7\027\uffb7\033\uffb7\035\uffb7\037\uffb7\040\uffb7\045\uffb7" +
    "\047\uffb7\051\uffb7\052\uffb7\053\uffb7\056\uffb7\061\uffb7\067" +
    "\uffb7\072\uffb7\106\uffb7\112\uffb7\120\uffb7\122\uffb7\125\uffb7" +
    "\130\uffb7\132\uffb7\135\uffb7\136\uffb7\137\uffb7\140\uffb7\141" +
    "\uffb7\001\002\000\030\003\113\004\100\005\074\016\111" +
    "\067\107\112\105\135\103\136\101\137\076\140\073\141" +
    "\110\001\002\000\010\017\131\033\132\072\133\001\002" +
    "\000\020\004\117\005\120\006\122\007\121\017\115\132" +
    "\114\134\116\001\002\000\004\003\130\001\002\000\110" +
    "\003\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc\011\uffbc\012" +
    "\uffbc\013\uffbc\014\uffbc\015\uffbc\017\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\033\uffbc\035\uffbc\037\uffbc\040" +
    "\uffbc\045\uffbc\047\uffbc\051\uffbc\052\uffbc\053\uffbc\056\uffbc" +
    "\061\uffbc\072\uffbc\106\uffbc\120\uffbc\122\uffbc\125\uffbc\130" +
    "\uffbc\132\uffbc\135\uffbc\001\002\000\004\003\127\001\002" +
    "\000\004\003\126\001\002\000\004\003\125\001\002\000" +
    "\004\003\124\001\002\000\004\003\123\001\002\000\110" +
    "\003\uffce\004\uffce\005\uffce\006\uffce\007\uffce\011\uffce\012" +
    "\uffce\013\uffce\014\uffce\015\uffce\017\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\033\uffce\035\uffce\037\uffce\040" +
    "\uffce\045\uffce\047\uffce\051\uffce\052\uffce\053\uffce\056\uffce" +
    "\061\uffce\072\uffce\106\uffce\120\uffce\122\uffce\125\uffce\130" +
    "\uffce\132\uffce\135\uffce\001\002\000\110\003\uffcd\004\uffcd" +
    "\005\uffcd\006\uffcd\007\uffcd\011\uffcd\012\uffcd\013\uffcd\014" +
    "\uffcd\015\uffcd\017\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\033\uffcd\035\uffcd\037\uffcd\040\uffcd\045\uffcd\047" +
    "\uffcd\051\uffcd\052\uffcd\053\uffcd\056\uffcd\061\uffcd\072\uffcd" +
    "\106\uffcd\120\uffcd\122\uffcd\125\uffcd\130\uffcd\132\uffcd\135" +
    "\uffcd\001\002\000\110\003\uffcf\004\uffcf\005\uffcf\006\uffcf" +
    "\007\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\017" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\033\uffcf" +
    "\035\uffcf\037\uffcf\040\uffcf\045\uffcf\047\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\056\uffcf\061\uffcf\072\uffcf\106\uffcf\120\uffcf" +
    "\122\uffcf\125\uffcf\130\uffcf\132\uffcf\135\uffcf\001\002\000" +
    "\110\003\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0" +
    "\012\uffd0\013\uffd0\014\uffd0\015\uffd0\017\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\033\uffd0\035\uffd0\037\uffd0" +
    "\040\uffd0\045\uffd0\047\uffd0\051\uffd0\052\uffd0\053\uffd0\056" +
    "\uffd0\061\uffd0\072\uffd0\106\uffd0\120\uffd0\122\uffd0\125\uffd0" +
    "\130\uffd0\132\uffd0\135\uffd0\001\002\000\110\003\uffcc\004" +
    "\uffcc\005\uffcc\006\uffcc\007\uffcc\011\uffcc\012\uffcc\013\uffcc" +
    "\014\uffcc\015\uffcc\017\uffcc\023\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\027\uffcc\033\uffcc\035\uffcc\037\uffcc\040\uffcc\045\uffcc" +
    "\047\uffcc\051\uffcc\052\uffcc\053\uffcc\056\uffcc\061\uffcc\072" +
    "\uffcc\106\uffcc\120\uffcc\122\uffcc\125\uffcc\130\uffcc\132\uffcc" +
    "\135\uffcc\001\002\000\110\003\uffcb\004\uffcb\005\uffcb\006" +
    "\uffcb\007\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\017\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\033" +
    "\uffcb\035\uffcb\037\uffcb\040\uffcb\045\uffcb\047\uffcb\051\uffcb" +
    "\052\uffcb\053\uffcb\056\uffcb\061\uffcb\072\uffcb\106\uffcb\120" +
    "\uffcb\122\uffcb\125\uffcb\130\uffcb\132\uffcb\135\uffcb\001\002" +
    "\000\110\003\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\011" +
    "\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\017\uffbf\023\uffbf" +
    "\024\uffbf\025\uffbf\026\uffbf\027\uffbf\033\uffbf\035\uffbf\037" +
    "\uffbf\040\uffbf\045\uffbf\047\uffbf\051\uffbf\052\uffbf\053\uffbf" +
    "\056\uffbf\061\uffbf\072\uffbf\106\uffbf\120\uffbf\122\uffbf\125" +
    "\uffbf\130\uffbf\132\uffbf\135\uffbf\001\002\000\032\003\104" +
    "\004\100\005\074\016\111\067\107\112\105\116\137\135" +
    "\103\136\101\137\076\140\073\141\110\001\002\000\032" +
    "\003\104\004\100\005\074\016\111\051\134\067\107\112" +
    "\105\135\103\136\101\137\076\140\073\141\110\001\002" +
    "\000\030\003\104\004\100\005\074\016\111\067\107\112" +
    "\105\135\103\136\101\137\076\140\073\141\110\001\002" +
    "\000\060\003\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\017" +
    "\uffdb\023\uffdb\033\132\035\uffdb\037\uffdb\040\uffdb\045\uffdb" +
    "\047\uffdb\051\uffdb\052\uffdb\056\uffdb\061\uffdb\072\uffdb\106" +
    "\uffdb\120\uffdb\122\uffdb\125\uffdb\135\uffdb\001\002\000\060" +
    "\003\uffda\012\uffda\013\uffda\014\uffda\015\uffda\017\uffda\023" +
    "\uffda\033\uffda\035\uffda\037\uffda\040\uffda\045\uffda\047\uffda" +
    "\051\uffda\052\uffda\056\uffda\061\uffda\072\uffda\106\uffda\120" +
    "\uffda\122\uffda\125\uffda\135\uffda\001\002\000\030\003\104" +
    "\004\100\005\074\016\111\067\107\112\105\135\103\136" +
    "\101\137\076\140\073\141\110\001\002\000\060\003\uffdd" +
    "\012\uffdd\013\uffdd\014\uffdd\015\uffdd\017\uffdd\023\uffdd\033" +
    "\uffdd\035\uffdd\037\uffdd\040\uffdd\045\uffdd\047\uffdd\051\uffdd" +
    "\052\uffdd\056\uffdd\061\uffdd\072\uffdd\106\uffdd\120\uffdd\122" +
    "\uffdd\125\uffdd\135\uffdd\001\002\000\060\003\uffdc\012\uffdc" +
    "\013\uffdc\014\uffdc\015\uffdc\017\uffdc\023\uffdc\033\132\035" +
    "\uffdc\037\uffdc\040\uffdc\045\uffdc\047\uffdc\051\uffdc\052\uffdc" +
    "\056\uffdc\061\uffdc\072\133\106\uffdc\120\uffdc\122\uffdc\125" +
    "\uffdc\135\uffdc\001\002\000\060\003\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\017\uffd9\023\uffd9\033\uffd9\035\uffd9\037" +
    "\uffd9\040\uffd9\045\uffd9\047\uffd9\051\uffd9\052\uffd9\056\uffd9" +
    "\061\uffd9\072\uffd9\106\uffd9\120\uffd9\122\uffd9\125\uffd9\135" +
    "\uffd9\001\002\000\026\003\104\004\100\005\074\016\111" +
    "\112\105\135\103\136\101\137\076\140\073\141\110\001" +
    "\002\000\032\003\104\004\100\005\074\016\111\017\146" +
    "\067\107\112\105\135\103\136\101\137\076\140\073\141" +
    "\110\001\002\000\012\014\uffea\017\uffea\033\132\072\133" +
    "\001\002\000\110\003\uffc1\004\uffc1\005\uffc1\006\uffc1\007" +
    "\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\017\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\033\uffc1\035" +
    "\uffc1\037\uffc1\040\uffc1\045\uffc1\047\uffc1\051\uffc1\052\uffc1" +
    "\053\uffc1\056\uffc1\061\uffc1\072\uffc1\106\uffc1\120\uffc1\122" +
    "\uffc1\125\uffc1\130\uffc1\132\uffc1\135\uffc1\001\002\000\006" +
    "\014\150\017\151\001\002\000\030\003\104\004\100\005" +
    "\074\016\111\067\107\112\105\135\103\136\101\137\076" +
    "\140\073\141\110\001\002\000\110\003\uffc2\004\uffc2\005" +
    "\uffc2\006\uffc2\007\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2" +
    "\015\uffc2\017\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027" +
    "\uffc2\033\uffc2\035\uffc2\037\uffc2\040\uffc2\045\uffc2\047\uffc2" +
    "\051\uffc2\052\uffc2\053\uffc2\056\uffc2\061\uffc2\072\uffc2\106" +
    "\uffc2\120\uffc2\122\uffc2\125\uffc2\130\uffc2\132\uffc2\135\uffc2" +
    "\001\002\000\012\014\uffeb\017\uffeb\033\132\072\133\001" +
    "\002\000\020\004\156\005\160\006\162\007\161\011\157" +
    "\023\154\132\155\001\002\000\110\003\uffc3\004\uffc3\005" +
    "\uffc3\006\uffc3\007\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3" +
    "\015\uffc3\017\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\033\uffc3\035\uffc3\037\uffc3\040\uffc3\045\uffc3\047\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\056\uffc3\061\uffc3\072\uffc3\106" +
    "\uffc3\120\uffc3\122\uffc3\125\uffc3\130\uffc3\132\uffc3\135\uffc3" +
    "\001\002\000\026\003\104\004\100\005\074\016\111\112" +
    "\105\135\103\136\101\137\076\140\073\141\110\001\002" +
    "\000\026\003\104\004\100\005\074\016\111\112\105\135" +
    "\103\136\101\137\076\140\073\141\110\001\002\000\026" +
    "\003\104\004\100\005\074\016\111\112\105\135\103\136" +
    "\101\137\076\140\073\141\110\001\002\000\026\003\104" +
    "\004\100\005\074\016\111\112\105\135\103\136\101\137" +
    "\076\140\073\141\110\001\002\000\026\003\104\004\100" +
    "\005\074\016\111\112\105\135\103\136\101\137\076\140" +
    "\073\141\110\001\002\000\026\003\104\004\100\005\074" +
    "\016\111\112\105\135\103\136\101\137\076\140\073\141" +
    "\110\001\002\000\110\003\uffc8\004\uffc8\005\uffc8\006\uffc8" +
    "\007\uffc8\011\157\012\uffc8\013\uffc8\014\uffc8\015\uffc8\017" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\033\uffc8" +
    "\035\uffc8\037\uffc8\040\uffc8\045\uffc8\047\uffc8\051\uffc8\052" +
    "\uffc8\053\uffc8\056\uffc8\061\uffc8\072\uffc8\106\uffc8\120\uffc8" +
    "\122\uffc8\125\uffc8\130\uffc8\132\uffc8\135\uffc8\001\002\000" +
    "\110\003\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\011\157" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\017\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\033\uffc7\035\uffc7\037\uffc7" +
    "\040\uffc7\045\uffc7\047\uffc7\051\uffc7\052\uffc7\053\uffc7\056" +
    "\uffc7\061\uffc7\072\uffc7\106\uffc7\120\uffc7\122\uffc7\125\uffc7" +
    "\130\uffc7\132\uffc7\135\uffc7\001\002\000\110\003\uffc9\004" +
    "\uffc9\005\uffc9\006\162\007\161\011\157\012\uffc9\013\uffc9" +
    "\014\uffc9\015\uffc9\017\uffc9\023\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\033\uffc9\035\uffc9\037\uffc9\040\uffc9\045\uffc9" +
    "\047\uffc9\051\uffc9\052\uffc9\053\uffc9\056\uffc9\061\uffc9\072" +
    "\uffc9\106\uffc9\120\uffc9\122\uffc9\125\uffc9\130\uffc9\132\155" +
    "\135\uffc9\001\002\000\110\003\uffc5\004\uffc5\005\uffc5\006" +
    "\uffc5\007\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5" +
    "\017\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\033" +
    "\uffc5\035\uffc5\037\uffc5\040\uffc5\045\uffc5\047\uffc5\051\uffc5" +
    "\052\uffc5\053\uffc5\056\uffc5\061\uffc5\072\uffc5\106\uffc5\120" +
    "\uffc5\122\uffc5\125\uffc5\130\uffc5\132\uffc5\135\uffc5\001\002" +
    "\000\110\003\uffca\004\uffca\005\uffca\006\162\007\161\011" +
    "\157\012\uffca\013\uffca\014\uffca\015\uffca\017\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\033\uffca\035\uffca\037" +
    "\uffca\040\uffca\045\uffca\047\uffca\051\uffca\052\uffca\053\uffca" +
    "\056\uffca\061\uffca\072\uffca\106\uffca\120\uffca\122\uffca\125" +
    "\uffca\130\uffca\132\155\135\uffca\001\002\000\110\003\uffc6" +
    "\004\uffc6\005\uffc6\006\uffc6\007\uffc6\011\157\012\uffc6\013" +
    "\uffc6\014\uffc6\015\uffc6\017\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\026\uffc6\027\uffc6\033\uffc6\035\uffc6\037\uffc6\040\uffc6\045" +
    "\uffc6\047\uffc6\051\uffc6\052\uffc6\053\uffc6\056\uffc6\061\uffc6" +
    "\072\uffc6\106\uffc6\120\uffc6\122\uffc6\125\uffc6\130\uffc6\132" +
    "\uffc6\135\uffc6\001\002\000\110\003\uffbe\004\uffbe\005\uffbe" +
    "\006\uffbe\007\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015" +
    "\uffbe\017\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\033\uffbe\035\uffbe\037\uffbe\040\uffbe\045\uffbe\047\uffbe\051" +
    "\uffbe\052\uffbe\053\uffbe\056\uffbe\061\uffbe\072\uffbe\106\uffbe" +
    "\120\uffbe\122\uffbe\125\uffbe\130\uffbe\132\uffbe\135\uffbe\001" +
    "\002\000\112\003\uffba\004\117\005\120\006\122\007\121" +
    "\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\017\uffba\023" +
    "\uffba\024\uffba\025\uffba\026\uffba\027\uffba\033\uffba\035\uffba" +
    "\037\uffba\040\uffba\045\uffba\047\uffba\051\uffba\052\uffba\053" +
    "\uffba\056\uffba\061\uffba\072\uffba\106\uffba\120\uffba\122\uffba" +
    "\125\uffba\130\uffba\132\114\134\116\135\uffba\001\002\000" +
    "\026\003\104\004\100\005\074\016\111\112\105\135\103" +
    "\136\101\137\076\140\073\141\110\001\002\000\026\003" +
    "\104\004\100\005\074\016\111\112\105\135\103\136\101" +
    "\137\076\140\073\141\110\001\002\000\026\003\104\004" +
    "\100\005\074\016\111\112\105\135\103\136\101\137\076" +
    "\140\073\141\110\001\002\000\026\003\104\004\100\005" +
    "\074\016\111\112\105\135\103\136\101\137\076\140\073" +
    "\141\110\001\002\000\026\003\104\004\100\005\074\016" +
    "\111\112\105\135\103\136\101\137\076\140\073\141\110" +
    "\001\002\000\026\003\104\004\100\005\074\016\111\112" +
    "\105\135\103\136\101\137\076\140\073\141\110\001\002" +
    "\000\074\003\uffd2\004\156\005\160\006\162\007\161\011" +
    "\157\012\uffd2\013\uffd2\014\uffd2\015\uffd2\017\uffd2\023\uffd2" +
    "\033\uffd2\035\uffd2\037\uffd2\040\uffd2\045\uffd2\047\uffd2\051" +
    "\uffd2\052\uffd2\056\uffd2\061\uffd2\072\uffd2\106\uffd2\120\uffd2" +
    "\122\uffd2\125\uffd2\132\155\135\uffd2\001\002\000\074\003" +
    "\uffd7\004\156\005\160\006\162\007\161\011\157\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\017\uffd7\023\uffd7\033\uffd7\035" +
    "\uffd7\037\uffd7\040\uffd7\045\uffd7\047\uffd7\051\uffd7\052\uffd7" +
    "\056\uffd7\061\uffd7\072\uffd7\106\uffd7\120\uffd7\122\uffd7\125" +
    "\uffd7\132\155\135\uffd7\001\002\000\074\003\uffd4\004\156" +
    "\005\160\006\162\007\161\011\157\012\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\017\uffd4\023\uffd4\033\uffd4\035\uffd4\037\uffd4" +
    "\040\uffd4\045\uffd4\047\uffd4\051\uffd4\052\uffd4\056\uffd4\061" +
    "\uffd4\072\uffd4\106\uffd4\120\uffd4\122\uffd4\125\uffd4\132\155" +
    "\135\uffd4\001\002\000\074\003\uffd6\004\156\005\160\006" +
    "\162\007\161\011\157\012\uffd6\013\uffd6\014\uffd6\015\uffd6" +
    "\017\uffd6\023\uffd6\033\uffd6\035\uffd6\037\uffd6\040\uffd6\045" +
    "\uffd6\047\uffd6\051\uffd6\052\uffd6\056\uffd6\061\uffd6\072\uffd6" +
    "\106\uffd6\120\uffd6\122\uffd6\125\uffd6\132\155\135\uffd6\001" +
    "\002\000\074\003\uffd5\004\156\005\160\006\162\007\161" +
    "\011\157\012\uffd5\013\uffd5\014\uffd5\015\uffd5\017\uffd5\023" +
    "\uffd5\033\uffd5\035\uffd5\037\uffd5\040\uffd5\045\uffd5\047\uffd5" +
    "\051\uffd5\052\uffd5\056\uffd5\061\uffd5\072\uffd5\106\uffd5\120" +
    "\uffd5\122\uffd5\125\uffd5\132\155\135\uffd5\001\002\000\074" +
    "\003\uffd3\004\156\005\160\006\162\007\161\011\157\012" +
    "\uffd3\013\uffd3\014\uffd3\015\uffd3\017\uffd3\023\uffd3\033\uffd3" +
    "\035\uffd3\037\uffd3\040\uffd3\045\uffd3\047\uffd3\051\uffd3\052" +
    "\uffd3\056\uffd3\061\uffd3\072\uffd3\106\uffd3\120\uffd3\122\uffd3" +
    "\125\uffd3\132\155\135\uffd3\001\002\000\110\003\uffbd\004" +
    "\uffbd\005\uffbd\006\uffbd\007\uffbd\011\uffbd\012\uffbd\013\uffbd" +
    "\014\uffbd\015\uffbd\017\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\027\uffbd\033\uffbd\035\uffbd\037\uffbd\040\uffbd\045\uffbd" +
    "\047\uffbd\051\uffbd\052\uffbd\053\uffbd\056\uffbd\061\uffbd\072" +
    "\uffbd\106\uffbd\120\uffbd\122\uffbd\125\uffbd\130\uffbd\132\uffbd" +
    "\135\uffbd\001\002\000\112\003\uffbb\004\uffbb\005\uffbb\006" +
    "\uffbb\007\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb" +
    "\017\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\033" +
    "\uffbb\035\uffbb\037\uffbb\040\uffbb\045\uffbb\047\uffbb\051\uffbb" +
    "\052\uffbb\053\uffbb\056\uffbb\061\uffbb\072\uffbb\106\uffbb\120" +
    "\uffbb\122\uffbb\125\uffbb\130\uffbb\132\uffbb\134\116\135\uffbb" +
    "\001\002\000\004\052\212\001\002\000\004\012\213\001" +
    "\002\000\034\003\uff8c\012\uff8c\037\uff8c\040\uff8c\045\uff8c" +
    "\051\uff8c\052\uff8c\056\uff8c\061\uff8c\106\uff8c\122\uff8c\125" +
    "\uff8c\135\uff8c\001\002\000\034\003\uff8e\012\uff8e\037\uff8e" +
    "\040\uff8e\045\uff8e\051\uff8e\052\uff8e\056\uff8e\061\uff8e\106" +
    "\uff8e\122\uff8e\125\uff8e\135\uff8e\001\002\000\006\003\216" +
    "\127\217\001\002\000\030\003\104\004\100\005\074\016" +
    "\111\067\107\112\105\135\103\136\101\137\076\140\073" +
    "\141\110\001\002\000\030\003\221\004\100\005\074\016" +
    "\111\067\107\112\105\135\103\136\101\137\076\140\073" +
    "\141\110\001\002\000\010\033\132\072\133\120\226\001" +
    "\002\000\020\004\117\005\120\006\122\007\121\120\222" +
    "\132\114\134\116\001\002\000\030\003\104\004\100\005" +
    "\074\016\111\067\107\112\105\135\103\136\101\137\076" +
    "\140\073\141\110\001\002\000\010\033\132\047\224\072" +
    "\133\001\002\000\026\003\060\035\067\037\054\040\057" +
    "\045\044\056\064\061\051\106\065\125\046\135\052\001" +
    "\002\000\034\003\uff91\012\uff91\037\uff91\040\uff91\045\uff91" +
    "\051\uff91\052\uff91\056\uff91\061\uff91\106\uff91\122\uff91\125" +
    "\uff91\135\uff91\001\002\000\030\003\104\004\100\005\074" +
    "\016\111\067\107\112\105\135\103\136\101\137\076\140" +
    "\073\141\110\001\002\000\010\033\132\047\230\072\133" +
    "\001\002\000\026\003\060\035\067\037\054\040\057\045" +
    "\044\056\064\061\051\106\065\125\046\135\052\001\002" +
    "\000\034\003\uff92\012\uff92\037\uff92\040\uff92\045\uff92\051" +
    "\uff92\052\uff92\056\uff92\061\uff92\106\uff92\122\uff92\125\uff92" +
    "\135\uff92\001\002\000\010\033\132\072\133\120\233\001" +
    "\002\000\030\003\104\004\100\005\074\016\111\067\107" +
    "\112\105\135\103\136\101\137\076\140\073\141\110\001" +
    "\002\000\010\033\132\047\235\072\133\001\002\000\026" +
    "\003\060\035\067\037\054\040\057\045\044\056\064\061" +
    "\051\106\065\125\046\135\052\001\002\000\034\003\uff90" +
    "\012\uff90\037\uff90\040\uff90\045\uff90\051\uff90\052\uff90\056" +
    "\uff90\061\uff90\106\uff90\122\uff90\125\uff90\135\uff90\001\002" +
    "\000\034\003\uffac\012\uffac\037\uffac\040\uffac\045\uffac\051" +
    "\uffac\052\uffac\056\uffac\061\uffac\106\uffac\122\uffac\125\uffac" +
    "\135\uffac\001\002\000\034\003\uffb4\012\245\037\uffb4\040" +
    "\uffb4\045\uffb4\051\246\052\uffb4\056\uffb4\061\uffb4\106\uffb4" +
    "\122\uffb4\125\uffb4\135\uffb4\001\002\000\026\003\060\037" +
    "\054\040\057\045\044\052\uff8a\056\064\061\051\106\065" +
    "\125\046\135\052\001\002\000\034\003\uffab\012\uffab\037" +
    "\uffab\040\uffab\045\uffab\051\uffab\052\uffab\056\uffab\061\uffab" +
    "\106\uffab\122\uffab\125\uffab\135\uffab\001\002\000\004\052" +
    "\244\001\002\000\034\003\uffaa\012\uffaa\037\uffaa\040\uffaa" +
    "\045\uffaa\051\uffaa\052\uffaa\056\uffaa\061\uffaa\106\uffaa\122" +
    "\uffaa\125\uffaa\135\uffaa\001\002\000\034\003\uffb3\012\uffb3" +
    "\037\uffb3\040\uffb3\045\uffb3\051\uffb3\052\uffb3\056\uffb3\061" +
    "\uffb3\106\uffb3\122\uffb3\125\uffb3\135\uffb3\001\002\000\026" +
    "\003\060\035\256\037\054\040\057\045\044\056\064\061" +
    "\051\106\065\125\046\135\052\001\002\000\004\012\uffa4" +
    "\001\002\000\004\012\uffa1\001\002\000\004\012\uffa3\001" +
    "\002\000\004\012\263\001\002\000\004\012\uffa6\001\002" +
    "\000\034\003\uffb2\012\uffb2\037\uffb2\040\uffb2\045\uffb2\051" +
    "\uffb2\052\uffb2\056\uffb2\061\uffb2\106\uffb2\122\uffb2\125\uffb2" +
    "\135\uffb2\001\002\000\004\012\uffa7\001\002\000\026\003" +
    "\060\037\054\040\057\045\044\052\uff8a\056\064\061\051" +
    "\106\065\125\046\135\052\001\002\000\034\003\uffa8\012" +
    "\uffa8\037\uffa8\040\uffa8\045\uffa8\051\uffa8\052\uffa8\056\uffa8" +
    "\061\uffa8\106\uffa8\122\uffa8\125\uffa8\135\uffa8\001\002\000" +
    "\004\012\uffa2\001\002\000\004\052\262\001\002\000\004" +
    "\012\uffa5\001\002\000\034\003\uffa9\012\uffa9\037\uffa9\040" +
    "\uffa9\045\uffa9\051\uffa9\052\uffa9\056\uffa9\061\uffa9\106\uffa9" +
    "\122\uffa9\125\uffa9\135\uffa9\001\002\000\004\012\265\001" +
    "\002\000\010\030\uff6d\057\uff6d\100\uff6d\001\002\000\030" +
    "\003\104\004\100\005\074\016\111\067\107\112\105\135" +
    "\103\136\101\137\076\140\073\141\110\001\002\000\010" +
    "\017\270\033\132\072\133\001\002\000\004\071\271\001" +
    "\002\000\030\003\104\004\100\005\074\016\111\067\107" +
    "\112\105\135\103\136\101\137\076\140\073\141\110\001" +
    "\002\000\032\003\104\004\100\005\074\016\111\051\310" +
    "\067\107\112\105\135\103\136\101\137\076\140\073\141" +
    "\110\001\002\000\006\013\276\014\275\001\002\000\012" +
    "\013\uff9c\014\uff9c\033\132\072\133\001\002\000\030\003" +
    "\104\004\100\005\074\016\111\067\107\112\105\135\103" +
    "\136\101\137\076\140\073\141\110\001\002\000\026\003" +
    "\060\035\301\037\054\040\057\045\044\056\064\061\051" +
    "\106\065\125\046\135\052\001\002\000\004\012\305\001" +
    "\002\000\004\012\uff9b\001\002\000\026\003\060\037\054" +
    "\040\057\045\044\052\uff8a\056\064\061\051\106\065\125" +
    "\046\135\052\001\002\000\004\012\uff9a\001\002\000\004" +
    "\052\304\001\002\000\004\012\uff99\001\002\000\032\003" +
    "\uff9e\004\uff9e\005\uff9e\016\uff9e\051\uff9e\067\uff9e\112\uff9e" +
    "\135\uff9e\136\uff9e\137\uff9e\140\uff9e\141\uff9e\001\002\000" +
    "\012\013\uff9d\014\uff9d\033\132\072\133\001\002\000\006" +
    "\013\321\014\275\001\002\000\026\003\060\035\312\037" +
    "\054\040\057\045\044\056\064\061\051\106\065\125\046" +
    "\135\052\001\002\000\006\012\320\052\uff98\001\002\000" +
    "\026\003\060\037\054\040\057\045\044\052\uff8a\056\064" +
    "\061\051\106\065\125\046\135\052\001\002\000\004\052" +
    "\uff96\001\002\000\004\052\315\001\002\000\004\012\316" +
    "\001\002\000\034\003\uffa0\012\uffa0\037\uffa0\040\uffa0\045" +
    "\uffa0\051\uffa0\052\uffa0\056\uffa0\061\uffa0\106\uffa0\122\uffa0" +
    "\125\uffa0\135\uffa0\001\002\000\004\052\uff95\001\002\000" +
    "\004\052\uff97\001\002\000\026\003\060\035\301\037\054" +
    "\040\057\045\044\056\064\061\051\106\065\125\046\135" +
    "\052\001\002\000\004\012\323\001\002\000\032\003\uff9f" +
    "\004\uff9f\005\uff9f\016\uff9f\051\uff9f\067\uff9f\112\uff9f\135" +
    "\uff9f\136\uff9f\137\uff9f\140\uff9f\141\uff9f\001\002\000\010" +
    "\003\331\012\330\052\uff83\001\002\000\026\003\060\037" +
    "\054\040\057\045\044\052\uff7f\056\064\061\051\106\065" +
    "\125\046\135\052\001\002\000\004\052\uff85\001\002\000" +
    "\004\052\uff80\001\002\000\026\003\060\037\054\040\057" +
    "\045\044\052\uff82\056\064\061\051\106\065\125\046\135" +
    "\052\001\002\000\004\052\uff84\001\002\000\004\052\uff81" +
    "\001\002\000\030\003\104\004\100\005\074\016\111\067" +
    "\107\112\105\135\103\136\101\137\076\140\073\141\110" +
    "\001\002\000\030\003\104\004\100\005\074\016\111\067" +
    "\107\112\105\135\103\136\101\137\076\140\073\141\110" +
    "\001\002\000\032\003\104\004\100\005\074\016\111\017" +
    "\336\067\107\112\105\135\103\136\101\137\076\140\073" +
    "\141\110\001\002\000\034\003\uff7a\012\uff7a\037\uff7a\040" +
    "\uff7a\045\uff7a\051\uff7a\052\uff7a\056\uff7a\061\uff7a\106\uff7a" +
    "\122\uff7a\125\uff7a\135\uff7a\001\002\000\006\014\150\017" +
    "\340\001\002\000\034\003\uff7b\012\uff7b\037\uff7b\040\uff7b" +
    "\045\uff7b\051\uff7b\052\uff7b\056\uff7b\061\uff7b\106\uff7b\122" +
    "\uff7b\125\uff7b\135\uff7b\001\002\000\010\023\342\033\132" +
    "\072\133\001\002\000\004\127\343\001\002\000\030\003" +
    "\104\004\100\005\074\016\111\067\107\112\105\135\103" +
    "\136\101\137\076\140\073\141\110\001\002\000\040\003" +
    "\uff79\012\uff79\033\132\037\uff79\040\uff79\045\uff79\051\uff79" +
    "\052\uff79\056\uff79\061\uff79\072\133\106\uff79\122\uff79\125" +
    "\uff79\135\uff79\001\002\000\040\003\uff7c\012\uff7c\033\132" +
    "\037\uff7c\040\uff7c\045\uff7c\051\uff7c\052\uff7c\056\uff7c\061" +
    "\uff7c\072\133\106\uff7c\122\uff7c\125\uff7c\135\uff7c\001\002" +
    "\000\030\003\104\004\100\005\074\016\111\067\107\112" +
    "\105\135\103\136\101\137\076\140\073\141\110\001\002" +
    "\000\030\003\351\004\100\005\074\016\111\067\107\112" +
    "\105\135\103\136\101\137\076\140\073\141\110\001\002" +
    "\000\012\003\355\017\354\033\132\072\133\001\002\000" +
    "\020\004\117\005\120\006\122\007\121\017\352\132\114" +
    "\134\116\001\002\000\004\116\353\001\002\000\026\003" +
    "\uffb0\035\uffb0\037\uffb0\040\uffb0\045\uffb0\056\uffb0\061\uffb0" +
    "\106\uffb0\125\uffb0\135\uffb0\001\002\000\004\116\357\001" +
    "\002\000\004\116\356\001\002\000\026\003\uffaf\035\uffaf" +
    "\037\uffaf\040\uffaf\045\uffaf\056\uffaf\061\uffaf\106\uffaf\125" +
    "\uffaf\135\uffaf\001\002\000\026\003\uffb1\035\uffb1\037\uffb1" +
    "\040\uffb1\045\uffb1\056\uffb1\061\uffb1\106\uffb1\125\uffb1\135" +
    "\uffb1\001\002\000\012\003\362\017\361\033\132\072\133" +
    "\001\002\000\004\116\364\001\002\000\004\116\363\001" +
    "\002\000\026\003\uffad\035\uffad\037\uffad\040\uffad\045\uffad" +
    "\056\uffad\061\uffad\106\uffad\125\uffad\135\uffad\001\002\000" +
    "\026\003\uffae\035\uffae\037\uffae\040\uffae\045\uffae\056\uffae" +
    "\061\uffae\106\uffae\125\uffae\135\uffae\001\002\000\026\003" +
    "\060\037\054\040\057\045\044\052\uff88\056\064\061\051" +
    "\106\065\125\046\135\052\001\002\000\004\052\uff86\001" +
    "\002\000\030\003\371\004\100\005\074\016\111\067\107" +
    "\112\105\135\103\136\101\137\076\140\073\141\110\001" +
    "\002\000\010\017\375\033\132\072\133\001\002\000\020" +
    "\004\117\005\120\006\122\007\121\017\372\132\114\134" +
    "\116\001\002\000\004\047\373\001\002\000\026\003\060" +
    "\035\067\037\054\040\057\045\044\056\064\061\051\106" +
    "\065\125\046\135\052\001\002\000\034\003\uff93\012\uff93" +
    "\037\uff93\040\uff93\045\uff93\051\uff93\052\uff93\056\uff93\061" +
    "\uff93\106\uff93\122\uff93\125\uff93\135\uff93\001\002\000\004" +
    "\047\376\001\002\000\026\003\060\035\067\037\054\040" +
    "\057\045\044\056\064\061\051\106\065\125\046\135\052" +
    "\001\002\000\034\003\uff94\012\uff94\037\uff94\040\uff94\045" +
    "\uff94\051\uff94\052\uff94\056\uff94\061\uff94\106\uff94\122\uff94" +
    "\125\uff94\135\uff94\001\002\000\006\035\uffe9\135\017\001" +
    "\002\000\004\135\017\001\002\000\010\003\u0108\013\u0109" +
    "\014\u0107\001\002\000\006\003\u0105\012\u0104\001\002\000" +
    "\006\035\uffe6\135\uffe6\001\002\000\004\135\017\001\002" +
    "\000\006\035\uffe3\135\uffe3\001\002\000\004\135\u0122\001" +
    "\002\000\044\003\u0119\004\100\005\074\016\111\034\u011a" +
    "\036\035\041\030\055\032\064\033\067\107\112\105\113" +
    "\034\135\u0115\136\101\137\076\140\073\141\110\001\002" +
    "\000\022\003\031\034\u010a\036\035\041\030\055\032\064" +
    "\033\113\034\135\026\001\002\000\004\022\u010d\001\002" +
    "\000\012\003\uffe2\012\uffe2\035\uffe2\135\uffe2\001\002\000" +
    "\004\071\u0113\001\002\000\030\003\104\004\100\005\074" +
    "\016\111\067\107\112\105\135\103\136\101\137\076\140" +
    "\073\141\110\001\002\000\010\015\u010f\033\132\072\133" +
    "\001\002\000\004\015\u0110\001\002\000\030\003\104\004" +
    "\100\005\074\016\111\067\107\112\105\135\103\136\101" +
    "\137\076\140\073\141\110\001\002\000\010\023\u0112\033" +
    "\132\072\133\001\002\000\004\071\ufff3\001\002\000\020" +
    "\003\031\036\035\041\030\055\032\064\033\113\034\135" +
    "\026\001\002\000\012\003\uffe1\012\uffe1\035\uffe1\135\uffe1" +
    "\001\002\000\054\003\ufff8\004\uffc0\005\uffc0\006\uffc0\007" +
    "\uffc0\011\uffc0\012\ufff8\015\uffc0\016\144\022\143\024\uffc0" +
    "\025\uffc0\026\uffc0\027\uffc0\033\uffc0\035\ufff8\053\uffc0\072" +
    "\uffc0\130\uffc0\132\uffc0\135\ufff8\001\002\000\012\003\uffe0" +
    "\012\uffe0\035\uffe0\135\uffe0\001\002\000\010\015\u011e\033" +
    "\132\072\133\001\002\000\012\003\uffdf\012\uffdf\035\uffdf" +
    "\135\uffdf\001\002\000\026\003\ufff7\004\117\005\120\006" +
    "\122\007\121\012\ufff7\035\ufff7\132\114\134\116\135\ufff7" +
    "\001\002\000\004\022\u010d\001\002\000\004\071\u011c\001" +
    "\002\000\020\003\031\036\035\041\030\055\032\064\033" +
    "\113\034\135\026\001\002\000\012\003\uffde\012\uffde\035" +
    "\uffde\135\uffde\001\002\000\004\015\u011f\001\002\000\004" +
    "\015\u0120\001\002\000\030\003\104\004\100\005\074\016" +
    "\111\067\107\112\105\135\103\136\101\137\076\140\073" +
    "\141\110\001\002\000\016\003\ufff4\012\ufff4\033\132\035" +
    "\ufff4\072\133\135\ufff4\001\002\000\010\003\ufff6\013\ufff6" +
    "\014\ufff6\001\002\000\006\035\uffe4\135\uffe4\001\002\000" +
    "\006\003\u0126\012\u0125\001\002\000\006\035\uffe7\135\uffe7" +
    "\001\002\000\004\135\017\001\002\000\006\035\uffe5\135" +
    "\uffe5\001\002\000\006\014\uff67\017\uff67\001\002\000\020" +
    "\003\031\036\035\041\030\055\032\064\033\113\034\135" +
    "\026\001\002\000\006\014\uff63\017\uff63\001\002\000\006" +
    "\013\u012c\014\u0107\001\002\000\020\003\031\036\035\041" +
    "\030\055\032\064\033\113\034\135\026\001\002\000\006" +
    "\014\uff64\017\uff64\001\002\000\004\135\u0133\001\002\000" +
    "\004\030\ufffe\001\002\000\006\030\uff69\100\uff69\001\002" +
    "\000\006\030\uff6c\100\u012e\001\002\000\006\030\uff6a\100" +
    "\uff6a\001\002\000\004\016\u0134\001\002\000\012\014\uff65" +
    "\017\uff65\123\016\135\017\001\002\000\006\014\023\017" +
    "\u0136\001\002\000\004\012\u0137\001\002\000\006\035\uffe8" +
    "\123\037\001\002\000\004\035\u0139\001\002\000\026\003" +
    "\060\037\054\040\057\045\044\052\uff8a\056\064\061\051" +
    "\106\065\125\046\135\052\001\002\000\004\052\u013b\001" +
    "\002\000\004\012\u013c\001\002\000\006\030\uff68\100\uff68" +
    "\001\002\000\010\030\uff6f\057\uff6f\100\uff6f\001\002\000" +
    "\004\032\u01f8\001\002\000\006\032\uff56\103\uff56\001\002" +
    "\000\006\032\uff62\103\u0142\001\002\000\006\032\uff57\103" +
    "\uff57\001\002\000\004\042\u0143\001\002\000\004\135\u0144" +
    "\001\002\000\006\020\uff53\054\u0145\001\002\000\004\135" +
    "\u01f6\001\002\000\004\020\u0147\001\002\000\030\021\uff51" +
    "\036\uff5e\041\uff5e\055\uff5e\064\uff5e\077\u014d\102\u0149\103" +
    "\u014c\113\uff5e\124\uff5e\135\uff5e\001\002\000\020\036\u0156" +
    "\041\u0151\055\u0153\064\u0154\113\u0155\124\u0157\135\u0150\001" +
    "\002\000\020\036\uff5f\041\uff5f\055\uff5f\064\uff5f\113\uff5f" +
    "\124\uff5f\135\uff5f\001\002\000\004\021\u014f\001\002\000" +
    "\030\021\uff51\036\uff5e\041\uff5e\055\uff5e\064\uff5e\077\u014d" +
    "\102\u0149\103\u014c\113\uff5e\124\uff5e\135\uff5e\001\002\000" +
    "\020\036\uff61\041\uff61\055\uff61\064\uff61\113\uff61\124\uff61" +
    "\135\uff61\001\002\000\020\036\uff60\041\uff60\055\uff60\064" +
    "\uff60\113\uff60\124\uff60\135\uff60\001\002\000\004\021\uff52" +
    "\001\002\000\006\032\uff55\103\uff55\001\002\000\006\016" +
    "\u01f0\135\uff58\001\002\000\006\022\uff59\135\uff59\001\002" +
    "\000\004\135\u01e4\001\002\000\006\022\uff5b\135\uff5b\001" +
    "\002\000\006\022\uff5d\135\uff5d\001\002\000\006\022\uff5c" +
    "\135\uff5c\001\002\000\006\022\uff5a\135\uff5a\001\002\000" +
    "\004\135\u0158\001\002\000\004\016\u015a\001\002\000\030" +
    "\021\uff4f\036\uff4f\041\uff4f\055\uff4f\064\uff4f\077\uff4f\102" +
    "\uff4f\103\uff4f\113\uff4f\124\uff4f\135\uff4f\001\002\000\020" +
    "\017\uff46\036\u0156\041\u0151\055\u0153\064\u0154\113\u0155\135" +
    "\u015e\001\002\000\006\014\uff44\017\uff44\001\002\000\004" +
    "\017\u0169\001\002\000\006\022\u0164\135\u0162\001\002\000" +
    "\006\022\uff58\135\uff58\001\002\000\006\014\u0160\017\uff47" +
    "\001\002\000\016\036\u0156\041\u0151\055\u0153\064\u0154\113" +
    "\u0155\135\u015e\001\002\000\006\014\uff45\017\uff45\001\002" +
    "\000\006\014\uff43\017\uff43\001\002\000\006\022\u0164\135" +
    "\u0167\001\002\000\004\023\u0166\001\002\000\012\012\uff40" +
    "\022\uff40\127\uff40\135\uff40\001\002\000\012\012\uff3f\022" +
    "\uff3f\127\uff3f\135\uff3f\001\002\000\006\014\uff42\017\uff42" +
    "\001\002\000\012\012\uff41\022\uff41\127\uff41\135\uff41\001" +
    "\002\000\004\020\u016a\001\002\000\020\037\u0177\045\u0174" +
    "\047\u0175\056\u016d\061\u016e\115\u0172\125\u016b\001\002\000" +
    "\004\016\u01de\001\002\000\010\021\uff3e\040\uff3e\046\uff3e" +
    "\001\002\000\004\017\u01d4\001\002\000\004\016\u01c8\001" +
    "\002\000\010\021\uff3b\040\uff3b\046\uff3b\001\002\000\004" +
    "\021\u01c7\001\002\000\010\021\uff3c\040\uff3c\046\uff3c\001" +
    "\002\000\004\016\u01b8\001\002\000\010\021\uff3a\040\uff3a" +
    "\046\uff3a\001\002\000\004\012\u01b7\001\002\000\004\020" +
    "\u0179\001\002\000\010\021\uff3d\040\uff3d\046\uff3d\001\002" +
    "\000\004\012\u0178\001\002\000\010\021\uff39\040\uff39\046" +
    "\uff39\001\002\000\020\037\u0177\045\u0174\047\u0175\056\u016d" +
    "\061\u016e\115\u0172\125\u016b\001\002\000\004\021\u017b\001" +
    "\002\000\004\125\u017c\001\002\000\004\016\u017d\001\002" +
    "\000\026\004\u0181\005\u017e\016\u0186\067\u0185\112\105\135" +
    "\u0183\136\101\137\076\140\073\141\110\001\002\000\024" +
    "\004\u0181\005\u017e\016\u0186\112\105\135\u0183\136\101\137" +
    "\076\140\073\141\110\001\002\000\066\004\u019f\005\u01a1" +
    "\006\u01a3\007\u01a2\011\u01a0\012\uff21\013\uff21\016\uff21\017" +
    "\uff21\023\uff21\024\u01ab\025\u01ad\026\u01aa\027\u01af\033\uff21" +
    "\053\u01ae\067\uff21\072\uff21\112\uff21\130\u01ac\132\u019e\135" +
    "\uff21\136\uff21\137\uff21\140\uff21\141\uff21\001\002\000\066" +
    "\004\uff1a\005\uff1a\006\uff1a\007\uff1a\011\uff1a\012\uff1a\013" +
    "\uff1a\016\uff1a\017\uff1a\023\uff1a\024\uff1a\025\uff1a\026\uff1a" +
    "\027\uff1a\033\uff1a\053\uff1a\067\uff1a\072\uff1a\112\uff1a\130" +
    "\uff1a\132\uff1a\135\uff1a\136\uff1a\137\uff1a\140\uff1a\141\uff1a" +
    "\001\002\000\024\004\u0181\005\u017e\016\u0186\112\105\135" +
    "\u0183\136\101\137\076\140\073\141\110\001\002\000\042" +
    "\004\uff28\005\uff28\012\uff28\013\uff28\016\uff28\017\uff28\023" +
    "\uff28\033\uff28\067\uff28\072\uff28\112\uff28\135\uff28\136\uff28" +
    "\137\uff28\140\uff28\141\uff28\001\002\000\070\004\uff16\005" +
    "\uff16\006\uff16\007\uff16\011\uff16\012\uff16\013\uff16\016\uff16" +
    "\017\uff16\022\u0191\023\uff16\024\uff16\025\uff16\026\uff16\027" +
    "\uff16\033\uff16\053\uff16\067\uff16\072\uff16\112\uff16\130\uff16" +
    "\132\uff16\135\uff16\136\uff16\137\uff16\140\uff16\141\uff16\001" +
    "\002\000\010\017\u018e\033\u0189\072\u018a\001\002\000\026" +
    "\004\u0181\005\u017e\016\u0186\067\u0185\112\105\135\u0183\136" +
    "\101\137\076\140\073\141\110\001\002\000\026\004\u0181" +
    "\005\u017e\016\u0186\067\u0185\112\105\135\u0183\136\101\137" +
    "\076\140\073\141\110\001\002\000\010\017\u0188\033\u0189" +
    "\072\u018a\001\002\000\066\004\uff15\005\uff15\006\uff15\007" +
    "\uff15\011\uff15\012\uff15\013\uff15\016\uff15\017\uff15\023\uff15" +
    "\024\uff15\025\uff15\026\uff15\027\uff15\033\uff15\053\uff15\067" +
    "\uff15\072\uff15\112\uff15\130\uff15\132\uff15\135\uff15\136\uff15" +
    "\137\uff15\140\uff15\141\uff15\001\002\000\026\004\u0181\005" +
    "\u017e\016\u0186\067\u0185\112\105\135\u0183\136\101\137\076" +
    "\140\073\141\110\001\002\000\026\004\u0181\005\u017e\016" +
    "\u0186\067\u0185\112\105\135\u0183\136\101\137\076\140\073" +
    "\141\110\001\002\000\042\004\uff2a\005\uff2a\012\uff2a\013" +
    "\uff2a\016\uff2a\017\uff2a\023\uff2a\033\u0189\067\uff2a\072\uff2a" +
    "\112\uff2a\135\uff2a\136\uff2a\137\uff2a\140\uff2a\141\uff2a\001" +
    "\002\000\042\004\uff2b\005\uff2b\012\uff2b\013\uff2b\016\uff2b" +
    "\017\uff2b\023\uff2b\033\uff2b\067\uff2b\072\uff2b\112\uff2b\135" +
    "\uff2b\136\uff2b\137\uff2b\140\uff2b\141\uff2b\001\002\000\042" +
    "\004\uff29\005\uff29\012\uff29\013\uff29\016\uff29\017\uff29\023" +
    "\uff29\033\uff29\067\uff29\072\uff29\112\uff29\135\uff29\136\uff29" +
    "\137\uff29\140\uff29\141\uff29\001\002\000\004\012\u018f\001" +
    "\002\000\010\021\uff32\040\uff32\046\uff32\001\002\000\070" +
    "\004\uff19\005\uff19\006\uff19\007\uff19\011\uff19\012\uff19\013" +
    "\uff19\016\uff19\017\uff19\022\u019a\023\uff19\024\uff19\025\uff19" +
    "\026\uff19\027\uff19\033\uff19\053\uff19\067\uff19\072\uff19\112" +
    "\uff19\130\uff19\132\uff19\135\uff19\136\uff19\137\uff19\140\uff19" +
    "\141\uff19\001\002\000\026\004\u0181\005\u017e\016\u0186\067" +
    "\u0185\112\105\135\u0183\136\101\137\076\140\073\141\110" +
    "\001\002\000\030\004\u0181\005\u017e\016\u0186\017\u0195\067" +
    "\u0185\112\105\135\u0183\136\101\137\076\140\073\141\110" +
    "\001\002\000\030\004\u0181\005\u017e\016\u0186\017\u0197\067" +
    "\u0185\112\105\135\u0183\136\101\137\076\140\073\141\110" +
    "\001\002\000\034\004\uff11\005\uff11\016\uff11\017\uff11\033" +
    "\u0189\067\uff11\072\u018a\112\uff11\135\uff11\136\uff11\137\uff11" +
    "\140\uff11\141\uff11\001\002\000\066\004\uff17\005\uff17\006" +
    "\uff17\007\uff17\011\uff17\012\uff17\013\uff17\016\uff17\017\uff17" +
    "\023\uff17\024\uff17\025\uff17\026\uff17\027\uff17\033\uff17\053" +
    "\uff17\067\uff17\072\uff17\112\uff17\130\uff17\132\uff17\135\uff17" +
    "\136\uff17\137\uff17\140\uff17\141\uff17\001\002\000\034\004" +
    "\uff12\005\uff12\016\uff12\017\uff12\033\u0189\067\uff12\072\u018a" +
    "\112\uff12\135\uff12\136\uff12\137\uff12\140\uff12\141\uff12\001" +
    "\002\000\066\004\uff18\005\uff18\006\uff18\007\uff18\011\uff18" +
    "\012\uff18\013\uff18\016\uff18\017\uff18\023\uff18\024\uff18\025" +
    "\uff18\026\uff18\027\uff18\033\uff18\053\uff18\067\uff18\072\uff18" +
    "\112\uff18\130\uff18\132\uff18\135\uff18\136\uff18\137\uff18\140" +
    "\uff18\141\uff18\001\002\000\010\023\u0199\033\u0189\072\u018a" +
    "\001\002\000\070\004\uff10\005\uff10\006\uff10\007\uff10\011" +
    "\uff10\012\uff10\013\uff10\016\uff10\017\uff10\022\uff10\023\uff10" +
    "\024\uff10\025\uff10\026\uff10\027\uff10\033\uff10\053\uff10\067" +
    "\uff10\072\uff10\112\uff10\130\uff10\132\uff10\135\uff10\136\uff10" +
    "\137\uff10\140\uff10\141\uff10\001\002\000\026\004\u0181\005" +
    "\u017e\016\u0186\067\u0185\112\105\135\u0183\136\101\137\076" +
    "\140\073\141\110\001\002\000\010\023\u019c\033\u0189\072" +
    "\u018a\001\002\000\070\004\uff0f\005\uff0f\006\uff0f\007\uff0f" +
    "\011\uff0f\012\uff0f\013\uff0f\016\uff0f\017\uff0f\022\uff0f\023" +
    "\uff0f\024\uff0f\025\uff0f\026\uff0f\027\uff0f\033\uff0f\053\uff0f" +
    "\067\uff0f\072\uff0f\112\uff0f\130\uff0f\132\uff0f\135\uff0f\136" +
    "\uff0f\137\uff0f\140\uff0f\141\uff0f\001\002\000\066\004\uff14" +
    "\005\uff14\006\uff14\007\uff14\011\uff14\012\uff14\013\uff14\016" +
    "\uff14\017\uff14\023\uff14\024\uff14\025\uff14\026\uff14\027\uff14" +
    "\033\uff14\053\uff14\067\uff14\072\uff14\112\uff14\130\uff14\132" +
    "\uff14\135\uff14\136\uff14\137\uff14\140\uff14\141\uff14\001\002" +
    "\000\024\004\u0181\005\u017e\016\u0186\112\105\135\u0183\136" +
    "\101\137\076\140\073\141\110\001\002\000\024\004\u0181" +
    "\005\u017e\016\u0186\112\105\135\u0183\136\101\137\076\140" +
    "\073\141\110\001\002\000\024\004\u0181\005\u017e\016\u0186" +
    "\112\105\135\u0183\136\101\137\076\140\073\141\110\001" +
    "\002\000\024\004\u0181\005\u017e\016\u0186\112\105\135\u0183" +
    "\136\101\137\076\140\073\141\110\001\002\000\024\004" +
    "\u0181\005\u017e\016\u0186\112\105\135\u0183\136\101\137\076" +
    "\140\073\141\110\001\002\000\024\004\u0181\005\u017e\016" +
    "\u0186\112\105\135\u0183\136\101\137\076\140\073\141\110" +
    "\001\002\000\066\004\uff1e\005\uff1e\006\uff1e\007\uff1e\011" +
    "\u01a0\012\uff1e\013\uff1e\016\uff1e\017\uff1e\023\uff1e\024\uff1e" +
    "\025\uff1e\026\uff1e\027\uff1e\033\uff1e\053\uff1e\067\uff1e\072" +
    "\uff1e\112\uff1e\130\uff1e\132\uff1e\135\uff1e\136\uff1e\137\uff1e" +
    "\140\uff1e\141\uff1e\001\002\000\066\004\uff1d\005\uff1d\006" +
    "\uff1d\007\uff1d\011\u01a0\012\uff1d\013\uff1d\016\uff1d\017\uff1d" +
    "\023\uff1d\024\uff1d\025\uff1d\026\uff1d\027\uff1d\033\uff1d\053" +
    "\uff1d\067\uff1d\072\uff1d\112\uff1d\130\uff1d\132\uff1d\135\uff1d" +
    "\136\uff1d\137\uff1d\140\uff1d\141\uff1d\001\002\000\066\004" +
    "\uff1f\005\uff1f\006\u01a3\007\u01a2\011\u01a0\012\uff1f\013\uff1f" +
    "\016\uff1f\017\uff1f\023\uff1f\024\uff1f\025\uff1f\026\uff1f\027" +
    "\uff1f\033\uff1f\053\uff1f\067\uff1f\072\uff1f\112\uff1f\130\uff1f" +
    "\132\u019e\135\uff1f\136\uff1f\137\uff1f\140\uff1f\141\uff1f\001" +
    "\002\000\066\004\uff1b\005\uff1b\006\uff1b\007\uff1b\011\uff1b" +
    "\012\uff1b\013\uff1b\016\uff1b\017\uff1b\023\uff1b\024\uff1b\025" +
    "\uff1b\026\uff1b\027\uff1b\033\uff1b\053\uff1b\067\uff1b\072\uff1b" +
    "\112\uff1b\130\uff1b\132\uff1b\135\uff1b\136\uff1b\137\uff1b\140" +
    "\uff1b\141\uff1b\001\002\000\066\004\uff20\005\uff20\006\u01a3" +
    "\007\u01a2\011\u01a0\012\uff20\013\uff20\016\uff20\017\uff20\023" +
    "\uff20\024\uff20\025\uff20\026\uff20\027\uff20\033\uff20\053\uff20" +
    "\067\uff20\072\uff20\112\uff20\130\uff20\132\u019e\135\uff20\136" +
    "\uff20\137\uff20\140\uff20\141\uff20\001\002\000\066\004\uff1c" +
    "\005\uff1c\006\uff1c\007\uff1c\011\u01a0\012\uff1c\013\uff1c\016" +
    "\uff1c\017\uff1c\023\uff1c\024\uff1c\025\uff1c\026\uff1c\027\uff1c" +
    "\033\uff1c\053\uff1c\067\uff1c\072\uff1c\112\uff1c\130\uff1c\132" +
    "\uff1c\135\uff1c\136\uff1c\137\uff1c\140\uff1c\141\uff1c\001\002" +
    "\000\024\004\u0181\005\u017e\016\u0186\112\105\135\u0183\136" +
    "\101\137\076\140\073\141\110\001\002\000\024\004\u0181" +
    "\005\u017e\016\u0186\112\105\135\u0183\136\101\137\076\140" +
    "\073\141\110\001\002\000\024\004\u0181\005\u017e\016\u0186" +
    "\112\105\135\u0183\136\101\137\076\140\073\141\110\001" +
    "\002\000\024\004\u0181\005\u017e\016\u0186\112\105\135\u0183" +
    "\136\101\137\076\140\073\141\110\001\002\000\024\004" +
    "\u0181\005\u017e\016\u0186\112\105\135\u0183\136\101\137\076" +
    "\140\073\141\110\001\002\000\024\004\u0181\005\u017e\016" +
    "\u0186\112\105\135\u0183\136\101\137\076\140\073\141\110" +
    "\001\002\000\052\004\u019f\005\u01a1\006\u01a3\007\u01a2\011" +
    "\u01a0\012\uff22\013\uff22\016\uff22\017\uff22\023\uff22\033\uff22" +
    "\067\uff22\072\uff22\112\uff22\132\u019e\135\uff22\136\uff22\137" +
    "\uff22\140\uff22\141\uff22\001\002\000\052\004\u019f\005\u01a1" +
    "\006\u01a3\007\u01a2\011\u01a0\012\uff27\013\uff27\016\uff27\017" +
    "\uff27\023\uff27\033\uff27\067\uff27\072\uff27\112\uff27\132\u019e" +
    "\135\uff27\136\uff27\137\uff27\140\uff27\141\uff27\001\002\000" +
    "\052\004\u019f\005\u01a1\006\u01a3\007\u01a2\011\u01a0\012\uff24" +
    "\013\uff24\016\uff24\017\uff24\023\uff24\033\uff24\067\uff24\072" +
    "\uff24\112\uff24\132\u019e\135\uff24\136\uff24\137\uff24\140\uff24" +
    "\141\uff24\001\002\000\052\004\u019f\005\u01a1\006\u01a3\007" +
    "\u01a2\011\u01a0\012\uff26\013\uff26\016\uff26\017\uff26\023\uff26" +
    "\033\uff26\067\uff26\072\uff26\112\uff26\132\u019e\135\uff26\136" +
    "\uff26\137\uff26\140\uff26\141\uff26\001\002\000\052\004\u019f" +
    "\005\u01a1\006\u01a3\007\u01a2\011\u01a0\012\uff25\013\uff25\016" +
    "\uff25\017\uff25\023\uff25\033\uff25\067\uff25\072\uff25\112\uff25" +
    "\132\u019e\135\uff25\136\uff25\137\uff25\140\uff25\141\uff25\001" +
    "\002\000\052\004\u019f\005\u01a1\006\u01a3\007\u01a2\011\u01a0" +
    "\012\uff23\013\uff23\016\uff23\017\uff23\023\uff23\033\uff23\067" +
    "\uff23\072\uff23\112\uff23\132\u019e\135\uff23\136\uff23\137\uff23" +
    "\140\uff23\141\uff23\001\002\000\066\004\uff13\005\uff13\006" +
    "\u01a3\007\u01a2\011\u01a0\012\uff13\013\uff13\016\uff13\017\uff13" +
    "\023\uff13\024\uff13\025\uff13\026\uff13\027\uff13\033\uff13\053" +
    "\uff13\067\uff13\072\uff13\112\uff13\130\uff13\132\u019e\135\uff13" +
    "\136\uff13\137\uff13\140\uff13\141\uff13\001\002\000\010\021" +
    "\uff38\040\uff38\046\uff38\001\002\000\026\004\u0181\005\u017e" +
    "\016\u0186\067\u0185\112\105\135\u0183\136\101\137\076\140" +
    "\073\141\110\001\002\000\010\017\u01ba\033\u0189\072\u018a" +
    "\001\002\000\004\020\u01bb\001\002\000\006\040\u01be\046" +
    "\u01bc\001\002\000\004\013\u01c5\001\002\000\010\021\uff2e" +
    "\040\uff2e\046\uff2e\001\002\000\026\004\u0181\005\u017e\016" +
    "\u0186\067\u0185\112\105\135\u0183\136\101\137\076\140\073" +
    "\141\110\001\002\000\010\021\u01c1\040\u01be\046\u01bc\001" +
    "\002\000\010\021\uff2f\040\uff2f\046\uff2f\001\002\000\010" +
    "\021\uff30\040\uff30\046\uff30\001\002\000\010\013\u01c3\033" +
    "\u0189\072\u018a\001\002\000\020\037\u0177\045\u0174\047\u0175" +
    "\056\u016d\061\u016e\115\u0172\125\u016b\001\002\000\010\021" +
    "\uff2d\040\uff2d\046\uff2d\001\002\000\020\037\u0177\045\u0174" +
    "\047\u0175\056\u016d\061\u016e\115\u0172\125\u016b\001\002\000" +
    "\010\021\uff2c\040\uff2c\046\uff2c\001\002\000\030\021\uff48" +
    "\036\uff48\041\uff48\055\uff48\064\uff48\077\uff48\102\uff48\103" +
    "\uff48\113\uff48\124\uff48\135\uff48\001\002\000\026\004\u0181" +
    "\005\u017e\016\u0186\067\u0185\112\105\135\u0183\136\101\137" +
    "\076\140\073\141\110\001\002\000\010\017\u01ca\033\u0189" +
    "\072\u018a\001\002\000\004\020\u01cb\001\002\000\020\037" +
    "\u0177\045\u0174\047\u0175\056\u016d\061\u016e\115\u0172\125\u016b" +
    "\001\002\000\004\021\u01cd\001\002\000\012\021\uff34\040" +
    "\uff34\046\uff34\051\u01cf\001\002\000\010\021\uff37\040\uff37" +
    "\046\uff37\001\002\000\006\020\u01d0\061\u016e\001\002\000" +
    "\020\037\u0177\045\u0174\047\u0175\056\u016d\061\u016e\115\u0172" +
    "\125\u016b\001\002\000\010\021\uff35\040\uff35\046\uff35\001" +
    "\002\000\004\021\u01d3\001\002\000\010\021\uff36\040\uff36" +
    "\046\uff36\001\002\000\026\004\u0181\005\u017e\016\u0186\067" +
    "\u0185\112\105\135\u0183\136\101\137\076\140\073\141\110" +
    "\001\002\000\010\012\u01d6\033\u0189\072\u018a\001\002\000" +
    "\026\004\u0181\005\u017e\016\u0186\067\u0185\112\105\135\u0183" +
    "\136\101\137\076\140\073\141\110\001\002\000\010\012" +
    "\u01d8\033\u0189\072\u018a\001\002\000\026\004\u0181\005\u017e" +
    "\016\u0186\067\u0185\112\105\135\u0183\136\101\137\076\140" +
    "\073\141\110\001\002\000\010\017\u01da\033\u0189\072\u018a" +
    "\001\002\000\004\020\u01db\001\002\000\020\037\u0177\045" +
    "\u0174\047\u0175\056\u016d\061\u016e\115\u0172\125\u016b\001\002" +
    "\000\004\021\u01dd\001\002\000\010\021\uff31\040\uff31\046" +
    "\uff31\001\002\000\026\004\u0181\005\u017e\016\u0186\067\u0185" +
    "\112\105\135\u0183\136\101\137\076\140\073\141\110\001" +
    "\002\000\010\017\u01e0\033\u0189\072\u018a\001\002\000\004" +
    "\020\u01e1\001\002\000\020\037\u0177\045\u0174\047\u0175\056" +
    "\u016d\061\u016e\115\u0172\125\u016b\001\002\000\004\021\u01e3" +
    "\001\002\000\010\021\uff33\040\uff33\046\uff33\001\002\000" +
    "\012\012\u01e7\016\u015a\022\u0164\127\u01e9\001\002\000\010" +
    "\012\u01ec\022\u0164\127\u01ed\001\002\000\030\021\uff49\036" +
    "\uff49\041\uff49\055\uff49\064\uff49\077\uff49\102\uff49\103\uff49" +
    "\113\uff49\124\uff49\135\uff49\001\002\000\030\021\uff4d\036" +
    "\uff4d\041\uff4d\055\uff4d\064\uff4d\077\uff4d\102\uff4d\103\uff4d" +
    "\113\uff4d\124\uff4d\135\uff4d\001\002\000\030\021\uff50\036" +
    "\uff50\041\uff50\055\uff50\064\uff50\077\uff50\102\uff50\103\uff50" +
    "\113\uff50\124\uff50\135\uff50\001\002\000\026\004\u0181\005" +
    "\u017e\016\u0186\067\u0185\112\105\135\u0183\136\101\137\076" +
    "\140\073\141\110\001\002\000\010\012\u01eb\033\u0189\072" +
    "\u018a\001\002\000\030\021\uff4b\036\uff4b\041\uff4b\055\uff4b" +
    "\064\uff4b\077\uff4b\102\uff4b\103\uff4b\113\uff4b\124\uff4b\135" +
    "\uff4b\001\002\000\030\021\uff4c\036\uff4c\041\uff4c\055\uff4c" +
    "\064\uff4c\077\uff4c\102\uff4c\103\uff4c\113\uff4c\124\uff4c\135" +
    "\uff4c\001\002\000\026\004\u0181\005\u017e\016\u0186\067\u0185" +
    "\112\105\135\u0183\136\101\137\076\140\073\141\110\001" +
    "\002\000\010\012\u01ef\033\u0189\072\u018a\001\002\000\030" +
    "\021\uff4a\036\uff4a\041\uff4a\055\uff4a\064\uff4a\077\uff4a\102" +
    "\uff4a\103\uff4a\113\uff4a\124\uff4a\135\uff4a\001\002\000\020" +
    "\017\uff46\036\u0156\041\u0151\055\u0153\064\u0154\113\u0155\135" +
    "\u015e\001\002\000\004\017\u01f2\001\002\000\004\020\u01f3" +
    "\001\002\000\020\037\u0177\045\u0174\047\u0175\056\u016d\061" +
    "\u016e\115\u0172\125\u016b\001\002\000\004\021\u01f5\001\002" +
    "\000\030\021\uff4e\036\uff4e\041\uff4e\055\uff4e\064\uff4e\077" +
    "\uff4e\102\uff4e\103\uff4e\113\uff4e\124\uff4e\135\uff4e\001\002" +
    "\000\004\020\uff54\001\002\000\004\002\000\001\002\000" +
    "\004\124\u01f9\001\002\000\004\066\u01fa\001\002\000\004" +
    "\016\u01fb\001\002\000\004\017\u01fc\001\002\000\004\020" +
    "\u01fd\001\002\000\004\021\u01fe\001\002\000\004\002\uff0e" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01fd\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\u013d\001\001\000\012\006\010\053\006" +
    "\057\011\060\007\001\001\000\002\001\001\000\004\053" +
    "\u013c\001\001\000\002\001\001\000\010\054\u012f\055\u012e" +
    "\056\u0130\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\020\061\021\062\017\001\001\000\004\007\u012a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\020\062\u0127\001\001" +
    "\000\002\001\001\000\004\011\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\037\001\001\000\010\007\u0101" +
    "\014\377\016\u0102\001\001\000\002\001\001\000\030\024" +
    "\061\031\046\032\052\034\047\036\060\043\044\044\062" +
    "\045\042\046\041\050\054\064\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\024\061\031\323" +
    "\032\324\035\325\043\044\044\062\045\042\046\041\050" +
    "\054\064\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\024\061\031\236\032\241\040\237" +
    "\043\044\044\062\045\042\046\041\050\054\064\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\024\061" +
    "\031\065\032\067\037\070\043\044\044\062\045\042\046" +
    "\041\050\054\064\055\001\001\000\002\001\001\000\030" +
    "\024\061\031\046\032\052\034\047\036\210\043\044\044" +
    "\062\045\042\046\041\050\054\064\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\020\101\021\105\022" +
    "\076\023\074\001\001\000\002\001\001\000\006\022\206" +
    "\023\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\170\023\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\020\141" +
    "\021\105\022\076\023\074\001\001\000\002\001\001\000" +
    "\012\020\111\021\105\022\076\023\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\137\021\105\022\076\023\074\001\001\000\012\020\134" +
    "\021\105\022\076\023\074\001\001\000\012\020\135\021" +
    "\105\022\076\023\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\020\140\021\105\022\076\023\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\152\023\074\001\001\000\014\020\144\021" +
    "\105\022\076\023\074\025\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\151\021" +
    "\105\022\076\023\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\167\023\074\001\001\000\006\022\166\023\074\001\001" +
    "\000\006\022\165\023\074\001\001\000\006\022\164\023" +
    "\074\001\001\000\006\022\163\023\074\001\001\000\006" +
    "\022\162\023\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\205\023\074\001\001\000\006\022\204\023\074" +
    "\001\001\000\006\022\203\023\074\001\001\000\006\022" +
    "\202\023\074\001\001\000\006\022\201\023\074\001\001" +
    "\000\006\022\200\023\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\231\021" +
    "\105\022\076\023\074\001\001\000\012\020\217\021\105" +
    "\022\076\023\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\020\222\021\105\022\076\023\074\001\001" +
    "\000\002\001\001\000\026\024\061\031\065\032\067\037" +
    "\224\043\044\044\062\045\042\046\041\050\054\064\055" +
    "\001\001\000\002\001\001\000\012\020\226\021\105\022" +
    "\076\023\074\001\001\000\002\001\001\000\026\024\061" +
    "\031\065\032\067\037\230\043\044\044\062\045\042\046" +
    "\041\050\054\064\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\020\233\021\105\022\076\023\074\001" +
    "\001\000\002\001\001\000\026\024\061\031\065\032\067" +
    "\037\235\043\044\044\062\045\042\046\041\050\054\064" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\024\061\031\046\032\052\034\047\036" +
    "\242\043\044\044\062\045\042\046\041\050\054\064\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\024\061\031\252\033\254" +
    "\043\250\044\257\045\247\046\246\047\251\050\054\063" +
    "\253\064\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\024\061\031\046" +
    "\032\052\034\047\036\260\043\044\044\062\045\042\046" +
    "\041\050\054\064\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\020\266" +
    "\021\105\022\076\023\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\020\273\021\105\022\076\023\074" +
    "\026\272\065\271\001\001\000\014\020\273\021\105\022" +
    "\076\023\074\026\306\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\020\305\021\105\022\076\023\074\001" +
    "\001\000\026\024\061\031\277\032\301\041\276\043\044" +
    "\044\062\045\042\046\041\050\054\064\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\024\061\031\046" +
    "\032\052\034\047\036\302\043\044\044\062\045\042\046" +
    "\041\050\054\064\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\024\061\031\310\032\312" +
    "\042\313\043\044\044\062\045\042\046\041\050\054\064" +
    "\055\001\001\000\002\001\001\000\030\024\061\031\046" +
    "\032\052\034\047\036\316\043\044\044\062\045\042\046" +
    "\041\050\054\064\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\024\061\031\277\032\301" +
    "\041\321\043\044\044\062\045\042\046\041\050\054\064" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\024\061\031\323\032\324\035\326\043" +
    "\044\044\062\045\042\046\041\050\054\064\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\024\061\031" +
    "\323\032\324\035\331\043\044\044\062\045\042\046\041" +
    "\050\054\064\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\020\344\021\105\022\076\023\074\001\001" +
    "\000\012\020\340\021\105\022\076\023\074\001\001\000" +
    "\014\020\144\021\105\022\076\023\074\025\336\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\343\021\105" +
    "\022\076\023\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\020\357\021\105\022\076\023\074\001\001" +
    "\000\012\020\347\021\105\022\076\023\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\024\061\031\323\032\324\035\365\043\044\044\062" +
    "\045\042\046\041\050\054\064\055\001\001\000\002\001" +
    "\001\000\012\020\367\021\105\022\076\023\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\024\061\031\065\032\067\037\373\043\044\044\062" +
    "\045\042\046\041\050\054\064\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\024\061\031\065\032\067" +
    "\037\376\043\044\044\062\045\042\046\041\050\054\064" +
    "\055\001\001\000\002\001\001\000\006\007\u0101\016\u0123" +
    "\001\001\000\006\007\u0101\016\u0122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\u0101" +
    "\016\u0105\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\011\u0115\020\u0116\021\105\022\076\023\074\027\u0117" +
    "\001\001\000\004\011\u010a\001\001\000\004\030\u010b\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\020\u010d" +
    "\021\105\022\076\023\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\u0110\021\105\022\076\023\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\u0113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\u011a\001\001\000\002\001\001\000\004" +
    "\011\u011c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\u0120\021\105\022\076\023\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\u0101" +
    "\016\u0126\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\u0129\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\u012c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\u0131" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\020\061\u0134\062\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\u0137\001\001\000\002\001\001\000" +
    "\030\024\061\031\046\032\052\034\047\036\u0139\043\044" +
    "\044\062\045\042\046\041\050\054\064\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\u01f6\001\001\000\004\070\u013f\001" +
    "\001\000\004\071\u0140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\072\u0145\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\066\u0147\073\u0149" +
    "\074\u014a\001\001\000\004\067\u0151\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\066\u0147\073\u014d\074\u014a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\076\u0158\001\001\000\002\001\001\000\012\067\u015c\077" +
    "\u015b\100\u015e\101\u015a\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\102\u0162\103\u0164\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\067\u015c\101\u0160\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\103\u0167\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\104\u016f\105\u016b\107\u0175\110\u0170\111\u016e\112\u0172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\104\u0179\105\u016b\107" +
    "\u0175\110\u0170\111\u016e\112\u0172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\023\u017f\115" +
    "\u0183\116\u0181\117\u017e\001\001\000\006\023\u017f\117\u01b5" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\u017f\117\u019c\001\001\000\002\001\001\000\004\121\u018f" +
    "\001\001\000\002\001\001\000\012\023\u017f\115\u018c\116" +
    "\u0181\117\u017e\001\001\000\012\023\u017f\115\u0186\116\u0181" +
    "\117\u017e\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\023\u017f\115\u018b\116\u0181\117\u017e\001\001\000\012" +
    "\023\u017f\115\u018a\116\u0181\117\u017e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\023\u017f\115" +
    "\u0197\116\u0181\117\u017e\001\001\000\014\023\u017f\115\u0193" +
    "\116\u0181\117\u017e\120\u0192\001\001\000\012\023\u017f\115" +
    "\u0195\116\u0181\117\u017e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\023\u017f\115\u019a\116\u0181" +
    "\117\u017e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\u017f\117\u01a8\001\001\000\006" +
    "\023\u017f\117\u01a7\001\001\000\006\023\u017f\117\u01a6\001" +
    "\001\000\006\023\u017f\117\u01a5\001\001\000\006\023\u017f" +
    "\117\u01a4\001\001\000\006\023\u017f\117\u01a3\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\u017f\117\u01b4\001\001\000\006\023\u017f\117\u01b3\001\001" +
    "\000\006\023\u017f\117\u01b2\001\001\000\006\023\u017f\117" +
    "\u01b1\001\001\000\006\023\u017f\117\u01b0\001\001\000\006" +
    "\023\u017f\117\u01af\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\023\u017f\115\u01b8\116\u0181\117\u017e\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\113\u01be\114\u01bc\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\023\u017f" +
    "\115\u01c1\116\u0181\117\u017e\001\001\000\004\114\u01bf\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\104\u01c3\105\u016b\107\u0175\110\u0170\111\u016e\112" +
    "\u0172\001\001\000\002\001\001\000\016\104\u01c5\105\u016b" +
    "\107\u0175\110\u0170\111\u016e\112\u0172\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\023\u017f\115\u01c8\116\u0181" +
    "\117\u017e\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\104\u01cb\105\u016b\107\u0175\110\u0170\111\u016e\112\u0172" +
    "\001\001\000\002\001\001\000\004\106\u01cd\001\001\000" +
    "\002\001\001\000\004\105\u01d0\001\001\000\016\104\u01d1" +
    "\105\u016b\107\u0175\110\u0170\111\u016e\112\u0172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\023\u017f\115\u01d4\116\u0181\117\u017e\001\001\000\002\001" +
    "\001\000\012\023\u017f\115\u01d6\116\u0181\117\u017e\001\001" +
    "\000\002\001\001\000\012\023\u017f\115\u01d8\116\u0181\117" +
    "\u017e\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\104\u01db\105\u016b\107\u0175\110\u0170\111\u016e\112\u0172\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\023\u017f" +
    "\115\u01de\116\u0181\117\u017e\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\104\u01e1\105\u016b\107\u0175\110\u0170" +
    "\111\u016e\112\u0172\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\075\u01e7\076\u01e5\102\u01e4\103\u0164\001\001" +
    "\000\004\103\u0167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\023\u017f\115\u01e9\116\u0181" +
    "\117\u017e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\023\u017f\115\u01ed\116\u0181\117\u017e" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\067" +
    "\u015c\077\u01f0\100\u015e\101\u015a\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\104\u01f3\105\u016b\107\u0175\110" +
    "\u0170\111\u016e\112\u0172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //fields
    Lexer lex;
    private List<String> syntaxErrors;
    private GenTypeTab genTypeTab;
    private AstGen astGen;
    private Analyzator analyzator;

    //conect the parser with the lexer
    public Parser(Lexer lex, Analyzator analyzator){
        super(lex);
        syntaxErrors = new LinkedList<>();
        genTypeTab = new GenTypeTab();
        astGen = new AstGen();
        this.analyzator = analyzator;
    }

    //getters
    public Lexer getLexer(){
        return this.lex;
    }
    public List<String> getSyntaxErrors(){
        return this.syntaxErrors;
    }
    
    /*SOBREESCRIBIR LOS METODOS DE ERROR*/
    public void syntax_error(Symbol cur_token) {
        StringBuilder mssBuilder = new StringBuilder("Simbolo: ");
        mssBuilder.append(symbl_name_from_id(cur_token.sym));
        
        if(cur_token.value != null){
            mssBuilder.append(", lexema <");
            mssBuilder.append(cur_token.value.toString());
            mssBuilder.append(">");
        }
        mssBuilder.append(", linea: ");
        mssBuilder.append(cur_token.left);
        mssBuilder.append(", columna: ");
        mssBuilder.append(cur_token.right);
        
        if (expected_token_ids().isEmpty()) {
            mssBuilder.append(" -- ya no se esperaba ningun simbolo");
        } else {
            mssBuilder.append(" -- Se esperaba [");
            for (Integer expected_token_id : expected_token_ids()) {
                if(!symbl_name_from_id(expected_token_id).equals("error")){
                    mssBuilder.append(symbl_name_from_id(expected_token_id));
                    mssBuilder.append(" ");
                }
                
            }
            mssBuilder.append("]");
        }
        syntaxErrors.add(mssBuilder.toString());
    }
    
    public void report_error(String message, Object info){
        try{
            Symbol cur_token = (Symbol) info;
            StringBuilder mssBuilder = new StringBuilder("Simbolo: ");
            mssBuilder.append(symbl_name_from_id(cur_token.sym));
            mssBuilder.append(", linea: ");
            mssBuilder.append(cur_token.left);
            mssBuilder.append(", columna: ");
            mssBuilder.append(cur_token.right);
            if(cur_token != null){
                mssBuilder.append(", Lexema: ");
                mssBuilder.append(cur_token.value);
            }

            if(message != null){
                mssBuilder.append(", Info: ");
                mssBuilder.append(message);
            }
            
            syntaxErrors.add(mssBuilder.toString());
        } catch (Exception e){
            syntaxErrors.add(message);
        }
    }


    public void unrecovered_syntax_error(Symbol cur_token) {
        syntaxErrors.add("Errores de sintaxis severos detectados, revisa municiosamente el codigo");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= pascal_block java_block main_program 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // pascal_block ::= PASCAL_SECTION pcontent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pascal_block",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // pcontent ::= functions_b procedure_b 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<FunctionDec> lf = (List<FunctionDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ProcedureDec> lp = (List<ProcedureDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pcontent",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // var_type ::= INT_TKN 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.IntegerPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // var_type ::= FLOAT_TKN 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.RealPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_type ::= BOOLEAN_TKN 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.BooleanPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_type ::= CHAR_TKN 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.CharPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_type ::= STRING_TKN 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.StringPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_type ::= ID 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            t, 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_type ::= error 
            {
              Label RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // id_list ::= id_list COMMA ID 
            {
              List<Label> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(l != null){
                            l.add(new Label(i, new Position(ileft, iright)));
                        } else {
                            l = new ArrayList<>();
                        }
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // id_list ::= ID 
            {
              List<Label> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        List<Label> list = new ArrayList<>();
                        list.add(new Label(i, new Position(ileft, iright)));
                        RESULT = list;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // range ::= expression DOT DOT DOT expression 
            {
              Range RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Range(e1, e2);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arr_range ::= LBRACK expression DOT DOT expression RBRACK 
            {
              Range RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                         RESULT = new Range(e1, e2);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr_range",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // list_access ::= list_access DOT ID 
            {
              List<Label> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(l != null){
                            l.add(new Label(i, new Position(ileft, iright)));
                        } else {
                            l = new LinkedList<>();
                        }
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_access",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // list_access ::= ID 
            {
              List<Label> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        ArrayList<Label> access = new ArrayList<>();
                        access.add(new Label(i, new Position(ileft, iright)));
                        RESULT = access;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_access",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // record_b ::= def_record more_records 
            {
              List<DefAst> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DefAst d = (DefAst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(l != null){
                            l.add(0, d);
                        } else {
                            l = new LinkedList<>();
                        }
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_b",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // def_record ::= ID COLON var_type SEMICOLON 
            {
              DefAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new SingleDef(new Label(i, new Position(ileft, iright)), t);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_record",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // def_record ::= ID COLON PACKED ARRAY arr_range OF var_type SEMICOLON 
            {
              DefAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new ArrayDef(new Label(i, new Position(ileft, iright)), t, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_record",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // more_records ::= def_record more_records 
            {
              List<DefAst> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DefAst d = (DefAst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(l != null){
                            l.add(0, d);
                        } else {
                            l = new LinkedList<>();
                        }
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_records",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // more_records ::= 
            {
              List<DefAst> RESULT =null;
		
                        RESULT = new LinkedList<DefAst>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_records",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression_list ::= expression_list COMMA expression 
            {
              List<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(l != null){
                            l.add(e);
                        } else {
                            l = new LinkedList<>();
                        }
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression_list ::= expression 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        LinkedList<Expression> list = new LinkedList<Expression>();
                        list.add(e);
                        RESULT = list;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // var_b ::= VAR list_vardec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_b",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // var_b ::= 
            {
              List<DefAst> RESULT =null;
		
                        RESULT = new LinkedList<DefAst>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_b",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // list_vardec ::= list_vardec var_dec SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> dl = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        try{
                            l.addAll(dl);
                        } catch (NullPointerException e){}    
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // list_vardec ::= var_dec SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // list_vardec ::= list_vardec var_dec error var_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DefAst> dl = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        try{
                            l.addAll(dl);
                        } catch (NullPointerException e){}    
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // list_vardec ::= error var_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // list_vardec ::= var_dec error var_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var_dec ::= id_list COLON var_type 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = genTypeTab.userDef(l, t);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // var_dec ::= id_list COLON ARRAY arr_range OF var_type 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = genTypeTab.arrayDef(l, t, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // var_dec ::= id_list error var_type 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = genTypeTab.userDef(l, t);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // var_dec ::= id_list error range 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = genTypeTab.rangeDef(l, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // var_dec ::= id_list error ARRAY arr_range OF var_type 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = genTypeTab.arrayDef(l, t, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.And, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression AND THEN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.AndThen, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Or, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= expression OR ELSE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.OrElse, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= NOT expression 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Not,
                            e,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= bool_exp 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bool_exp ::= arit_exp EQUALS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.EqualsTo, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bool_exp ::= arit_exp DIFFERENT arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.DifferentTo, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bool_exp ::= arit_exp GRATER arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.GraterThan, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bool_exp ::= arit_exp LESS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.LessThan, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bool_exp ::= arit_exp GRATER_EQUALS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.GraterEq, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bool_exp ::= arit_exp LESS_EQUALS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.LessEq, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bool_exp ::= arit_exp 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arit_exp ::= error PLUS error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arit_exp ::= error MINUS error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arit_exp ::= error TIMES error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arit_exp ::= error DIV error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arit_exp ::= error BARRA error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arit_exp ::= error MOD error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arit_exp ::= arit_exp PLUS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Addition, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arit_exp ::= arit_exp MINUS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Substraction, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arit_exp ::= arit_exp TIMES arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Multiplication, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arit_exp ::= arit_exp DIV arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.IntDivision, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arit_exp ::= arit_exp MOD arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Module, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // arit_exp ::= arit_exp POWER arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Power, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arit_exp ::= literals 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arit_exp ::= ID LBRACK arit_exp RBRACK 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new VectorUse(
                            i, e, new Position(ileft, iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arit_exp ::= ID LPAREN expression_list RPAREN 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new FunctionUse(
                            i, l, new Position(ileft, iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arit_exp ::= ID LPAREN RPAREN 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = new FunctionUse(
                            i, new Position(ileft, iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // arit_exp ::= ID 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            i, new Position(ileft,iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // arit_exp ::= LPAREN expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // arit_exp ::= PLUS arit_exp 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Addition,
                            e,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arit_exp ::= MINUS arit_exp 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Substraction,
                            e,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arit_exp ::= LPAREN error RPAREN 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arit_exp ::= MINUS error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // arit_exp ::= PLUS error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // literals ::= BOOLEAN_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		boolean l = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.BooleanPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // literals ::= INTEGER_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.IntegerPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // literals ::= FLOAT_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		float l = (float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.RealPT, 
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // literals ::= CHAR_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character l = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.CharPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // literals ::= STRING_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.StringPT, 
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // conditional ::= if_stmt block_cond 
            {
              PassIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InitIf i = (InitIf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new PassIf(new IfAst(
                        i.getExpression(), 
                        ls, 
                        i.getPosition()
                    ));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // conditional ::= if_stmt block_cond SEMICOLON 
            {
              PassIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		InitIf i = (InitIf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new PassIf(new IfAst(
                        i.getExpression(), 
                        ls,
                        i.getPosition()
                    ));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // conditional ::= if_stmt block_cond ELSE elif 
            {
              PassIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		InitIf i = (InitIf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PassIf pi = (PassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    if(pi.getElseAst() != null && pi.getElseAst().getInitPos() == null){
                        pi.getElseAst().setInitPos(
                            new Position(eleft, eright)
                        );
                    }
                    RESULT = astGen.genPassIf(
                        pi, 
                        new IfAst(i.getExpression(), ls, i.getPosition())
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // if_stmt ::= IF LPAREN expression RPAREN THEN 
            {
              InitIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                    RESULT = new InitIf(e, new Position(ileft, iright));     
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // if_stmt ::= IF LPAREN error RPAREN THEN 
            {
              InitIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		  
                    RESULT = new InitIf(null, new Position(ileft, iright));     
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // if_stmt ::= IF LPAREN expression error THEN 
            {
              InitIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                    RESULT = new InitIf(e, new Position(ileft, iright));     
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // if_stmt ::= IF error expression RPAREN THEN 
            {
              InitIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                    RESULT = new InitIf(e, new Position(ileft, iright));     
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // if_stmt ::= IF error expression error THEN 
            {
              InitIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                    RESULT = new InitIf(e, new Position(ileft, iright));     
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // block_cond ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_cond",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // block_cond ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_cond",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // block_cond ::= BEGIN block_stmt END 
            {
              List<Statement> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = ls;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_cond",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // elif ::= else_block SEMICOLON 
            {
              PassIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ElseAst e = (ElseAst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new PassIf(e);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // elif ::= conditional 
            {
              PassIf RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PassIf pi = (PassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = pi;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // else_block ::= complex_else 
            {
              ElseAst RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT = new ElseAst(astGen.oneStmtInList(s)); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_block",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // else_block ::= simple_stmt 
            {
              ElseAst RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new ElseAst(astGen.oneStmtInList(s)); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_block",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // else_block ::= BEGIN block_stmt END 
            {
              ElseAst RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new ElseAst(ls);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_block",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // complex_else ::= case_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseAst s = (CaseAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // complex_else ::= while_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileAst s = (WhileAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // complex_else ::= for_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForAst s = (ForAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // complex_else ::= repeat_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RepeatAst s = (RepeatAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // case_stmt ::= CASE LPAREN expression RPAREN OF case_block ELSE case_else_stmts END SEMICOLON 
            {
              CaseAst RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int lscleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lscright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<SimpleCase> lsc = (List<SimpleCase>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = new CaseAst(e, lsc, new ElseAst(ls), new Position(cleft, cright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // case_block ::= case_block labels COLON case_stmts SEMICOLON 
            {
              List<SimpleCase> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<SimpleCase> l = (List<SimpleCase>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int labsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int labsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Expression> labs = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    if(l != null){
                        l.add(new SimpleCase(labs, ls));
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_block",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // case_block ::= labels COLON case_stmts SEMICOLON 
            {
              List<SimpleCase> RESULT =null;
		int labsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int labsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Expression> labs = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.genSimpleCaseList(labs, ls);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_block",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // labels ::= labels COMMA expression 
            {
              List<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(e);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labels",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // labels ::= expression 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    LinkedList<Expression> list = new LinkedList<>();
                    list.add(e);
                    RESULT = list;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labels",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // case_stmts ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmts",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // case_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmts",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // case_stmts ::= BEGIN block_stmt END 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmts",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // case_else_stmts ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // case_else_stmts ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // case_else_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // case_else_stmts ::= BEGIN block_stmt 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		      
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // while_stmt ::= WHILE LPAREN expression RPAREN DO statements 
            {
              WhileAst RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new WhileAst(e, l, new Position(wleft, wright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // while_stmt ::= WHILE LPAREN error RPAREN DO statements 
            {
              WhileAst RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new WhileAst(null, l, new Position(wleft, wright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // for_stmt ::= FOR ID ASSIGNATION expression TO expression DO statements 
            {
              ForAst RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Range range = new Range(e1, e2);
                    Label variable = new Label(i, new Position(ileft, iright));
                    RESULT = new ForAst(variable, range, l, new Position(fleft, fright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // for_stmt ::= FOR ID ASSIGNATION error TO expression DO statements 
            {
              ForAst RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Range range = new Range(null, e2);
                    Label variable = new Label(i, new Position(ileft, iright));
                    RESULT = new ForAst(variable, range, l, new Position(fleft, fright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // for_stmt ::= FOR ID error expression TO expression DO statements 
            {
              ForAst RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Range range = new Range(e1, e2);
                    Label variable = new Label(i, new Position(ileft, iright));
                    RESULT = new ForAst(variable, range, l, new Position(fleft, fright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // repeat_stmt ::= REPEAT statements UNTIL expression 
            {
              RepeatAst RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new RepeatAst(e, l, new Position(rleft, rright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // statements ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // statements ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // statements ::= BEGIN block_stmt END SEMICOLON 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // block_stmt ::= list_stmts 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_stmt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // block_stmt ::= 
            {
              List<Statement> RESULT =null;
		
                    RESULT = new LinkedList<Statement>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_stmt",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // list_stmts ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // list_stmts ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // list_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // list_stmts ::= simple_stmt SEMICOLON more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // list_stmts ::= complex_stmt more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // more_stmts ::= simple_stmt error 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // more_stmts ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // more_stmts ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // more_stmts ::= simple_stmt SEMICOLON more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // more_stmts ::= complex_stmt more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // more_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // simple_stmt ::= BREAK 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT = new SimpleStmt(
                        SimpleStmt.BREAK, 
                        new Position(bleft, bright)
                    );  
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // simple_stmt ::= CONTINUE 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT = new SimpleStmt(
                        SimpleStmt.CONTINUE,
                        new Position(cleft, cright)
                    );  
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // simple_stmt ::= ID ASSIGNATION expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT = new Assignation(
                        new Label(i, new Position(ileft, iright)), e
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // simple_stmt ::= ID LPAREN expression_list RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new FunctionUseStmt(
                        new Label(i, new Position(ileft, iright)),
                        el
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // simple_stmt ::= ID LPAREN RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = new FunctionUseStmt(
                        new Label(i, new Position(ileft, iright)),
                        new LinkedList<>()
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // simple_stmt ::= ID LBRACK expression RBRACK ASSIGNATION expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new ArrayAssign(
                        new Label(i, new Position(ileft, iright)),
                        e1,
                        e2
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // simple_stmt ::= definite_fun 
            {
              Statement RESULT =null;
		int fuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int furight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionUseStmt fu = (FunctionUseStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fu; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // simple_stmt ::= error 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // complex_stmt ::= conditional 
            {
              Statement RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PassIf pi = (PassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT =  astGen.transformPassIf(pi); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // complex_stmt ::= case_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseAst s = (CaseAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // complex_stmt ::= while_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileAst s = (WhileAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // complex_stmt ::= for_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForAst s = (ForAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // complex_stmt ::= repeat_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RepeatAst s = (RepeatAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // functions_b ::= functions 
            {
              List<FunctionDec> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<FunctionDec> l = (List<FunctionDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_b",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // functions_b ::= 
            {
              List<FunctionDec> RESULT =null;
		
                    RESULT = new LinkedList<FunctionDec>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_b",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // functions ::= functions function_dec 
            {
              List<FunctionDec> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<FunctionDec> l = (List<FunctionDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDec d = (FunctionDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(d);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // functions ::= function_dec 
            {
              List<FunctionDec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDec d = (FunctionDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    LinkedList<FunctionDec> list = new LinkedList<>();
                    list.add(d);
                    RESULT = list;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // function_dec ::= FUNCTION ID LPAREN arguments RPAREN COLON var_type SEMICOLON var_b BEGIN block_stmt END SEMICOLON 
            {
              FunctionDec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		List<Argument> a = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<DefAst> lv = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                    RESULT = new FunctionDec(
                        new Label(i, new Position(ileft, iright)),
                        t, a, lv, ls
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_dec",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // procedure_b ::= procedures 
            {
              List<ProcedureDec> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ProcedureDec> p = (List<ProcedureDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = p;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_b",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // procedure_b ::= 
            {
              List<ProcedureDec> RESULT =null;
		  
                    RESULT = new LinkedList<ProcedureDec>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_b",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // procedures ::= procedures procedure_dec 
            {
              List<ProcedureDec> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ProcedureDec> l = (List<ProcedureDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProcedureDec d = (ProcedureDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(d);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // procedures ::= procedure_dec 
            {
              List<ProcedureDec> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProcedureDec d = (ProcedureDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    LinkedList<ProcedureDec> list = new LinkedList<>();
                    list.add(d);
                    RESULT = list;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // procedure_dec ::= PROCEDURE ID LPAREN arguments RPAREN SEMICOLON var_b BEGIN block_stmt END SEMICOLON 
            {
              ProcedureDec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		List<Argument> a = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<DefAst> lv = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = new ProcedureDec(
                        new Label(i, new Position(ileft, iright)),
                        a, lv, ls
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_dec",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // arguments ::= arguments COMMA type_arg 
            {
              List<Argument> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Argument> l = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Argument> args = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    try{
                        l.addAll(args);
                    } catch (NullPointerException e){

                    }
                    
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // arguments ::= type_arg 
            {
              List<Argument> RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Argument> args = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = args;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // arguments ::= 
            {
              List<Argument> RESULT =null;
		
                    RESULT = new LinkedList<Argument>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // type_arg ::= VAR id_list COLON var_type 
            {
              List<Argument> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.generateArgs(l, t, true);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arg",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // type_arg ::= id_list COLON var_type 
            {
              List<Argument> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.generateArgs(l, t, false);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arg",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // java_block ::= JAVA_SECTION jcontent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("java_block",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // jmodificator ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmodificator",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // jmodificator ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmodificator",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // jmodificator ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmodificator",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // jmodificator ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmodificator",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // jtype ::= INT_TKN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // jtype ::= STRING_TKN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // jtype ::= FLOAT_TKN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // jtype ::= BOOLEAN_TKN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // jtype ::= CHAR_TKN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // jtype ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // jcontent ::= jcontent jclass 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcontent",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // jcontent ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcontent",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // jclass ::= PUBLIC CLASS ID jherence LBRACE jinternal_block RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jclass",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // jherence ::= EXTENDS ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jherence",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // jherence ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jherence",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // jinternal_block ::= jinternal jinternal_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jinternal_block",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // jinternal_block ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jinternal_block",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // jinternal ::= jmodificator jtype ID joptions_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jinternal",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // jinternal ::= jmodificator VOID ID jmethod_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jinternal",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // jinternal ::= jmodificator ID LPAREN jargs RPAREN LBRACE jstmts RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jinternal",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // joptions_dec ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("joptions_dec",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // joptions_dec ::= jbracks_list SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("joptions_dec",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // joptions_dec ::= ASSIGNATION jexp SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("joptions_dec",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // joptions_dec ::= jbracks_list ASSIGNATION jexp SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("joptions_dec",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // joptions_dec ::= jmethod_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("joptions_dec",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // jmethod_dec ::= LPAREN jargs RPAREN LBRACE jstmts RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_dec",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // jargs ::= jlist_args 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jargs",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // jargs ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jargs",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // jlist_args ::= jlist_args COMMA jarg 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jlist_args",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // jlist_args ::= jarg 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jlist_args",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // jarg ::= jtype ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarg",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // jarg ::= jtype jbracks_list ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarg",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // jbracks_list ::= jbracks_list jbrack 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbracks_list",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // jbracks_list ::= jbrack 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbracks_list",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // jbrack ::= LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbrack",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // jstmts ::= jif_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmts",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // jstmts ::= jwhile_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmts",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // jstmts ::= jdo_while_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmts",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // jstmts ::= jfor_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmts",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // jstmts ::= jswitch_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmts",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // jstmts ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmts",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // jstmts ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmts",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // jif_stmt ::= IF LPAREN jexp RPAREN LBRACE jstmts RBRACE jelif_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jif_stmt",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // jelif_stmt ::= ELSE LBRACE jstmts RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jelif_stmt",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // jelif_stmt ::= ELSE jif_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jelif_stmt",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // jelif_stmt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jelif_stmt",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // jwhile_stmt ::= WHILE LPAREN jexp RPAREN LBRACE jstmts RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jwhile_stmt",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // jdo_while_stmt ::= DO LBRACE jstmts RBRACE WHILE LPAREN jexp RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jdo_while_stmt",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // jfor_stmt ::= FOR RPAREN jexp SEMICOLON jexp SEMICOLON jexp RPAREN LBRACE jstmts RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jfor_stmt",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // jswitch_stmt ::= SWITCH LPAREN jexp RPAREN LBRACE jswitch_cases RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jswitch_stmt",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // jswitch_cases ::= jswitch_cases jcase 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jswitch_cases",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // jswitch_cases ::= jcase 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jswitch_cases",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // jcase ::= CASE jexp COLON jstmts 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcase",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // jcase ::= DEFAULT COLON jstmts 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcase",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // jexp ::= jexp AND jexp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jexp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // jexp ::= jexp OR jexp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jexp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // jexp ::= NOT jexp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jexp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // jexp ::= jbool_exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jexp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // jbool_exp ::= jarit_exp EQUALS jarit_exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2j = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // jbool_exp ::= jarit_exp DIFFERENT jarit_exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2j = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // jbool_exp ::= jarit_exp GRATER jarit_exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2j = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // jbool_exp ::= jarit_exp LESS jarit_exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2j = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // jbool_exp ::= jarit_exp GRATER_EQUALS jarit_exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2j = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // jbool_exp ::= jarit_exp LESS_EQUALS jarit_exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2j = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // jbool_exp ::= jarit_exp 
            {
              Object RESULT =null;
		int ejleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ejright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ej = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // jarit_exp ::= jarit_exp PLUS jarit_exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // jarit_exp ::= jarit_exp MINUS jarit_exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // jarit_exp ::= jarit_exp TIMES jarit_exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // jarit_exp ::= jarit_exp DIV jarit_exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // jarit_exp ::= jarit_exp MOD jarit_exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // jarit_exp ::= jarit_exp POWER jarit_exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // jarit_exp ::= literals 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // jarit_exp ::= ID jarray_access 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // jarit_exp ::= ID LPAREN jexp_list RPAREN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // jarit_exp ::= ID LPAREN RPAREN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // jarit_exp ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // jarit_exp ::= LPAREN jexp RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // jarit_exp ::= PLUS jarit_exp 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // jarit_exp ::= MINUS jarit_exp 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // jexp_list ::= jexp_list jexp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jexp_list",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // jexp_list ::= jexp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jexp_list",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // jarray_access ::= LBRACK jexp RBRACK 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarray_access",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // jarray_access ::= jarray_access LBRACK jexp RBRACK 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarray_access",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // main_program ::= MAIN_SECTION VOID MAIN LPAREN RPAREN LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_program",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
