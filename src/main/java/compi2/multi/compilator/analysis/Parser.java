
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compi2.multi.compilator.analysis;

import java_cup.runtime.*;
import java.util.*;
import compi2.multi.compilator.analysis.symbolt.AccessMod;
import compi2.multi.compilator.analysis.typet.*;
import compi2.multi.compilator.analyzator.*;
import compi2.multi.compilator.semantic.*;
import compi2.multi.compilator.semantic.c.*;
import compi2.multi.compilator.semantic.cast.*;
import compi2.multi.compilator.semantic.cast.others.*;
import compi2.multi.compilator.semantic.cexp.*;
import compi2.multi.compilator.semantic.util.*;
import compi2.multi.compilator.semantic.pexp.*;
import compi2.multi.compilator.semantic.pobj.*;
import compi2.multi.compilator.semantic.past.*;
import compi2.multi.compilator.semantic.pmodule.*;
import compi2.multi.compilator.semantic.jexp.*;
import compi2.multi.compilator.semantic.jclases.*;
import compi2.multi.compilator.semantic.jclases.components.*;
import compi2.multi.compilator.semantic.jast.*;
import compi2.multi.compilator.semantic.jast.inv.*;
import compi2.multi.compilator.semantic.jast.others.*;
import compi2.multi.compilator.util.Position;
import compi2.multi.compilator.util.Index;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0191\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\004\004\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\011\005\000\002" +
    "\011\003\000\002\025\007\000\002\026\010\000\002\023" +
    "\005\000\002\023\003\000\002\014\004\000\002\014\002" +
    "\000\002\013\005\000\002\013\004\000\002\013\006\000" +
    "\002\013\004\000\002\013\005\000\002\015\005\000\002" +
    "\015\010\000\002\015\005\000\002\015\005\000\002\015" +
    "\010\000\002\016\005\000\002\016\006\000\002\016\005" +
    "\000\002\016\006\000\002\016\004\000\002\016\003\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\003\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\003\000\002\020\006\000\002\020\006\000\002\020\005" +
    "\000\002\020\003\000\002\020\005\000\002\020\004\000" +
    "\002\020\004\000\002\020\005\000\002\020\004\000\002" +
    "\020\004\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\054\004" +
    "\000\002\054\005\000\002\054\006\000\002\022\007\000" +
    "\002\022\007\000\002\022\007\000\002\022\007\000\002" +
    "\022\007\000\002\036\003\000\002\036\003\000\002\036" +
    "\005\000\002\053\004\000\002\053\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\005\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\044\014\000\002\055\007\000\002\055\006\000\002\024" +
    "\005\000\002\024\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\005\000\002\040\003\000\002\040\004\000" +
    "\002\040\003\000\002\040\004\000\002\041\010\000\002" +
    "\041\010\000\002\042\012\000\002\042\012\000\002\042" +
    "\012\000\002\043\006\000\002\035\004\000\002\035\003" +
    "\000\002\035\006\000\002\034\003\000\002\034\002\000" +
    "\002\032\003\000\002\032\004\000\002\032\003\000\002" +
    "\032\005\000\002\032\004\000\002\033\004\000\002\033" +
    "\003\000\002\033\004\000\002\033\005\000\002\033\004" +
    "\000\002\033\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\005\000\002\027\006\000\002\027\005\000\002" +
    "\027\010\000\002\027\003\000\002\027\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\007\003\000\002\007\002\000" +
    "\002\010\004\000\002\010\003\000\002\047\017\000\002" +
    "\005\003\000\002\005\002\000\002\006\004\000\002\006" +
    "\003\000\002\050\015\000\002\051\005\000\002\051\003" +
    "\000\002\051\002\000\002\052\006\000\002\052\005\000" +
    "\002\057\004\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\077\004\000\002\077\004\000\002\077" +
    "\004\000\002\077\004\000\002\077\004\000\002\077\004" +
    "\000\002\077\003\000\002\077\003\000\002\077\003\000" +
    "\002\077\003\000\002\077\003\000\002\077\003\000\002" +
    "\100\004\000\002\100\003\000\002\056\004\000\002\121" +
    "\005\000\002\121\006\000\002\120\005\000\002\120\003" +
    "\000\002\113\003\000\002\113\003\000\002\113\003\000" +
    "\002\113\003\000\002\113\003\000\002\060\004\000\002" +
    "\060\002\000\002\061\011\000\002\063\004\000\002\063" +
    "\002\000\002\064\004\000\002\064\002\000\002\065\006" +
    "\000\002\065\006\000\002\065\012\000\002\066\003\000" +
    "\002\066\005\000\002\066\003\000\002\076\010\000\002" +
    "\067\003\000\002\067\002\000\002\070\005\000\002\070" +
    "\003\000\002\101\004\000\002\071\004\000\002\071\003" +
    "\000\002\072\003\000\002\072\004\000\002\072\004\000" +
    "\002\072\004\000\002\072\004\000\002\072\004\000\002" +
    "\072\004\000\002\074\003\000\002\074\003\000\002\074" +
    "\003\000\002\074\003\000\002\074\003\000\002\075\003" +
    "\000\002\075\003\000\002\075\004\000\002\122\006\000" +
    "\002\122\006\000\002\110\012\000\002\111\006\000\002" +
    "\111\004\000\002\111\002\000\002\102\011\000\002\103" +
    "\013\000\002\104\015\000\002\073\003\000\002\073\003" +
    "\000\002\073\003\000\002\073\002\000\002\105\011\000" +
    "\002\106\004\000\002\106\003\000\002\107\006\000\002" +
    "\107\005\000\002\112\005\000\002\112\006\000\002\112" +
    "\006\000\002\112\006\000\002\112\010\000\002\112\011" +
    "\000\002\112\010\000\002\112\011\000\002\112\011\000" +
    "\002\112\012\000\002\112\010\000\002\112\007\000\002" +
    "\125\006\000\002\125\004\000\002\126\004\000\002\126" +
    "\004\000\002\126\004\000\002\126\005\000\002\126\006" +
    "\000\002\126\006\000\002\126\007\000\002\126\007\000" +
    "\002\126\010\000\002\126\005\000\002\127\005\000\002" +
    "\127\006\000\002\127\005\000\002\127\006\000\002\123" +
    "\005\000\002\123\004\000\002\124\003\000\002\124\005" +
    "\000\002\124\006\000\002\124\006\000\002\124\007\000" +
    "\002\124\004\000\002\116\005\000\002\116\005\000\002" +
    "\116\004\000\002\116\003\000\002\115\005\000\002\115" +
    "\005\000\002\115\005\000\002\115\005\000\002\115\005" +
    "\000\002\115\005\000\002\115\003\000\002\114\005\000" +
    "\002\114\005\000\002\114\005\000\002\114\005\000\002" +
    "\114\005\000\002\114\005\000\002\114\003\000\002\114" +
    "\004\000\002\114\005\000\002\114\006\000\002\114\005" +
    "\000\002\114\007\000\002\114\006\000\002\114\004\000" +
    "\002\114\003\000\002\114\004\000\002\114\004\000\002" +
    "\114\006\000\002\114\007\000\002\114\003\000\002\114" +
    "\005\000\002\114\004\000\002\114\004\000\002\117\005" +
    "\000\002\117\005\000\002\117\005\000\002\141\015\000" +
    "\002\142\003\000\002\142\003\000\002\142\003\000\002" +
    "\142\003\000\002\142\003\000\002\160\006\000\002\160" +
    "\005\000\002\161\005\000\002\161\003\000\002\162\003" +
    "\000\002\162\003\000\002\162\003\000\002\162\003\000" +
    "\002\162\003\000\002\143\006\000\002\143\002\000\002" +
    "\163\011\000\002\163\002\000\002\164\004\000\002\164" +
    "\002\000\002\165\005\000\002\165\007\000\002\165\006" +
    "\000\002\165\003\000\002\166\007\000\002\166\010\000" +
    "\002\130\005\000\002\130\004\000\002\131\005\000\002" +
    "\131\006\000\002\155\003\000\002\155\004\000\002\155" +
    "\004\000\002\155\004\000\002\155\004\000\002\155\004" +
    "\000\002\132\003\000\002\132\003\000\002\133\011\000" +
    "\002\133\006\000\002\133\005\000\002\133\005\000\002" +
    "\134\003\000\002\134\003\000\002\134\003\000\002\134" +
    "\003\000\002\134\003\000\002\134\003\000\002\140\005" +
    "\000\002\140\005\000\002\140\005\000\002\135\012\000" +
    "\002\136\004\000\002\136\006\000\002\152\011\000\002" +
    "\153\004\000\002\153\003\000\002\154\010\000\002\154" +
    "\007\000\002\147\015\000\002\157\003\000\002\157\003" +
    "\000\002\157\003\000\002\157\002\000\002\150\011\000" +
    "\002\151\013\000\002\156\006\000\002\137\007\000\002" +
    "\137\010\000\002\144\005\000\002\144\005\000\002\144" +
    "\004\000\002\144\003\000\002\145\005\000\002\145\005" +
    "\000\002\145\005\000\002\145\005\000\002\145\005\000" +
    "\002\145\005\000\002\145\003\000\002\146\005\000\002" +
    "\146\005\000\002\146\005\000\002\146\005\000\002\146" +
    "\005\000\002\146\005\000\002\146\003\000\002\146\003" +
    "\000\002\146\003\000\002\146\003\000\002\146\005\000" +
    "\002\146\004\000\002\146\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0354\000\004\031\006\001\002\000\004\002\u0356\001" +
    "\002\000\004\030\u013f\001\002\000\010\030\uff77\061\013" +
    "\105\uff77\001\002\000\010\030\uff75\061\uff75\105\uff75\001" +
    "\002\000\004\030\uffff\001\002\000\010\030\uff78\061\013" +
    "\105\uff78\001\002\000\006\030\uff72\105\u012e\001\002\000" +
    "\004\141\014\001\002\000\004\016\015\001\002\000\012" +
    "\014\uff6c\017\uff6c\127\017\141\016\001\002\000\010\003" +
    "\ufff5\013\ufff5\014\ufff5\001\002\000\004\141\016\001\002" +
    "\000\006\014\uff6d\017\uff6d\001\002\000\006\013\u0129\014" +
    "\u0107\001\002\000\006\014\023\017\024\001\002\000\006" +
    "\127\017\141\016\001\002\000\004\013\025\001\002\000" +
    "\020\003\031\036\035\042\030\057\032\070\033\117\034" +
    "\141\026\001\002\000\016\003\ufff8\012\ufff8\014\ufff8\017" +
    "\ufff8\035\ufff8\141\ufff8\001\002\000\004\012\036\001\002" +
    "\000\016\003\ufffa\012\ufffa\014\ufffa\017\ufffa\035\ufffa\141" +
    "\ufffa\001\002\000\016\003\ufff7\012\ufff7\014\ufff7\017\ufff7" +
    "\035\ufff7\141\ufff7\001\002\000\016\003\ufffc\012\ufffc\014" +
    "\ufffc\017\ufffc\035\ufffc\141\ufffc\001\002\000\016\003\ufffd" +
    "\012\ufffd\014\ufffd\017\ufffd\035\ufffd\141\ufffd\001\002\000" +
    "\016\003\ufff9\012\ufff9\014\ufff9\017\ufff9\035\ufff9\141\ufff9" +
    "\001\002\000\016\003\ufffb\012\ufffb\014\ufffb\017\ufffb\035" +
    "\ufffb\141\ufffb\001\002\000\006\035\uffef\127\037\001\002" +
    "\000\006\003\u0101\141\016\001\002\000\004\035\041\001" +
    "\002\000\026\003\056\037\054\040\057\046\044\053\uff91" +
    "\060\064\064\051\113\065\131\046\141\052\001\002\000" +
    "\034\003\uff7c\012\uff7c\037\uff7c\040\uff7c\046\uff7c\052\uff7c" +
    "\053\uff7c\060\uff7c\064\uff7c\113\uff7c\126\uff7c\131\uff7c\141" +
    "\uff7c\001\002\000\034\003\uff79\012\uff79\037\uff79\040\uff79" +
    "\046\uff79\052\uff79\053\uff79\060\uff79\064\uff79\113\uff79\126" +
    "\uff79\131\uff79\141\uff79\001\002\000\034\003\uff84\012\uff84" +
    "\037\uff84\040\uff84\046\uff84\052\uff84\053\uff84\060\uff84\064" +
    "\uff84\113\uff84\126\uff84\131\uff84\141\uff84\001\002\000\034" +
    "\003\uff7b\012\uff7b\037\uff7b\040\uff7b\046\uff7b\052\uff7b\053" +
    "\uff7b\060\uff7b\064\uff7b\113\uff7b\126\uff7b\131\uff7b\141\uff7b" +
    "\001\002\000\004\016\367\001\002\000\006\012\365\053" +
    "\uff90\001\002\000\004\053\uff92\001\002\000\006\003\346" +
    "\016\347\001\002\000\010\016\335\022\333\133\334\001" +
    "\002\000\026\003\056\037\054\040\057\046\044\053\uff8e" +
    "\060\064\064\051\113\065\131\046\141\052\001\002\000" +
    "\034\003\uff85\012\uff85\037\uff85\040\uff85\046\uff85\052\uff85" +
    "\053\uff85\060\uff85\064\uff85\113\uff85\126\uff85\131\uff85\141" +
    "\uff85\001\002\000\034\003\uff7f\012\uff7f\037\uff7f\040\uff7f" +
    "\046\uff7f\052\uff7f\053\uff7f\060\uff7f\064\uff7f\113\uff7f\126" +
    "\uff7f\131\uff7f\141\uff7f\001\002\000\034\003\uff7e\012\uff7e" +
    "\037\uff7e\040\uff7e\046\uff7e\052\uff7e\053\uff7e\060\uff7e\064" +
    "\uff7e\113\uff7e\126\uff7e\131\uff7e\141\uff7e\001\002\000\004" +
    "\016\266\001\002\000\034\003\uff7d\012\uff7d\037\uff7d\040" +
    "\uff7d\046\uff7d\052\uff7d\053\uff7d\060\uff7d\064\uff7d\113\uff7d" +
    "\126\uff7d\131\uff7d\141\uff7d\001\002\000\004\053\264\001" +
    "\002\000\026\003\056\035\241\037\054\040\057\046\044" +
    "\060\064\064\051\113\065\131\046\141\052\001\002\000" +
    "\034\003\uff7a\012\uff7a\037\uff7a\040\uff7a\046\uff7a\052\uff7a" +
    "\053\uff7a\060\uff7a\064\uff7a\113\uff7a\126\uff7a\131\uff7a\141" +
    "\uff7a\001\002\000\004\141\215\001\002\000\026\003\056" +
    "\035\067\037\054\040\057\046\044\060\064\064\051\113" +
    "\065\131\046\141\052\001\002\000\004\012\214\001\002" +
    "\000\026\003\056\037\054\040\057\046\044\053\uff91\060" +
    "\064\064\051\113\065\131\046\141\052\001\002\000\034" +
    "\003\uff94\012\uff94\037\uff94\040\uff94\046\uff94\052\uff94\053" +
    "\uff94\060\uff94\064\uff94\113\uff94\126\uff94\131\uff94\141\uff94" +
    "\001\002\000\004\126\072\001\002\000\030\003\104\004" +
    "\100\005\073\016\111\074\110\141\103\142\106\143\101" +
    "\144\076\145\074\146\107\001\002\000\026\003\210\004" +
    "\100\005\073\016\111\141\103\142\106\143\101\144\076" +
    "\145\074\146\107\001\002\000\110\003\uffc0\004\uffc0\005" +
    "\uffc0\006\uffc0\007\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0" +
    "\015\uffc0\017\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027" +
    "\uffc0\033\uffc0\035\uffc0\037\uffc0\040\uffc0\046\uffc0\050\uffc0" +
    "\052\uffc0\053\uffc0\054\uffc0\060\uffc0\064\uffc0\077\uffc0\113" +
    "\uffc0\124\uffc0\126\uffc0\131\uffc0\134\uffc0\136\uffc0\141\uffc0" +
    "\001\002\000\110\003\uffcb\004\uffcb\005\uffcb\006\uffcb\007" +
    "\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\017\uffcb" +
    "\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\033\uffcb\035" +
    "\uffcb\037\uffcb\040\uffcb\046\uffcb\050\uffcb\052\uffcb\053\uffcb" +
    "\054\uffcb\060\uffcb\064\uffcb\077\uffcb\113\uffcb\124\uffcb\126" +
    "\uffcb\131\uffcb\134\uffcb\136\uffcb\141\uffcb\001\002\000\110" +
    "\003\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\011\uffbf\012" +
    "\uffbf\013\uffbf\014\uffbf\015\uffbf\017\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\027\uffbf\033\uffbf\035\uffbf\037\uffbf\040" +
    "\uffbf\046\uffbf\050\uffbf\052\uffbf\053\uffbf\054\uffbf\060\uffbf" +
    "\064\uffbf\077\uffbf\113\uffbf\124\uffbf\126\uffbf\131\uffbf\134" +
    "\uffbf\136\uffbf\141\uffbf\001\002\000\110\003\uffd8\004\156" +
    "\005\160\006\162\007\161\011\157\012\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\017\uffd8\023\uffd8\024\174\025\176\026\173" +
    "\027\200\033\uffd8\035\uffd8\037\uffd8\040\uffd8\046\uffd8\050" +
    "\uffd8\052\uffd8\053\uffd8\054\177\060\uffd8\064\uffd8\077\uffd8" +
    "\113\uffd8\124\uffd8\126\uffd8\131\uffd8\134\175\136\155\141" +
    "\uffd8\001\002\000\026\003\172\004\100\005\073\016\111" +
    "\141\103\142\106\143\101\144\076\145\074\146\107\001" +
    "\002\000\110\003\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd" +
    "\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\017\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\033\uffbd\035\uffbd" +
    "\037\uffbd\040\uffbd\046\uffbd\050\uffbd\052\uffbd\053\uffbd\054" +
    "\uffbd\060\uffbd\064\uffbd\077\uffbd\113\uffbd\124\uffbd\126\uffbd" +
    "\131\uffbd\134\uffbd\136\uffbd\141\uffbd\001\002\000\040\003" +
    "\uff96\012\uff96\033\132\037\uff96\040\uff96\046\uff96\052\uff96" +
    "\053\uff96\060\uff96\064\uff96\077\133\113\uff96\126\uff96\131" +
    "\uff96\141\uff96\001\002\000\114\003\uffc7\004\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015" +
    "\uffc7\016\144\017\uffc7\022\143\023\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\033\uffc7\035\uffc7\037\uffc7\040\uffc7\046" +
    "\uffc7\050\uffc7\052\uffc7\053\uffc7\054\uffc7\060\uffc7\064\uffc7" +
    "\077\uffc7\113\uffc7\124\uffc7\126\uffc7\131\uffc7\134\uffc7\136" +
    "\uffc7\141\uffc7\001\002\000\016\004\116\005\120\006\122" +
    "\007\121\136\114\140\117\001\002\000\060\003\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\017\uffdf\023\uffdf\033\uffdf" +
    "\035\uffdf\037\uffdf\040\uffdf\046\uffdf\050\uffdf\052\uffdf\053" +
    "\uffdf\060\uffdf\064\uffdf\077\uffdf\113\uffdf\124\uffdf\126\uffdf" +
    "\131\uffdf\141\uffdf\001\002\000\110\003\uffbc\004\uffbc\005" +
    "\uffbc\006\uffbc\007\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc" +
    "\015\uffbc\017\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027" +
    "\uffbc\033\uffbc\035\uffbc\037\uffbc\040\uffbc\046\uffbc\050\uffbc" +
    "\052\uffbc\053\uffbc\054\uffbc\060\uffbc\064\uffbc\077\uffbc\113" +
    "\uffbc\124\uffbc\126\uffbc\131\uffbc\134\uffbc\136\uffbc\141\uffbc" +
    "\001\002\000\110\003\uffbe\004\uffbe\005\uffbe\006\uffbe\007" +
    "\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\017\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\033\uffbe\035" +
    "\uffbe\037\uffbe\040\uffbe\046\uffbe\050\uffbe\052\uffbe\053\uffbe" +
    "\054\uffbe\060\uffbe\064\uffbe\077\uffbe\113\uffbe\124\uffbe\126" +
    "\uffbe\131\uffbe\134\uffbe\136\uffbe\141\uffbe\001\002\000\030" +
    "\003\104\004\100\005\073\016\111\074\110\141\103\142" +
    "\106\143\101\144\076\145\074\146\107\001\002\000\030" +
    "\003\113\004\100\005\073\016\111\074\110\141\103\142" +
    "\106\143\101\144\076\145\074\146\107\001\002\000\010" +
    "\017\131\033\132\077\133\001\002\000\020\004\116\005" +
    "\120\006\122\007\121\017\115\136\114\140\117\001\002" +
    "\000\004\003\130\001\002\000\110\003\uffc3\004\uffc3\005" +
    "\uffc3\006\uffc3\007\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3" +
    "\015\uffc3\017\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\033\uffc3\035\uffc3\037\uffc3\040\uffc3\046\uffc3\050\uffc3" +
    "\052\uffc3\053\uffc3\054\uffc3\060\uffc3\064\uffc3\077\uffc3\113" +
    "\uffc3\124\uffc3\126\uffc3\131\uffc3\134\uffc3\136\uffc3\141\uffc3" +
    "\001\002\000\004\003\127\001\002\000\004\003\126\001" +
    "\002\000\004\003\125\001\002\000\004\003\124\001\002" +
    "\000\004\003\123\001\002\000\110\003\uffd5\004\uffd5\005" +
    "\uffd5\006\uffd5\007\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\017\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027" +
    "\uffd5\033\uffd5\035\uffd5\037\uffd5\040\uffd5\046\uffd5\050\uffd5" +
    "\052\uffd5\053\uffd5\054\uffd5\060\uffd5\064\uffd5\077\uffd5\113" +
    "\uffd5\124\uffd5\126\uffd5\131\uffd5\134\uffd5\136\uffd5\141\uffd5" +
    "\001\002\000\110\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\017\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\033\uffd4\035" +
    "\uffd4\037\uffd4\040\uffd4\046\uffd4\050\uffd4\052\uffd4\053\uffd4" +
    "\054\uffd4\060\uffd4\064\uffd4\077\uffd4\113\uffd4\124\uffd4\126" +
    "\uffd4\131\uffd4\134\uffd4\136\uffd4\141\uffd4\001\002\000\110" +
    "\003\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\017\uffd6\023\uffd6\024\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\033\uffd6\035\uffd6\037\uffd6\040" +
    "\uffd6\046\uffd6\050\uffd6\052\uffd6\053\uffd6\054\uffd6\060\uffd6" +
    "\064\uffd6\077\uffd6\113\uffd6\124\uffd6\126\uffd6\131\uffd6\134" +
    "\uffd6\136\uffd6\141\uffd6\001\002\000\110\003\uffd3\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\011\uffd3\012\uffd3\013\uffd3\014" +
    "\uffd3\015\uffd3\017\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\027\uffd3\033\uffd3\035\uffd3\037\uffd3\040\uffd3\046\uffd3\050" +
    "\uffd3\052\uffd3\053\uffd3\054\uffd3\060\uffd3\064\uffd3\077\uffd3" +
    "\113\uffd3\124\uffd3\126\uffd3\131\uffd3\134\uffd3\136\uffd3\141" +
    "\uffd3\001\002\000\110\003\uffd7\004\uffd7\005\uffd7\006\uffd7" +
    "\007\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\017" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\033\uffd7" +
    "\035\uffd7\037\uffd7\040\uffd7\046\uffd7\050\uffd7\052\uffd7\053" +
    "\uffd7\054\uffd7\060\uffd7\064\uffd7\077\uffd7\113\uffd7\124\uffd7" +
    "\126\uffd7\131\uffd7\134\uffd7\136\uffd7\141\uffd7\001\002\000" +
    "\110\003\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\014\uffd2\015\uffd2\017\uffd2\023\uffd2\024" +
    "\uffd2\025\uffd2\026\uffd2\027\uffd2\033\uffd2\035\uffd2\037\uffd2" +
    "\040\uffd2\046\uffd2\050\uffd2\052\uffd2\053\uffd2\054\uffd2\060" +
    "\uffd2\064\uffd2\077\uffd2\113\uffd2\124\uffd2\126\uffd2\131\uffd2" +
    "\134\uffd2\136\uffd2\141\uffd2\001\002\000\110\003\uffc6\004" +
    "\uffc6\005\uffc6\006\uffc6\007\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\017\uffc6\023\uffc6\024\uffc6\025\uffc6\026" +
    "\uffc6\027\uffc6\033\uffc6\035\uffc6\037\uffc6\040\uffc6\046\uffc6" +
    "\050\uffc6\052\uffc6\053\uffc6\054\uffc6\060\uffc6\064\uffc6\077" +
    "\uffc6\113\uffc6\124\uffc6\126\uffc6\131\uffc6\134\uffc6\136\uffc6" +
    "\141\uffc6\001\002\000\032\003\104\004\100\005\073\016" +
    "\111\074\110\122\137\141\103\142\106\143\101\144\076" +
    "\145\074\146\107\001\002\000\032\003\104\004\100\005" +
    "\073\016\111\052\135\074\110\141\103\142\106\143\101" +
    "\144\076\145\074\146\107\001\002\000\060\003\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\017\uffe2\023\uffe2\033\132" +
    "\035\uffe2\037\uffe2\040\uffe2\046\uffe2\050\uffe2\052\uffe2\053" +
    "\uffe2\060\uffe2\064\uffe2\077\uffe2\113\uffe2\124\uffe2\126\uffe2" +
    "\131\uffe2\141\uffe2\001\002\000\030\003\104\004\100\005" +
    "\073\016\111\074\110\141\103\142\106\143\101\144\076" +
    "\145\074\146\107\001\002\000\060\003\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\017\uffe1\023\uffe1\033\uffe1\035\uffe1" +
    "\037\uffe1\040\uffe1\046\uffe1\050\uffe1\052\uffe1\053\uffe1\060" +
    "\uffe1\064\uffe1\077\uffe1\113\uffe1\124\uffe1\126\uffe1\131\uffe1" +
    "\141\uffe1\001\002\000\030\003\104\004\100\005\073\016" +
    "\111\074\110\141\103\142\106\143\101\144\076\145\074" +
    "\146\107\001\002\000\060\003\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\017\uffe4\023\uffe4\033\uffe4\035\uffe4\037\uffe4" +
    "\040\uffe4\046\uffe4\050\uffe4\052\uffe4\053\uffe4\060\uffe4\064" +
    "\uffe4\077\uffe4\113\uffe4\124\uffe4\126\uffe4\131\uffe4\141\uffe4" +
    "\001\002\000\060\003\uffe3\012\uffe3\013\uffe3\014\uffe3\015" +
    "\uffe3\017\uffe3\023\uffe3\033\132\035\uffe3\037\uffe3\040\uffe3" +
    "\046\uffe3\050\uffe3\052\uffe3\053\uffe3\060\uffe3\064\uffe3\077" +
    "\133\113\uffe3\124\uffe3\126\uffe3\131\uffe3\141\uffe3\001\002" +
    "\000\060\003\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\017" +
    "\uffe0\023\uffe0\033\uffe0\035\uffe0\037\uffe0\040\uffe0\046\uffe0" +
    "\050\uffe0\052\uffe0\053\uffe0\060\uffe0\064\uffe0\077\uffe0\113" +
    "\uffe0\124\uffe0\126\uffe0\131\uffe0\141\uffe0\001\002\000\026" +
    "\003\104\004\100\005\073\016\111\141\103\142\106\143" +
    "\101\144\076\145\074\146\107\001\002\000\032\003\104" +
    "\004\100\005\073\016\111\017\146\074\110\141\103\142" +
    "\106\143\101\144\076\145\074\146\107\001\002\000\012" +
    "\014\ufff1\017\ufff1\033\132\077\133\001\002\000\110\003" +
    "\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\011\uffc8\012\uffc8" +
    "\013\uffc8\014\uffc8\015\uffc8\017\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\026\uffc8\027\uffc8\033\uffc8\035\uffc8\037\uffc8\040\uffc8" +
    "\046\uffc8\050\uffc8\052\uffc8\053\uffc8\054\uffc8\060\uffc8\064" +
    "\uffc8\077\uffc8\113\uffc8\124\uffc8\126\uffc8\131\uffc8\134\uffc8" +
    "\136\uffc8\141\uffc8\001\002\000\006\014\150\017\151\001" +
    "\002\000\030\003\104\004\100\005\073\016\111\074\110" +
    "\141\103\142\106\143\101\144\076\145\074\146\107\001" +
    "\002\000\110\003\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9" +
    "\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\017\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\033\uffc9\035\uffc9" +
    "\037\uffc9\040\uffc9\046\uffc9\050\uffc9\052\uffc9\053\uffc9\054" +
    "\uffc9\060\uffc9\064\uffc9\077\uffc9\113\uffc9\124\uffc9\126\uffc9" +
    "\131\uffc9\134\uffc9\136\uffc9\141\uffc9\001\002\000\012\014" +
    "\ufff2\017\ufff2\033\132\077\133\001\002\000\020\004\156" +
    "\005\160\006\162\007\161\011\157\023\154\136\155\001" +
    "\002\000\110\003\uffca\004\uffca\005\uffca\006\uffca\007\uffca" +
    "\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\017\uffca\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\027\uffca\033\uffca\035\uffca" +
    "\037\uffca\040\uffca\046\uffca\050\uffca\052\uffca\053\uffca\054" +
    "\uffca\060\uffca\064\uffca\077\uffca\113\uffca\124\uffca\126\uffca" +
    "\131\uffca\134\uffca\136\uffca\141\uffca\001\002\000\026\003" +
    "\104\004\100\005\073\016\111\141\103\142\106\143\101" +
    "\144\076\145\074\146\107\001\002\000\026\003\104\004" +
    "\100\005\073\016\111\141\103\142\106\143\101\144\076" +
    "\145\074\146\107\001\002\000\026\003\104\004\100\005" +
    "\073\016\111\141\103\142\106\143\101\144\076\145\074" +
    "\146\107\001\002\000\026\003\104\004\100\005\073\016" +
    "\111\141\103\142\106\143\101\144\076\145\074\146\107" +
    "\001\002\000\026\003\104\004\100\005\073\016\111\141" +
    "\103\142\106\143\101\144\076\145\074\146\107\001\002" +
    "\000\026\003\104\004\100\005\073\016\111\141\103\142" +
    "\106\143\101\144\076\145\074\146\107\001\002\000\110" +
    "\003\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011\157\012" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\017\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\026\uffcf\027\uffcf\033\uffcf\035\uffcf\037\uffcf\040" +
    "\uffcf\046\uffcf\050\uffcf\052\uffcf\053\uffcf\054\uffcf\060\uffcf" +
    "\064\uffcf\077\uffcf\113\uffcf\124\uffcf\126\uffcf\131\uffcf\134" +
    "\uffcf\136\uffcf\141\uffcf\001\002\000\110\003\uffce\004\uffce" +
    "\005\uffce\006\uffce\007\uffce\011\157\012\uffce\013\uffce\014" +
    "\uffce\015\uffce\017\uffce\023\uffce\024\uffce\025\uffce\026\uffce" +
    "\027\uffce\033\uffce\035\uffce\037\uffce\040\uffce\046\uffce\050" +
    "\uffce\052\uffce\053\uffce\054\uffce\060\uffce\064\uffce\077\uffce" +
    "\113\uffce\124\uffce\126\uffce\131\uffce\134\uffce\136\uffce\141" +
    "\uffce\001\002\000\110\003\uffd0\004\uffd0\005\uffd0\006\162" +
    "\007\161\011\157\012\uffd0\013\uffd0\014\uffd0\015\uffd0\017" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\033\uffd0" +
    "\035\uffd0\037\uffd0\040\uffd0\046\uffd0\050\uffd0\052\uffd0\053" +
    "\uffd0\054\uffd0\060\uffd0\064\uffd0\077\uffd0\113\uffd0\124\uffd0" +
    "\126\uffd0\131\uffd0\134\uffd0\136\155\141\uffd0\001\002\000" +
    "\110\003\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\011\uffcc" +
    "\012\uffcc\013\uffcc\014\uffcc\015\uffcc\017\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\033\uffcc\035\uffcc\037\uffcc" +
    "\040\uffcc\046\uffcc\050\uffcc\052\uffcc\053\uffcc\054\uffcc\060" +
    "\uffcc\064\uffcc\077\uffcc\113\uffcc\124\uffcc\126\uffcc\131\uffcc" +
    "\134\uffcc\136\uffcc\141\uffcc\001\002\000\110\003\uffd1\004" +
    "\uffd1\005\uffd1\006\162\007\161\011\157\012\uffd1\013\uffd1" +
    "\014\uffd1\015\uffd1\017\uffd1\023\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\027\uffd1\033\uffd1\035\uffd1\037\uffd1\040\uffd1\046\uffd1" +
    "\050\uffd1\052\uffd1\053\uffd1\054\uffd1\060\uffd1\064\uffd1\077" +
    "\uffd1\113\uffd1\124\uffd1\126\uffd1\131\uffd1\134\uffd1\136\155" +
    "\141\uffd1\001\002\000\110\003\uffcd\004\uffcd\005\uffcd\006" +
    "\uffcd\007\uffcd\011\157\012\uffcd\013\uffcd\014\uffcd\015\uffcd" +
    "\017\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\033" +
    "\uffcd\035\uffcd\037\uffcd\040\uffcd\046\uffcd\050\uffcd\052\uffcd" +
    "\053\uffcd\054\uffcd\060\uffcd\064\uffcd\077\uffcd\113\uffcd\124" +
    "\uffcd\126\uffcd\131\uffcd\134\uffcd\136\uffcd\141\uffcd\001\002" +
    "\000\110\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\011" +
    "\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\027\uffc5\033\uffc5\035\uffc5\037" +
    "\uffc5\040\uffc5\046\uffc5\050\uffc5\052\uffc5\053\uffc5\054\uffc5" +
    "\060\uffc5\064\uffc5\077\uffc5\113\uffc5\124\uffc5\126\uffc5\131" +
    "\uffc5\134\uffc5\136\uffc5\141\uffc5\001\002\000\112\003\uffc1" +
    "\004\116\005\120\006\122\007\121\011\uffc1\012\uffc1\013" +
    "\uffc1\014\uffc1\015\uffc1\017\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\027\uffc1\033\uffc1\035\uffc1\037\uffc1\040\uffc1\046" +
    "\uffc1\050\uffc1\052\uffc1\053\uffc1\054\uffc1\060\uffc1\064\uffc1" +
    "\077\uffc1\113\uffc1\124\uffc1\126\uffc1\131\uffc1\134\uffc1\136" +
    "\114\140\117\141\uffc1\001\002\000\026\003\104\004\100" +
    "\005\073\016\111\141\103\142\106\143\101\144\076\145" +
    "\074\146\107\001\002\000\026\003\104\004\100\005\073" +
    "\016\111\141\103\142\106\143\101\144\076\145\074\146" +
    "\107\001\002\000\026\003\104\004\100\005\073\016\111" +
    "\141\103\142\106\143\101\144\076\145\074\146\107\001" +
    "\002\000\026\003\104\004\100\005\073\016\111\141\103" +
    "\142\106\143\101\144\076\145\074\146\107\001\002\000" +
    "\026\003\104\004\100\005\073\016\111\141\103\142\106" +
    "\143\101\144\076\145\074\146\107\001\002\000\026\003" +
    "\104\004\100\005\073\016\111\141\103\142\106\143\101" +
    "\144\076\145\074\146\107\001\002\000\074\003\uffd9\004" +
    "\156\005\160\006\162\007\161\011\157\012\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\017\uffd9\023\uffd9\033\uffd9\035\uffd9\037" +
    "\uffd9\040\uffd9\046\uffd9\050\uffd9\052\uffd9\053\uffd9\060\uffd9" +
    "\064\uffd9\077\uffd9\113\uffd9\124\uffd9\126\uffd9\131\uffd9\136" +
    "\155\141\uffd9\001\002\000\074\003\uffde\004\156\005\160" +
    "\006\162\007\161\011\157\012\uffde\013\uffde\014\uffde\015" +
    "\uffde\017\uffde\023\uffde\033\uffde\035\uffde\037\uffde\040\uffde" +
    "\046\uffde\050\uffde\052\uffde\053\uffde\060\uffde\064\uffde\077" +
    "\uffde\113\uffde\124\uffde\126\uffde\131\uffde\136\155\141\uffde" +
    "\001\002\000\074\003\uffdb\004\156\005\160\006\162\007" +
    "\161\011\157\012\uffdb\013\uffdb\014\uffdb\015\uffdb\017\uffdb" +
    "\023\uffdb\033\uffdb\035\uffdb\037\uffdb\040\uffdb\046\uffdb\050" +
    "\uffdb\052\uffdb\053\uffdb\060\uffdb\064\uffdb\077\uffdb\113\uffdb" +
    "\124\uffdb\126\uffdb\131\uffdb\136\155\141\uffdb\001\002\000" +
    "\074\003\uffdd\004\156\005\160\006\162\007\161\011\157" +
    "\012\uffdd\013\uffdd\014\uffdd\015\uffdd\017\uffdd\023\uffdd\033" +
    "\uffdd\035\uffdd\037\uffdd\040\uffdd\046\uffdd\050\uffdd\052\uffdd" +
    "\053\uffdd\060\uffdd\064\uffdd\077\uffdd\113\uffdd\124\uffdd\126" +
    "\uffdd\131\uffdd\136\155\141\uffdd\001\002\000\074\003\uffdc" +
    "\004\156\005\160\006\162\007\161\011\157\012\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\017\uffdc\023\uffdc\033\uffdc\035\uffdc" +
    "\037\uffdc\040\uffdc\046\uffdc\050\uffdc\052\uffdc\053\uffdc\060" +
    "\uffdc\064\uffdc\077\uffdc\113\uffdc\124\uffdc\126\uffdc\131\uffdc" +
    "\136\155\141\uffdc\001\002\000\074\003\uffda\004\156\005" +
    "\160\006\162\007\161\011\157\012\uffda\013\uffda\014\uffda" +
    "\015\uffda\017\uffda\023\uffda\033\uffda\035\uffda\037\uffda\040" +
    "\uffda\046\uffda\050\uffda\052\uffda\053\uffda\060\uffda\064\uffda" +
    "\077\uffda\113\uffda\124\uffda\126\uffda\131\uffda\136\155\141" +
    "\uffda\001\002\000\110\003\uffc4\004\uffc4\005\uffc4\006\uffc4" +
    "\007\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\017" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\033\uffc4" +
    "\035\uffc4\037\uffc4\040\uffc4\046\uffc4\050\uffc4\052\uffc4\053" +
    "\uffc4\054\uffc4\060\uffc4\064\uffc4\077\uffc4\113\uffc4\124\uffc4" +
    "\126\uffc4\131\uffc4\134\uffc4\136\uffc4\141\uffc4\001\002\000" +
    "\112\003\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\011\uffc2" +
    "\012\uffc2\013\uffc2\014\uffc2\015\uffc2\017\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\033\uffc2\035\uffc2\037\uffc2" +
    "\040\uffc2\046\uffc2\050\uffc2\052\uffc2\053\uffc2\054\uffc2\060" +
    "\uffc2\064\uffc2\077\uffc2\113\uffc2\124\uffc2\126\uffc2\131\uffc2" +
    "\134\uffc2\136\uffc2\140\117\141\uffc2\001\002\000\004\053" +
    "\212\001\002\000\004\012\213\001\002\000\034\003\uff93" +
    "\012\uff93\037\uff93\040\uff93\046\uff93\052\uff93\053\uff93\060" +
    "\uff93\064\uff93\113\uff93\126\uff93\131\uff93\141\uff93\001\002" +
    "\000\034\003\uff95\012\uff95\037\uff95\040\uff95\046\uff95\052" +
    "\uff95\053\uff95\060\uff95\064\uff95\113\uff95\126\uff95\131\uff95" +
    "\141\uff95\001\002\000\006\003\216\133\217\001\002\000" +
    "\030\003\104\004\100\005\073\016\111\074\110\141\103" +
    "\142\106\143\101\144\076\145\074\146\107\001\002\000" +
    "\030\003\221\004\100\005\073\016\111\074\110\141\103" +
    "\142\106\143\101\144\076\145\074\146\107\001\002\000" +
    "\010\033\132\077\133\124\226\001\002\000\020\004\116" +
    "\005\120\006\122\007\121\124\222\136\114\140\117\001" +
    "\002\000\030\003\104\004\100\005\073\016\111\074\110" +
    "\141\103\142\106\143\101\144\076\145\074\146\107\001" +
    "\002\000\010\033\132\050\224\077\133\001\002\000\026" +
    "\003\056\035\067\037\054\040\057\046\044\060\064\064" +
    "\051\113\065\131\046\141\052\001\002\000\034\003\uff98" +
    "\012\uff98\037\uff98\040\uff98\046\uff98\052\uff98\053\uff98\060" +
    "\uff98\064\uff98\113\uff98\126\uff98\131\uff98\141\uff98\001\002" +
    "\000\030\003\104\004\100\005\073\016\111\074\110\141" +
    "\103\142\106\143\101\144\076\145\074\146\107\001\002" +
    "\000\010\033\132\050\230\077\133\001\002\000\026\003" +
    "\056\035\067\037\054\040\057\046\044\060\064\064\051" +
    "\113\065\131\046\141\052\001\002\000\034\003\uff99\012" +
    "\uff99\037\uff99\040\uff99\046\uff99\052\uff99\053\uff99\060\uff99" +
    "\064\uff99\113\uff99\126\uff99\131\uff99\141\uff99\001\002\000" +
    "\010\033\132\077\133\124\233\001\002\000\030\003\104" +
    "\004\100\005\073\016\111\074\110\141\103\142\106\143" +
    "\101\144\076\145\074\146\107\001\002\000\010\033\132" +
    "\050\235\077\133\001\002\000\026\003\056\035\067\037" +
    "\054\040\057\046\044\060\064\064\051\113\065\131\046" +
    "\141\052\001\002\000\034\003\uff97\012\uff97\037\uff97\040" +
    "\uff97\046\uff97\052\uff97\053\uff97\060\uff97\064\uff97\113\uff97" +
    "\126\uff97\131\uff97\141\uff97\001\002\000\034\003\uffb3\012" +
    "\uffb3\037\uffb3\040\uffb3\046\uffb3\052\uffb3\053\uffb3\060\uffb3" +
    "\064\uffb3\113\uffb3\126\uffb3\131\uffb3\141\uffb3\001\002\000" +
    "\034\003\uffbb\012\245\037\uffbb\040\uffbb\046\uffbb\052\246" +
    "\053\uffbb\060\uffbb\064\uffbb\113\uffbb\126\uffbb\131\uffbb\141" +
    "\uffbb\001\002\000\026\003\056\037\054\040\057\046\044" +
    "\053\uff91\060\064\064\051\113\065\131\046\141\052\001" +
    "\002\000\034\003\uffb2\012\uffb2\037\uffb2\040\uffb2\046\uffb2" +
    "\052\uffb2\053\uffb2\060\uffb2\064\uffb2\113\uffb2\126\uffb2\131" +
    "\uffb2\141\uffb2\001\002\000\004\053\244\001\002\000\034" +
    "\003\uffb1\012\uffb1\037\uffb1\040\uffb1\046\uffb1\052\uffb1\053" +
    "\uffb1\060\uffb1\064\uffb1\113\uffb1\126\uffb1\131\uffb1\141\uffb1" +
    "\001\002\000\034\003\uffba\012\uffba\037\uffba\040\uffba\046" +
    "\uffba\052\uffba\053\uffba\060\uffba\064\uffba\113\uffba\126\uffba" +
    "\131\uffba\141\uffba\001\002\000\026\003\056\035\256\037" +
    "\054\040\057\046\044\060\064\064\051\113\065\131\046" +
    "\141\052\001\002\000\004\012\uffa8\001\002\000\004\012" +
    "\uffab\001\002\000\004\012\uffaa\001\002\000\004\012\263" +
    "\001\002\000\004\012\uffad\001\002\000\034\003\uffb9\012" +
    "\uffb9\037\uffb9\040\uffb9\046\uffb9\052\uffb9\053\uffb9\060\uffb9" +
    "\064\uffb9\113\uffb9\126\uffb9\131\uffb9\141\uffb9\001\002\000" +
    "\004\012\uffae\001\002\000\026\003\056\037\054\040\057" +
    "\046\044\053\uff91\060\064\064\051\113\065\131\046\141" +
    "\052\001\002\000\034\003\uffaf\012\uffaf\037\uffaf\040\uffaf" +
    "\046\uffaf\052\uffaf\053\uffaf\060\uffaf\064\uffaf\113\uffaf\126" +
    "\uffaf\131\uffaf\141\uffaf\001\002\000\004\012\uffa9\001\002" +
    "\000\004\053\262\001\002\000\004\012\uffac\001\002\000" +
    "\034\003\uffb0\012\uffb0\037\uffb0\040\uffb0\046\uffb0\052\uffb0" +
    "\053\uffb0\060\uffb0\064\uffb0\113\uffb0\126\uffb0\131\uffb0\141" +
    "\uffb0\001\002\000\004\012\265\001\002\000\010\030\uff74" +
    "\061\uff74\105\uff74\001\002\000\030\003\104\004\100\005" +
    "\073\016\111\074\110\141\103\142\106\143\101\144\076" +
    "\145\074\146\107\001\002\000\010\017\270\033\132\077" +
    "\133\001\002\000\004\076\271\001\002\000\030\003\104" +
    "\004\100\005\073\016\111\074\110\141\103\142\106\143" +
    "\101\144\076\145\074\146\107\001\002\000\032\003\104" +
    "\004\100\005\073\016\111\052\310\074\110\141\103\142" +
    "\106\143\101\144\076\145\074\146\107\001\002\000\006" +
    "\013\276\014\275\001\002\000\012\013\uffa3\014\uffa3\033" +
    "\132\077\133\001\002\000\030\003\104\004\100\005\073" +
    "\016\111\074\110\141\103\142\106\143\101\144\076\145" +
    "\074\146\107\001\002\000\026\003\056\035\301\037\054" +
    "\040\057\046\044\060\064\064\051\113\065\131\046\141" +
    "\052\001\002\000\004\012\305\001\002\000\004\012\uffa2" +
    "\001\002\000\026\003\056\037\054\040\057\046\044\053" +
    "\uff91\060\064\064\051\113\065\131\046\141\052\001\002" +
    "\000\004\012\uffa1\001\002\000\004\053\304\001\002\000" +
    "\004\012\uffa0\001\002\000\032\003\uffa5\004\uffa5\005\uffa5" +
    "\016\uffa5\052\uffa5\074\uffa5\141\uffa5\142\uffa5\143\uffa5\144" +
    "\uffa5\145\uffa5\146\uffa5\001\002\000\012\013\uffa4\014\uffa4" +
    "\033\132\077\133\001\002\000\006\013\321\014\275\001" +
    "\002\000\026\003\056\035\312\037\054\040\057\046\044" +
    "\060\064\064\051\113\065\131\046\141\052\001\002\000" +
    "\006\012\320\053\uff9f\001\002\000\026\003\056\037\054" +
    "\040\057\046\044\053\uff91\060\064\064\051\113\065\131" +
    "\046\141\052\001\002\000\004\053\uff9d\001\002\000\004" +
    "\053\315\001\002\000\004\012\316\001\002\000\034\003" +
    "\uffa7\012\uffa7\037\uffa7\040\uffa7\046\uffa7\052\uffa7\053\uffa7" +
    "\060\uffa7\064\uffa7\113\uffa7\126\uffa7\131\uffa7\141\uffa7\001" +
    "\002\000\004\053\uff9c\001\002\000\004\053\uff9e\001\002" +
    "\000\026\003\056\035\301\037\054\040\057\046\044\060" +
    "\064\064\051\113\065\131\046\141\052\001\002\000\004" +
    "\012\323\001\002\000\032\003\uffa6\004\uffa6\005\uffa6\016" +
    "\uffa6\052\uffa6\074\uffa6\141\uffa6\142\uffa6\143\uffa6\144\uffa6" +
    "\145\uffa6\146\uffa6\001\002\000\010\003\331\012\330\053" +
    "\uff8a\001\002\000\026\003\056\037\054\040\057\046\044" +
    "\053\uff86\060\064\064\051\113\065\131\046\141\052\001" +
    "\002\000\004\053\uff8c\001\002\000\004\053\uff87\001\002" +
    "\000\026\003\056\037\054\040\057\046\044\053\uff89\060" +
    "\064\064\051\113\065\131\046\141\052\001\002\000\004" +
    "\053\uff8b\001\002\000\004\053\uff88\001\002\000\030\003" +
    "\104\004\100\005\073\016\111\074\110\141\103\142\106" +
    "\143\101\144\076\145\074\146\107\001\002\000\030\003" +
    "\104\004\100\005\073\016\111\074\110\141\103\142\106" +
    "\143\101\144\076\145\074\146\107\001\002\000\032\003" +
    "\104\004\100\005\073\016\111\017\336\074\110\141\103" +
    "\142\106\143\101\144\076\145\074\146\107\001\002\000" +
    "\034\003\uff81\012\uff81\037\uff81\040\uff81\046\uff81\052\uff81" +
    "\053\uff81\060\uff81\064\uff81\113\uff81\126\uff81\131\uff81\141" +
    "\uff81\001\002\000\006\014\150\017\340\001\002\000\034" +
    "\003\uff82\012\uff82\037\uff82\040\uff82\046\uff82\052\uff82\053" +
    "\uff82\060\uff82\064\uff82\113\uff82\126\uff82\131\uff82\141\uff82" +
    "\001\002\000\040\003\uff83\012\uff83\033\132\037\uff83\040" +
    "\uff83\046\uff83\052\uff83\053\uff83\060\uff83\064\uff83\077\133" +
    "\113\uff83\126\uff83\131\uff83\141\uff83\001\002\000\010\023" +
    "\343\033\132\077\133\001\002\000\004\133\344\001\002" +
    "\000\030\003\104\004\100\005\073\016\111\074\110\141" +
    "\103\142\106\143\101\144\076\145\074\146\107\001\002" +
    "\000\040\003\uff80\012\uff80\033\132\037\uff80\040\uff80\046" +
    "\uff80\052\uff80\053\uff80\060\uff80\064\uff80\077\133\113\uff80" +
    "\126\uff80\131\uff80\141\uff80\001\002\000\030\003\104\004" +
    "\100\005\073\016\111\074\110\141\103\142\106\143\101" +
    "\144\076\145\074\146\107\001\002\000\030\003\351\004" +
    "\100\005\073\016\111\074\110\141\103\142\106\143\101" +
    "\144\076\145\074\146\107\001\002\000\012\003\355\017" +
    "\354\033\132\077\133\001\002\000\020\004\116\005\120" +
    "\006\122\007\121\017\352\136\114\140\117\001\002\000" +
    "\004\122\353\001\002\000\026\003\uffb7\035\uffb7\037\uffb7" +
    "\040\uffb7\046\uffb7\060\uffb7\064\uffb7\113\uffb7\131\uffb7\141" +
    "\uffb7\001\002\000\004\122\357\001\002\000\004\122\356" +
    "\001\002\000\026\003\uffb6\035\uffb6\037\uffb6\040\uffb6\046" +
    "\uffb6\060\uffb6\064\uffb6\113\uffb6\131\uffb6\141\uffb6\001\002" +
    "\000\026\003\uffb8\035\uffb8\037\uffb8\040\uffb8\046\uffb8\060" +
    "\uffb8\064\uffb8\113\uffb8\131\uffb8\141\uffb8\001\002\000\012" +
    "\003\362\017\361\033\132\077\133\001\002\000\004\122" +
    "\364\001\002\000\004\122\363\001\002\000\026\003\uffb4" +
    "\035\uffb4\037\uffb4\040\uffb4\046\uffb4\060\uffb4\064\uffb4\113" +
    "\uffb4\131\uffb4\141\uffb4\001\002\000\026\003\uffb5\035\uffb5" +
    "\037\uffb5\040\uffb5\046\uffb5\060\uffb5\064\uffb5\113\uffb5\131" +
    "\uffb5\141\uffb5\001\002\000\026\003\056\037\054\040\057" +
    "\046\044\053\uff8f\060\064\064\051\113\065\131\046\141" +
    "\052\001\002\000\004\053\uff8d\001\002\000\030\003\371" +
    "\004\100\005\073\016\111\074\110\141\103\142\106\143" +
    "\101\144\076\145\074\146\107\001\002\000\010\017\375" +
    "\033\132\077\133\001\002\000\020\004\116\005\120\006" +
    "\122\007\121\017\372\136\114\140\117\001\002\000\004" +
    "\050\373\001\002\000\026\003\056\035\067\037\054\040" +
    "\057\046\044\060\064\064\051\113\065\131\046\141\052" +
    "\001\002\000\034\003\uff9a\012\uff9a\037\uff9a\040\uff9a\046" +
    "\uff9a\052\uff9a\053\uff9a\060\uff9a\064\uff9a\113\uff9a\126\uff9a" +
    "\131\uff9a\141\uff9a\001\002\000\004\050\376\001\002\000" +
    "\026\003\056\035\067\037\054\040\057\046\044\060\064" +
    "\064\051\113\065\131\046\141\052\001\002\000\034\003" +
    "\uff9b\012\uff9b\037\uff9b\040\uff9b\046\uff9b\052\uff9b\053\uff9b" +
    "\060\uff9b\064\uff9b\113\uff9b\126\uff9b\131\uff9b\141\uff9b\001" +
    "\002\000\006\035\ufff0\141\016\001\002\000\004\141\016" +
    "\001\002\000\010\003\u0108\013\u0109\014\u0107\001\002\000" +
    "\006\003\u0105\012\u0104\001\002\000\006\035\uffed\141\uffed" +
    "\001\002\000\004\141\016\001\002\000\006\035\uffea\141" +
    "\uffea\001\002\000\004\141\u0122\001\002\000\044\003\u0119" +
    "\004\100\005\073\016\111\034\u011a\036\035\042\030\057" +
    "\032\070\033\074\110\117\034\141\u0115\142\106\143\101" +
    "\144\076\145\074\146\107\001\002\000\022\003\031\034" +
    "\u010a\036\035\042\030\057\032\070\033\117\034\141\026" +
    "\001\002\000\004\022\u010d\001\002\000\012\003\uffe9\012" +
    "\uffe9\035\uffe9\141\uffe9\001\002\000\004\076\u0113\001\002" +
    "\000\030\003\104\004\100\005\073\016\111\074\110\141" +
    "\103\142\106\143\101\144\076\145\074\146\107\001\002" +
    "\000\010\015\u010f\033\132\077\133\001\002\000\004\015" +
    "\u0110\001\002\000\030\003\104\004\100\005\073\016\111" +
    "\074\110\141\103\142\106\143\101\144\076\145\074\146" +
    "\107\001\002\000\010\023\u0112\033\132\077\133\001\002" +
    "\000\004\076\ufff3\001\002\000\020\003\031\036\035\042" +
    "\030\057\032\070\033\117\034\141\026\001\002\000\012" +
    "\003\uffe8\012\uffe8\035\uffe8\141\uffe8\001\002\000\054\003" +
    "\ufff8\004\uffc7\005\uffc7\006\uffc7\007\uffc7\011\uffc7\012\ufff8" +
    "\015\uffc7\016\144\022\143\024\uffc7\025\uffc7\026\uffc7\027" +
    "\uffc7\033\uffc7\035\ufff8\054\uffc7\077\uffc7\134\uffc7\136\uffc7" +
    "\141\ufff8\001\002\000\012\003\uffe7\012\uffe7\035\uffe7\141" +
    "\uffe7\001\002\000\012\003\uffe6\012\uffe6\035\uffe6\141\uffe6" +
    "\001\002\000\010\015\u011e\033\132\077\133\001\002\000" +
    "\026\003\ufff7\004\116\005\120\006\122\007\121\012\ufff7" +
    "\035\ufff7\136\114\140\117\141\ufff7\001\002\000\004\022" +
    "\u010d\001\002\000\004\076\u011c\001\002\000\020\003\031" +
    "\036\035\042\030\057\032\070\033\117\034\141\026\001" +
    "\002\000\012\003\uffe5\012\uffe5\035\uffe5\141\uffe5\001\002" +
    "\000\004\015\u011f\001\002\000\004\015\u0120\001\002\000" +
    "\030\003\104\004\100\005\073\016\111\074\110\141\103" +
    "\142\106\143\101\144\076\145\074\146\107\001\002\000" +
    "\016\003\ufff4\012\ufff4\033\132\035\ufff4\077\133\141\ufff4" +
    "\001\002\000\010\003\ufff6\013\ufff6\014\ufff6\001\002\000" +
    "\006\035\uffeb\141\uffeb\001\002\000\006\003\u0126\012\u0125" +
    "\001\002\000\006\035\uffee\141\uffee\001\002\000\004\141" +
    "\016\001\002\000\006\035\uffec\141\uffec\001\002\000\006" +
    "\014\uff6e\017\uff6e\001\002\000\020\003\031\036\035\042" +
    "\030\057\032\070\033\117\034\141\026\001\002\000\006" +
    "\014\uff6a\017\uff6a\001\002\000\006\013\u012c\014\u0107\001" +
    "\002\000\020\003\031\036\035\042\030\057\032\070\033" +
    "\117\034\141\026\001\002\000\006\014\uff6b\017\uff6b\001" +
    "\002\000\004\141\u0133\001\002\000\004\030\ufffe\001\002" +
    "\000\006\030\uff70\105\uff70\001\002\000\006\030\uff73\105" +
    "\u012e\001\002\000\006\030\uff71\105\uff71\001\002\000\004" +
    "\016\u0134\001\002\000\012\014\uff6c\017\uff6c\127\017\141" +
    "\016\001\002\000\006\014\023\017\u0136\001\002\000\004" +
    "\012\u0137\001\002\000\006\035\uffef\127\037\001\002\000" +
    "\004\035\u0139\001\002\000\026\003\056\037\054\040\057" +
    "\046\044\053\uff91\060\064\064\051\113\065\131\046\141" +
    "\052\001\002\000\004\053\u013b\001\002\000\004\012\u013c" +
    "\001\002\000\006\030\uff6f\105\uff6f\001\002\000\010\030" +
    "\uff76\061\uff76\105\uff76\001\002\000\004\032\u0274\001\002" +
    "\000\006\032\uff4c\110\uff4c\001\002\000\006\032\uff69\110" +
    "\u0142\001\002\000\006\032\uff4d\110\uff4d\001\002\000\004" +
    "\043\u0143\001\002\000\004\141\u0144\001\002\000\006\020" +
    "\uff49\055\u0145\001\002\000\004\141\u0272\001\002\000\004" +
    "\020\u0147\001\002\000\012\021\uff47\104\uff47\107\uff47\110" +
    "\uff47\001\002\000\012\021\u014c\104\u014e\107\u014a\110\u014d" +
    "\001\002\000\020\036\u0155\042\u0150\057\u0152\070\u0153\117" +
    "\u0154\130\u0156\141\u014f\001\002\000\020\036\uff66\042\uff66" +
    "\057\uff66\070\uff66\117\uff66\130\uff66\141\uff66\001\002\000" +
    "\012\021\uff48\104\uff48\107\uff48\110\uff48\001\002\000\006" +
    "\032\uff4b\110\uff4b\001\002\000\020\036\uff68\042\uff68\057" +
    "\uff68\070\uff68\117\uff68\130\uff68\141\uff68\001\002\000\020" +
    "\036\uff67\042\uff67\057\uff67\070\uff67\117\uff67\130\uff67\141" +
    "\uff67\001\002\000\010\016\u026c\022\u0162\141\uff5a\001\002" +
    "\000\006\022\u0162\141\uff5b\001\002\000\004\141\u0264\001" +
    "\002\000\006\022\u0162\141\uff5d\001\002\000\006\022\u0162" +
    "\141\uff5f\001\002\000\006\022\u0162\141\uff5e\001\002\000" +
    "\006\022\u0162\141\uff5c\001\002\000\004\141\u0157\001\002" +
    "\000\004\016\u0159\001\002\000\012\021\uff45\104\uff45\107" +
    "\uff45\110\uff45\001\002\000\020\017\uff3e\036\u0155\042\u0150" +
    "\057\u0152\070\u0153\117\u0154\141\u015d\001\002\000\006\014" +
    "\uff3c\017\uff3c\001\002\000\004\017\u0167\001\002\000\004" +
    "\141\u0166\001\002\000\006\022\u0162\141\uff5a\001\002\000" +
    "\006\014\u015f\017\uff3f\001\002\000\016\036\u0155\042\u0150" +
    "\057\u0152\070\u0153\117\u0154\141\u015d\001\002\000\006\014" +
    "\uff3d\017\uff3d\001\002\000\006\022\u0162\141\uff60\001\002" +
    "\000\004\023\u0164\001\002\000\006\022\uff58\141\uff58\001" +
    "\002\000\006\022\uff57\141\uff57\001\002\000\006\022\uff59" +
    "\141\uff59\001\002\000\006\014\uff3b\017\uff3b\001\002\000" +
    "\004\020\u0168\001\002\000\046\036\u0155\037\u0176\042\u0150" +
    "\046\u0169\050\u0172\057\u0152\060\u0180\064\u016e\070\u0153\102" +
    "\u017a\103\u0173\114\u016b\117\u0154\120\u0181\121\u016c\123\u0171" +
    "\131\u016a\141\u016f\001\002\000\004\012\uff2b\001\002\000" +
    "\004\016\u025a\001\002\000\042\004\u0193\005\u019f\016\u0198" +
    "\041\u0197\056\u0192\067\u01a2\073\u01a1\074\u0196\120\u01a3\123" +
    "\u019b\141\u0199\142\u0191\143\u01a5\144\u019d\145\u0190\146\u01a4" +
    "\001\002\000\004\016\u024a\001\002\000\054\021\uff39\036" +
    "\uff39\037\uff39\040\uff39\042\uff39\046\uff39\047\uff39\050\uff39" +
    "\057\uff39\060\uff39\064\uff39\070\uff39\102\uff39\103\uff39\114" +
    "\uff39\117\uff39\120\uff39\121\uff39\123\uff39\131\uff39\141\uff39" +
    "\001\002\000\004\016\u023e\001\002\000\014\015\u0189\016" +
    "\u021e\022\u021d\133\u021c\141\uff5a\001\002\000\054\021\uff30" +
    "\036\uff30\037\uff30\040\uff30\042\uff30\046\uff30\047\uff30\050" +
    "\uff30\057\uff30\060\uff30\064\uff30\070\uff30\102\uff30\103\uff30" +
    "\114\uff30\117\uff30\120\uff30\121\uff30\123\uff30\131\uff30\141" +
    "\uff30\001\002\000\006\015\u0189\016\u0216\001\002\000\004" +
    "\020\u020e\001\002\000\004\016\u020b\001\002\000\050\021" +
    "\u020a\036\u0155\037\u0176\042\u0150\046\u0169\050\u0172\057\u0152" +
    "\060\u0180\064\u016e\070\u0153\102\u017a\103\u0173\114\u016b\117" +
    "\u0154\120\u0181\121\u016c\123\u0171\131\u016a\141\u016f\001\002" +
    "\000\004\141\u0207\001\002\000\004\012\uff2c\001\002\000" +
    "\004\012\u0206\001\002\000\054\021\uff31\036\uff31\037\uff31" +
    "\040\uff31\042\uff31\046\uff31\047\uff31\050\uff31\057\uff31\060" +
    "\uff31\064\uff31\070\uff31\102\uff31\103\uff31\114\uff31\117\uff31" +
    "\120\uff31\121\uff31\123\uff31\131\uff31\141\uff31\001\002\000" +
    "\054\021\uff2d\036\uff2d\037\uff2d\040\uff2d\042\uff2d\046\uff2d" +
    "\047\uff2d\050\uff2d\057\uff2d\060\uff2d\064\uff2d\070\uff2d\102" +
    "\uff2d\103\uff2d\114\uff2d\117\uff2d\120\uff2d\121\uff2d\123\uff2d" +
    "\131\uff2d\141\uff2d\001\002\000\004\016\u0203\001\002\000" +
    "\004\012\u0202\001\002\000\004\012\u0201\001\002\000\054" +
    "\021\uff2e\036\uff2e\037\uff2e\040\uff2e\042\uff2e\046\uff2e\047" +
    "\uff2e\050\uff2e\057\uff2e\060\uff2e\064\uff2e\070\uff2e\102\uff2e" +
    "\103\uff2e\114\uff2e\117\uff2e\120\uff2e\121\uff2e\123\uff2e\131" +
    "\uff2e\141\uff2e\001\002\000\054\021\uff38\036\uff38\037\uff38" +
    "\040\uff38\042\uff38\046\uff38\047\uff38\050\uff38\057\uff38\060" +
    "\uff38\064\uff38\070\uff38\102\uff38\103\uff38\114\uff38\117\uff38" +
    "\120\uff38\121\uff38\123\uff38\131\uff38\141\uff38\001\002\000" +
    "\004\012\u0200\001\002\000\004\017\u01ed\001\002\000\006" +
    "\015\u0189\016\u0188\001\002\000\054\021\uff2f\036\uff2f\037" +
    "\uff2f\040\uff2f\042\uff2f\046\uff2f\047\uff2f\050\uff2f\057\uff2f" +
    "\060\uff2f\064\uff2f\070\uff2f\102\uff2f\103\uff2f\114\uff2f\117" +
    "\uff2f\120\uff2f\121\uff2f\123\uff2f\131\uff2f\141\uff2f\001\002" +
    "\000\004\012\u0186\001\002\000\004\012\u0185\001\002\000" +
    "\054\021\uff35\036\uff35\037\uff35\040\uff35\042\uff35\046\uff35" +
    "\047\uff35\050\uff35\057\uff35\060\uff35\064\uff35\070\uff35\102" +
    "\uff35\103\uff35\114\uff35\117\uff35\120\uff35\121\uff35\123\uff35" +
    "\131\uff35\141\uff35\001\002\000\054\021\uff32\036\uff32\037" +
    "\uff32\040\uff32\042\uff32\046\uff32\047\uff32\050\uff32\057\uff32" +
    "\060\uff32\064\uff32\070\uff32\102\uff32\103\uff32\114\uff32\117" +
    "\uff32\120\uff32\121\uff32\123\uff32\131\uff32\141\uff32\001\002" +
    "\000\010\012\uff08\017\uff08\133\u01eb\001\002\000\044\004" +
    "\u0193\005\u019f\016\u0198\017\u01e8\041\u0197\056\u0192\067\u01a2" +
    "\073\u01a1\074\u0196\120\u01a3\123\u019b\141\u0199\142\u0191\143" +
    "\u01a5\144\u019d\145\u0190\146\u01a4\001\002\000\004\141\u018a" +
    "\001\002\000\060\004\ufef9\005\ufef9\006\ufef9\007\ufef9\011" +
    "\ufef9\012\ufef9\013\ufef9\014\ufef9\015\ufef9\016\u018f\017\ufef9" +
    "\022\u018e\023\ufef9\024\ufef9\025\ufef9\026\ufef9\027\ufef9\033" +
    "\ufef9\054\ufef9\077\ufef9\133\ufef9\134\ufef9\136\ufef9\001\002" +
    "\000\054\004\ufefa\005\ufefa\006\ufefa\007\ufefa\011\ufefa\012" +
    "\ufefa\013\ufefa\014\ufefa\015\u0189\017\ufefa\023\ufefa\024\ufefa" +
    "\025\ufefa\026\ufefa\027\ufefa\033\ufefa\054\ufefa\077\ufefa\133" +
    "\ufefa\134\ufefa\136\ufefa\001\002\000\052\004\ufefb\005\ufefb" +
    "\006\ufefb\007\ufefb\011\ufefb\012\ufefb\013\ufefb\014\ufefb\017" +
    "\ufefb\023\ufefb\024\ufefb\025\ufefb\026\ufefb\027\ufefb\033\ufefb" +
    "\054\ufefb\077\ufefb\133\ufefb\134\ufefb\136\ufefb\001\002\000" +
    "\056\004\ufef4\005\ufef4\006\ufef4\007\ufef4\011\ufef4\012\ufef4" +
    "\013\ufef4\014\ufef4\015\ufef4\017\ufef4\022\u01d1\023\ufef4\024" +
    "\ufef4\025\ufef4\026\ufef4\027\ufef4\033\ufef4\054\ufef4\077\ufef4" +
    "\133\ufef4\134\ufef4\136\ufef4\001\002\000\042\004\u0193\005" +
    "\u019f\016\u0198\041\u0197\056\u0192\067\u01a2\073\u01a1\074\u0196" +
    "\120\u01a3\123\u019b\141\u0199\142\u0191\143\u01a5\144\u019d\145" +
    "\u0190\146\u01a4\001\002\000\044\004\u0193\005\u019f\016\u0198" +
    "\017\u0195\041\u0197\056\u0192\067\u01a2\073\u01a1\074\u0196\120" +
    "\u01a3\123\u019b\141\u0199\142\u0191\143\u01a5\144\u019d\145\u0190" +
    "\146\u01a4\001\002\000\050\004\uff50\005\uff50\006\uff50\007" +
    "\uff50\011\uff50\012\uff50\013\uff50\014\uff50\017\uff50\023\uff50" +
    "\024\uff50\025\uff50\026\uff50\027\uff50\033\uff50\054\uff50\077" +
    "\uff50\134\uff50\136\uff50\001\002\000\050\004\uff51\005\uff51" +
    "\006\uff51\007\uff51\011\uff51\012\uff51\013\uff51\014\uff51\017" +
    "\uff51\023\uff51\024\uff51\025\uff51\026\uff51\027\uff51\033\uff51" +
    "\054\uff51\077\uff51\134\uff51\136\uff51\001\002\000\004\016" +
    "\u01e4\001\002\000\040\004\u0193\005\u019f\016\u0198\041\u0197" +
    "\056\u0192\067\u01a2\073\u01a1\120\u01a3\123\u019b\141\u0199\142" +
    "\u0191\143\u01a5\144\u019d\145\u0190\146\u01a4\001\002\000\012" +
    "\014\uff53\017\uff53\033\u01c9\077\u01ca\001\002\000\056\004" +
    "\ufef8\005\ufef8\006\ufef8\007\ufef8\011\ufef8\012\ufef8\013\ufef8" +
    "\014\ufef8\015\ufef8\017\ufef8\022\u018e\023\ufef8\024\ufef8\025" +
    "\ufef8\026\ufef8\027\ufef8\033\ufef8\054\ufef8\077\ufef8\133\ufef8" +
    "\134\ufef8\136\ufef8\001\002\000\042\004\u0193\005\u019f\016" +
    "\u0198\041\u0197\056\u0192\067\u01a2\073\u01a1\074\u0196\120\u01a3" +
    "\123\u019b\141\u0199\142\u0191\143\u01a5\144\u019d\145\u0190\146" +
    "\u01a4\001\002\000\004\016\u01df\001\002\000\042\004\u0193" +
    "\005\u019f\016\u0198\041\u0197\056\u0192\067\u01a2\073\u01a1\074" +
    "\u0196\120\u01a3\123\u019b\141\u0199\142\u0191\143\u01a5\144\u019d" +
    "\145\u0190\146\u01a4\001\002\000\056\004\ufeda\005\ufeda\006" +
    "\ufeda\007\ufeda\011\ufeda\012\ufeda\013\ufeda\014\ufeda\015\u0189" +
    "\016\u01d6\017\ufeda\022\u018e\023\ufeda\024\ufeda\025\ufeda\026" +
    "\ufeda\027\ufeda\033\ufeda\054\ufeda\077\ufeda\134\ufeda\136\ufeda" +
    "\001\002\000\006\014\u01c6\017\u01cf\001\002\000\004\015" +
    "\u0189\001\002\000\020\012\ufef0\013\ufef0\014\ufef0\017\ufef0" +
    "\023\ufef0\033\ufef0\077\ufef0\001\002\000\050\004\uff52\005" +
    "\uff52\006\uff52\007\uff52\011\uff52\012\uff52\013\uff52\014\uff52" +
    "\017\uff52\023\uff52\024\uff52\025\uff52\026\uff52\027\uff52\033" +
    "\uff52\054\uff52\077\uff52\134\uff52\136\uff52\001\002\000\050" +
    "\004\ufee2\005\ufee2\006\ufee2\007\ufee2\011\ufee2\012\ufee2\013" +
    "\ufee2\014\ufee2\017\ufee2\023\ufee2\024\ufee2\025\ufee2\026\ufee2" +
    "\027\ufee2\033\ufee2\054\ufee2\077\ufee2\134\ufee2\136\ufee2\001" +
    "\002\000\040\004\u0193\005\u019f\016\u0198\041\u0197\056\u0192" +
    "\067\u01a2\073\u01a1\120\u01a3\123\u019b\141\u0199\142\u0191\143" +
    "\u01a5\144\u019d\145\u0190\146\u01a4\001\002\000\050\004\ufed5" +
    "\005\ufed5\006\ufed5\007\ufed5\011\ufed5\012\ufed5\013\ufed5\014" +
    "\ufed5\017\ufed5\023\ufed5\024\ufed5\025\ufed5\026\ufed5\027\ufed5" +
    "\033\ufed5\054\ufed5\077\ufed5\134\ufed5\136\ufed5\001\002\000" +
    "\004\141\u01c2\001\002\000\004\016\u01c0\001\002\000\004" +
    "\015\u0189\001\002\000\050\004\uff4e\005\uff4e\006\uff4e\007" +
    "\uff4e\011\uff4e\012\uff4e\013\uff4e\014\uff4e\017\uff4e\023\uff4e" +
    "\024\uff4e\025\uff4e\026\uff4e\027\uff4e\033\uff4e\054\uff4e\077" +
    "\uff4e\134\uff4e\136\uff4e\001\002\000\050\004\uff4f\005\uff4f" +
    "\006\uff4f\007\uff4f\011\uff4f\012\uff4f\013\uff4f\014\uff4f\017" +
    "\uff4f\023\uff4f\024\uff4f\025\uff4f\026\uff4f\027\uff4f\033\uff4f" +
    "\054\uff4f\077\uff4f\134\uff4f\136\uff4f\001\002\000\050\004" +
    "\u01ac\005\u01a7\006\u01af\007\u01ad\011\u01b0\012\ufee9\013\ufee9" +
    "\014\ufee9\017\ufee9\023\ufee9\024\u01a9\025\u01ae\026\u01a8\027" +
    "\u01b2\033\ufee9\054\u01b1\077\ufee9\134\u01ab\136\u01aa\001\002" +
    "\000\040\004\u0193\005\u019f\016\u0198\041\u0197\056\u0192\067" +
    "\u01a2\073\u01a1\120\u01a3\123\u019b\141\u0199\142\u0191\143\u01a5" +
    "\144\u019d\145\u0190\146\u01a4\001\002\000\040\004\u0193\005" +
    "\u019f\016\u0198\041\u0197\056\u0192\067\u01a2\073\u01a1\120\u01a3" +
    "\123\u019b\141\u0199\142\u0191\143\u01a5\144\u019d\145\u0190\146" +
    "\u01a4\001\002\000\040\004\u0193\005\u019f\016\u0198\041\u0197" +
    "\056\u0192\067\u01a2\073\u01a1\120\u01a3\123\u019b\141\u0199\142" +
    "\u0191\143\u01a5\144\u019d\145\u0190\146\u01a4\001\002\000\040" +
    "\004\u0193\005\u019f\016\u0198\041\u0197\056\u0192\067\u01a2\073" +
    "\u01a1\120\u01a3\123\u019b\141\u0199\142\u0191\143\u01a5\144\u019d" +
    "\145\u0190\146\u01a4\001\002\000\040\004\u0193\005\u019f\016" +
    "\u0198\041\u0197\056\u0192\067\u01a2\073\u01a1\120\u01a3\123\u019b" +
    "\141\u0199\142\u0191\143\u01a5\144\u019d\145\u0190\146\u01a4\001" +
    "\002\000\040\004\u0193\005\u019f\016\u0198\041\u0197\056\u0192" +
    "\067\u01a2\073\u01a1\120\u01a3\123\u019b\141\u0199\142\u0191\143" +
    "\u01a5\144\u019d\145\u0190\146\u01a4\001\002\000\040\004\u0193" +
    "\005\u019f\016\u0198\041\u0197\056\u0192\067\u01a2\073\u01a1\120" +
    "\u01a3\123\u019b\141\u0199\142\u0191\143\u01a5\144\u019d\145\u0190" +
    "\146\u01a4\001\002\000\040\004\u0193\005\u019f\016\u0198\041" +
    "\u0197\056\u0192\067\u01a2\073\u01a1\120\u01a3\123\u019b\141\u0199" +
    "\142\u0191\143\u01a5\144\u019d\145\u0190\146\u01a4\001\002\000" +
    "\040\004\u0193\005\u019f\016\u0198\041\u0197\056\u0192\067\u01a2" +
    "\073\u01a1\120\u01a3\123\u019b\141\u0199\142\u0191\143\u01a5\144" +
    "\u019d\145\u0190\146\u01a4\001\002\000\040\004\u0193\005\u019f" +
    "\016\u0198\041\u0197\056\u0192\067\u01a2\073\u01a1\120\u01a3\123" +
    "\u019b\141\u0199\142\u0191\143\u01a5\144\u019d\145\u0190\146\u01a4" +
    "\001\002\000\040\004\u0193\005\u019f\016\u0198\041\u0197\056" +
    "\u0192\067\u01a2\073\u01a1\120\u01a3\123\u019b\141\u0199\142\u0191" +
    "\143\u01a5\144\u019d\145\u0190\146\u01a4\001\002\000\040\004" +
    "\u0193\005\u019f\016\u0198\041\u0197\056\u0192\067\u01a2\073\u01a1" +
    "\120\u01a3\123\u019b\141\u0199\142\u0191\143\u01a5\144\u019d\145" +
    "\u0190\146\u01a4\001\002\000\034\004\u01ac\005\u01a7\006\u01af" +
    "\007\u01ad\011\u01b0\012\ufeea\013\ufeea\014\ufeea\017\ufeea\023" +
    "\ufeea\033\ufeea\077\ufeea\136\u01aa\001\002\000\034\004\u01ac" +
    "\005\u01a7\006\u01af\007\u01ad\011\u01b0\012\ufeef\013\ufeef\014" +
    "\ufeef\017\ufeef\023\ufeef\033\ufeef\077\ufeef\136\u01aa\001\002" +
    "\000\050\004\ufee3\005\ufee3\006\ufee3\007\ufee3\011\ufee3\012" +
    "\ufee3\013\ufee3\014\ufee3\017\ufee3\023\ufee3\024\ufee3\025\ufee3" +
    "\026\ufee3\027\ufee3\033\ufee3\054\ufee3\077\ufee3\134\ufee3\136" +
    "\ufee3\001\002\000\050\004\ufee6\005\ufee6\006\ufee6\007\ufee6" +
    "\011\u01b0\012\ufee6\013\ufee6\014\ufee6\017\ufee6\023\ufee6\024" +
    "\ufee6\025\ufee6\026\ufee6\027\ufee6\033\ufee6\054\ufee6\077\ufee6" +
    "\134\ufee6\136\ufee6\001\002\000\034\004\u01ac\005\u01a7\006" +
    "\u01af\007\u01ad\011\u01b0\012\ufeec\013\ufeec\014\ufeec\017\ufeec" +
    "\023\ufeec\033\ufeec\077\ufeec\136\u01aa\001\002\000\050\004" +
    "\ufee5\005\ufee5\006\ufee5\007\ufee5\011\u01b0\012\ufee5\013\ufee5" +
    "\014\ufee5\017\ufee5\023\ufee5\024\ufee5\025\ufee5\026\ufee5\027" +
    "\ufee5\033\ufee5\054\ufee5\077\ufee5\134\ufee5\136\ufee5\001\002" +
    "\000\050\004\ufee8\005\ufee8\006\u01af\007\u01ad\011\u01b0\012" +
    "\ufee8\013\ufee8\014\ufee8\017\ufee8\023\ufee8\024\ufee8\025\ufee8" +
    "\026\ufee8\027\ufee8\033\ufee8\054\ufee8\077\ufee8\134\ufee8\136" +
    "\u01aa\001\002\000\034\004\u01ac\005\u01a7\006\u01af\007\u01ad" +
    "\011\u01b0\012\ufeee\013\ufeee\014\ufeee\017\ufeee\023\ufeee\033" +
    "\ufeee\077\ufeee\136\u01aa\001\002\000\050\004\ufee4\005\ufee4" +
    "\006\ufee4\007\ufee4\011\u01b0\012\ufee4\013\ufee4\014\ufee4\017" +
    "\ufee4\023\ufee4\024\ufee4\025\ufee4\026\ufee4\027\ufee4\033\ufee4" +
    "\054\ufee4\077\ufee4\134\ufee4\136\ufee4\001\002\000\034\004" +
    "\u01ac\005\u01a7\006\u01af\007\u01ad\011\u01b0\012\ufeed\013\ufeed" +
    "\014\ufeed\017\ufeed\023\ufeed\033\ufeed\077\ufeed\136\u01aa\001" +
    "\002\000\034\004\u01ac\005\u01a7\006\u01af\007\u01ad\011\u01b0" +
    "\012\ufeeb\013\ufeeb\014\ufeeb\017\ufeeb\023\ufeeb\033\ufeeb\077" +
    "\ufeeb\136\u01aa\001\002\000\050\004\ufee7\005\ufee7\006\u01af" +
    "\007\u01ad\011\u01b0\012\ufee7\013\ufee7\014\ufee7\017\ufee7\023" +
    "\ufee7\024\ufee7\025\ufee7\026\ufee7\027\ufee7\033\ufee7\054\ufee7" +
    "\077\ufee7\134\ufee7\136\u01aa\001\002\000\050\004\ufed8\005" +
    "\ufed8\006\ufed8\007\ufed8\011\ufed8\012\ufed8\013\ufed8\014\ufed8" +
    "\017\ufed8\023\ufed8\024\ufed8\025\ufed8\026\ufed8\027\ufed8\033" +
    "\ufed8\054\ufed8\077\ufed8\134\ufed8\136\ufed8\001\002\000\004" +
    "\017\u01c1\001\002\000\050\004\ufed0\005\ufed0\006\ufed0\007" +
    "\ufed0\011\ufed0\012\ufed0\013\ufed0\014\ufed0\017\ufed0\023\ufed0" +
    "\024\ufed0\025\ufed0\026\ufed0\027\ufed0\033\ufed0\054\ufed0\077" +
    "\ufed0\134\ufed0\136\ufed0\001\002\000\004\016\u01c3\001\002" +
    "\000\044\004\u0193\005\u019f\016\u0198\017\u01c4\041\u0197\056" +
    "\u0192\067\u01a2\073\u01a1\074\u0196\120\u01a3\123\u019b\141\u0199" +
    "\142\u0191\143\u01a5\144\u019d\145\u0190\146\u01a4\001\002\000" +
    "\050\004\ufed7\005\ufed7\006\ufed7\007\ufed7\011\ufed7\012\ufed7" +
    "\013\ufed7\014\ufed7\017\ufed7\023\ufed7\024\ufed7\025\ufed7\026" +
    "\ufed7\027\ufed7\033\ufed7\054\ufed7\077\ufed7\134\ufed7\136\ufed7" +
    "\001\002\000\006\014\u01c6\017\u01c7\001\002\000\042\004" +
    "\u0193\005\u019f\016\u0198\041\u0197\056\u0192\067\u01a2\073\u01a1" +
    "\074\u0196\120\u01a3\123\u019b\141\u0199\142\u0191\143\u01a5\144" +
    "\u019d\145\u0190\146\u01a4\001\002\000\050\004\ufed6\005\ufed6" +
    "\006\ufed6\007\ufed6\011\ufed6\012\ufed6\013\ufed6\014\ufed6\017" +
    "\ufed6\023\ufed6\024\ufed6\025\ufed6\026\ufed6\027\ufed6\033\ufed6" +
    "\054\ufed6\077\ufed6\134\ufed6\136\ufed6\001\002\000\012\014" +
    "\uff54\017\uff54\033\u01c9\077\u01ca\001\002\000\042\004\u0193" +
    "\005\u019f\016\u0198\041\u0197\056\u0192\067\u01a2\073\u01a1\074" +
    "\u0196\120\u01a3\123\u019b\141\u0199\142\u0191\143\u01a5\144\u019d" +
    "\145\u0190\146\u01a4\001\002\000\042\004\u0193\005\u019f\016" +
    "\u0198\041\u0197\056\u0192\067\u01a2\073\u01a1\074\u0196\120\u01a3" +
    "\123\u019b\141\u0199\142\u0191\143\u01a5\144\u019d\145\u0190\146" +
    "\u01a4\001\002\000\020\012\ufef2\013\ufef2\014\ufef2\017\ufef2" +
    "\023\ufef2\033\u01c9\077\ufef2\001\002\000\020\012\ufef3\013" +
    "\ufef3\014\ufef3\017\ufef3\023\ufef3\033\ufef3\077\ufef3\001\002" +
    "\000\050\004\ufed2\005\ufed2\006\u01af\007\u01ad\011\u01b0\012" +
    "\ufed2\013\ufed2\014\ufed2\017\ufed2\023\ufed2\024\ufed2\025\ufed2" +
    "\026\ufed2\027\ufed2\033\ufed2\054\ufed2\077\ufed2\134\ufed2\136" +
    "\u01aa\001\002\000\050\004\ufed9\005\ufed9\006\ufed9\007\ufed9" +
    "\011\ufed9\012\ufed9\013\ufed9\014\ufed9\017\ufed9\023\ufed9\024" +
    "\ufed9\025\ufed9\026\ufed9\027\ufed9\033\ufed9\054\ufed9\077\ufed9" +
    "\134\ufed9\136\ufed9\001\002\000\056\004\ufef6\005\ufef6\006" +
    "\ufef6\007\ufef6\011\ufef6\012\ufef6\013\ufef6\014\ufef6\015\ufef6" +
    "\017\ufef6\022\u018e\023\ufef6\024\ufef6\025\ufef6\026\ufef6\027" +
    "\ufef6\033\ufef6\054\ufef6\077\ufef6\133\ufef6\134\ufef6\136\ufef6" +
    "\001\002\000\056\004\ufef5\005\ufef5\006\ufef5\007\ufef5\011" +
    "\ufef5\012\ufef5\013\ufef5\014\ufef5\015\ufef5\017\ufef5\022\u01d1" +
    "\023\ufef5\024\ufef5\025\ufef5\026\ufef5\027\ufef5\033\ufef5\054" +
    "\ufef5\077\ufef5\133\ufef5\134\ufef5\136\ufef5\001\002\000\042" +
    "\004\u0193\005\u019f\016\u0198\041\u0197\056\u0192\067\u01a2\073" +
    "\u01a1\074\u0196\120\u01a3\123\u019b\141\u0199\142\u0191\143\u01a5" +
    "\144\u019d\145\u0190\146\u01a4\001\002\000\010\023\u01d3\033" +
    "\u01c9\077\u01ca\001\002\000\056\004\uff55\005\uff55\006\uff55" +
    "\007\uff55\011\uff55\012\uff55\013\uff55\014\uff55\015\uff55\017" +
    "\uff55\022\uff55\023\uff55\024\uff55\025\uff55\026\uff55\027\uff55" +
    "\033\uff55\054\uff55\077\uff55\133\uff55\134\uff55\136\uff55\001" +
    "\002\000\050\004\ufedb\005\ufedb\006\ufedb\007\ufedb\011\ufedb" +
    "\012\ufedb\013\ufedb\014\ufedb\017\ufedb\023\ufedb\024\ufedb\025" +
    "\ufedb\026\ufedb\027\ufedb\033\ufedb\054\ufedb\077\ufedb\134\ufedb" +
    "\136\ufedb\001\002\000\054\004\ufee1\005\ufee1\006\ufee1\007" +
    "\ufee1\011\ufee1\012\ufee1\013\ufee1\014\ufee1\015\u0189\017\ufee1" +
    "\022\u01d1\023\ufee1\024\ufee1\025\ufee1\026\ufee1\027\ufee1\033" +
    "\ufee1\054\ufee1\077\ufee1\134\ufee1\136\ufee1\001\002\000\044" +
    "\004\u0193\005\u019f\016\u0198\017\u01d7\041\u0197\056\u0192\067" +
    "\u01a2\073\u01a1\074\u0196\120\u01a3\123\u019b\141\u0199\142\u0191" +
    "\143\u01a5\144\u019d\145\u0190\146\u01a4\001\002\000\052\004" +
    "\ufede\005\ufede\006\ufede\007\ufede\011\ufede\012\ufede\013\ufede" +
    "\014\ufede\015\u0189\017\ufede\023\ufede\024\ufede\025\ufede\026" +
    "\ufede\027\ufede\033\ufede\054\ufede\077\ufede\134\ufede\136\ufede" +
    "\001\002\000\006\014\u01c6\017\u01d9\001\002\000\052\004" +
    "\ufedf\005\ufedf\006\ufedf\007\ufedf\011\ufedf\012\ufedf\013\ufedf" +
    "\014\ufedf\015\u0189\017\ufedf\023\ufedf\024\ufedf\025\ufedf\026" +
    "\ufedf\027\ufedf\033\ufedf\054\ufedf\077\ufedf\134\ufedf\136\ufedf" +
    "\001\002\000\050\004\ufedd\005\ufedd\006\ufedd\007\ufedd\011" +
    "\ufedd\012\ufedd\013\ufedd\014\ufedd\017\ufedd\023\ufedd\024\ufedd" +
    "\025\ufedd\026\ufedd\027\ufedd\033\ufedd\054\ufedd\077\ufedd\134" +
    "\ufedd\136\ufedd\001\002\000\050\004\ufedc\005\ufedc\006\ufedc" +
    "\007\ufedc\011\ufedc\012\ufedc\013\ufedc\014\ufedc\017\ufedc\023" +
    "\ufedc\024\ufedc\025\ufedc\026\ufedc\027\ufedc\033\ufedc\054\ufedc" +
    "\077\ufedc\134\ufedc\136\ufedc\001\002\000\050\004\ufee0\005" +
    "\ufee0\006\ufee0\007\ufee0\011\ufee0\012\ufee0\013\ufee0\014\ufee0" +
    "\017\ufee0\023\ufee0\024\ufee0\025\ufee0\026\ufee0\027\ufee0\033" +
    "\ufee0\054\ufee0\077\ufee0\134\ufee0\136\ufee0\001\002\000\010" +
    "\017\u01de\033\u01c9\077\u01ca\001\002\000\050\004\ufed4\005" +
    "\ufed4\006\ufed4\007\ufed4\011\ufed4\012\ufed4\013\ufed4\014\ufed4" +
    "\017\ufed4\023\ufed4\024\ufed4\025\ufed4\026\ufed4\027\ufed4\033" +
    "\ufed4\054\ufed4\077\ufed4\134\ufed4\136\ufed4\001\002\000\004" +
    "\017\u01e0\001\002\000\050\004\ufed1\005\ufed1\006\ufed1\007" +
    "\ufed1\011\ufed1\012\ufed1\013\ufed1\014\ufed1\017\ufed1\023\ufed1" +
    "\024\ufed1\025\ufed1\026\ufed1\027\ufed1\033\ufed1\054\ufed1\077" +
    "\ufed1\134\ufed1\136\ufed1\001\002\000\020\012\ufef1\013\ufef1" +
    "\014\ufef1\017\ufef1\023\ufef1\033\ufef1\077\ufef1\001\002\000" +
    "\056\004\ufef7\005\ufef7\006\ufef7\007\ufef7\011\ufef7\012\ufef7" +
    "\013\ufef7\014\ufef7\015\ufef7\017\ufef7\022\u01d1\023\ufef7\024" +
    "\ufef7\025\ufef7\026\ufef7\027\ufef7\033\ufef7\054\ufef7\077\ufef7" +
    "\133\ufef7\134\ufef7\136\ufef7\001\002\000\050\004\ufed3\005" +
    "\ufed3\006\ufed3\007\ufed3\011\ufed3\012\ufed3\013\ufed3\014\ufed3" +
    "\017\ufed3\023\ufed3\024\ufed3\025\ufed3\026\ufed3\027\ufed3\033" +
    "\ufed3\054\ufed3\077\ufed3\134\ufed3\136\ufed3\001\002\000\004" +
    "\017\u01e5\001\002\000\050\004\ufecf\005\ufecf\006\ufecf\007" +
    "\ufecf\011\ufecf\012\ufecf\013\ufecf\014\ufecf\017\ufecf\023\ufecf" +
    "\024\ufecf\025\ufecf\026\ufecf\027\ufecf\033\ufecf\054\ufecf\077" +
    "\ufecf\134\ufecf\136\ufecf\001\002\000\010\023\u01e7\033\u01c9" +
    "\077\u01ca\001\002\000\056\004\uff56\005\uff56\006\uff56\007" +
    "\uff56\011\uff56\012\uff56\013\uff56\014\uff56\015\uff56\017\uff56" +
    "\022\uff56\023\uff56\024\uff56\025\uff56\026\uff56\027\uff56\033" +
    "\uff56\054\uff56\077\uff56\133\uff56\134\uff56\136\uff56\001\002" +
    "\000\004\012\ufefd\001\002\000\006\014\u01c6\017\u01ea\001" +
    "\002\000\004\012\ufefc\001\002\000\042\004\u0193\005\u019f" +
    "\016\u0198\041\u0197\056\u0192\067\u01a2\073\u01a1\074\u0196\120" +
    "\u01a3\123\u019b\141\u0199\142\u0191\143\u01a5\144\u019d\145\u0190" +
    "\146\u01a4\001\002\000\012\012\uff15\017\uff15\033\u01c9\077" +
    "\u01ca\001\002\000\024\012\uff1d\036\u0155\042\u0150\057\u0152" +
    "\070\u0153\117\u0154\120\u01ee\123\u01f1\141\u016f\001\002\000" +
    "\004\015\u0189\001\002\000\004\012\u01f7\001\002\000\006" +
    "\012\uff1e\017\uff1e\001\002\000\004\015\u0189\001\002\000" +
    "\006\012\uff1f\017\uff1f\001\002\000\006\012\uff20\017\uff20" +
    "\001\002\000\010\012\uff09\017\uff09\133\u01f5\001\002\000" +
    "\042\004\u0193\005\u019f\016\u0198\041\u0197\056\u0192\067\u01a2" +
    "\073\u01a1\074\u0196\120\u01a3\123\u019b\141\u0199\142\u0191\143" +
    "\u01a5\144\u019d\145\u0190\146\u01a4\001\002\000\012\012\uff16" +
    "\017\uff16\033\u01c9\077\u01ca\001\002\000\042\004\u0193\005" +
    "\u019f\016\u0198\041\u0197\056\u0192\067\u01a2\073\u01a1\074\u0196" +
    "\120\u01a3\123\u019b\141\u0199\142\u0191\143\u01a5\144\u019d\145" +
    "\u0190\146\u01a4\001\002\000\010\012\u01f9\033\u01c9\077\u01ca" +
    "\001\002\000\024\017\uff1d\036\u0155\042\u0150\057\u0152\070" +
    "\u0153\117\u0154\120\u01ee\123\u01f1\141\u016f\001\002\000\004" +
    "\017\u01fb\001\002\000\004\020\u01fc\001\002\000\046\036" +
    "\u0155\037\u0176\042\u0150\046\u0169\050\u0172\057\u0152\060\u0180" +
    "\064\u016e\070\u0153\102\u017a\103\u0173\114\u016b\117\u0154\120" +
    "\u0181\121\u016c\123\u0171\131\u016a\141\u016f\001\002\000\050" +
    "\021\u01fe\036\u0155\037\u0176\042\u0150\046\u0169\050\u0172\057" +
    "\u0152\060\u0180\064\u016e\070\u0153\102\u017a\103\u0173\114\u016b" +
    "\117\u0154\120\u0181\121\u016c\123\u0171\131\u016a\141\u016f\001" +
    "\002\000\054\021\uff21\036\uff21\037\uff21\040\uff21\042\uff21" +
    "\046\uff21\047\uff21\050\uff21\057\uff21\060\uff21\064\uff21\070" +
    "\uff21\102\uff21\103\uff21\114\uff21\117\uff21\120\uff21\121\uff21" +
    "\123\uff21\131\uff21\141\uff21\001\002\000\054\021\uff3a\036" +
    "\uff3a\037\uff3a\040\uff3a\042\uff3a\046\uff3a\047\uff3a\050\uff3a" +
    "\057\uff3a\060\uff3a\064\uff3a\070\uff3a\102\uff3a\103\uff3a\114" +
    "\uff3a\117\uff3a\120\uff3a\121\uff3a\123\uff3a\131\uff3a\141\uff3a" +
    "\001\002\000\054\021\uff33\036\uff33\037\uff33\040\uff33\042" +
    "\uff33\046\uff33\047\uff33\050\uff33\057\uff33\060\uff33\064\uff33" +
    "\070\uff33\102\uff33\103\uff33\114\uff33\117\uff33\120\uff33\121" +
    "\uff33\123\uff33\131\uff33\141\uff33\001\002\000\054\021\uff36" +
    "\036\uff36\037\uff36\040\uff36\042\uff36\046\uff36\047\uff36\050" +
    "\uff36\057\uff36\060\uff36\064\uff36\070\uff36\102\uff36\103\uff36" +
    "\114\uff36\117\uff36\120\uff36\121\uff36\123\uff36\131\uff36\141" +
    "\uff36\001\002\000\054\021\uff37\036\uff37\037\uff37\040\uff37" +
    "\042\uff37\046\uff37\047\uff37\050\uff37\057\uff37\060\uff37\064" +
    "\uff37\070\uff37\102\uff37\103\uff37\114\uff37\117\uff37\120\uff37" +
    "\121\uff37\123\uff37\131\uff37\141\uff37\001\002\000\042\004" +
    "\u0193\005\u019f\016\u0198\041\u0197\056\u0192\067\u01a2\073\u01a1" +
    "\074\u0196\120\u01a3\123\u019b\141\u0199\142\u0191\143\u01a5\144" +
    "\u019d\145\u0190\146\u01a4\001\002\000\006\014\u01c6\017\u0205" +
    "\001\002\000\004\012\uff29\001\002\000\054\021\uff34\036" +
    "\uff34\037\uff34\040\uff34\042\uff34\046\uff34\047\uff34\050\uff34" +
    "\057\uff34\060\uff34\064\uff34\070\uff34\102\uff34\103\uff34\114" +
    "\uff34\117\uff34\120\uff34\121\uff34\123\uff34\131\uff34\141\uff34" +
    "\001\002\000\010\012\uff0a\017\uff0a\133\u0208\001\002\000" +
    "\042\004\u0193\005\u019f\016\u0198\041\u0197\056\u0192\067\u01a2" +
    "\073\u01a1\074\u0196\120\u01a3\123\u019b\141\u0199\142\u0191\143" +
    "\u01a5\144\u019d\145\u0190\146\u01a4\001\002\000\012\012\uff0b" +
    "\017\uff0b\033\u01c9\077\u01ca\001\002\000\012\021\uff40\104" +
    "\uff40\107\uff40\110\uff40\001\002\000\042\004\u0193\005\u019f" +
    "\016\u0198\041\u0197\056\u0192\067\u01a2\073\u01a1\074\u0196\120" +
    "\u01a3\123\u019b\141\u0199\142\u0191\143\u01a5\144\u019d\145\u0190" +
    "\146\u01a4\001\002\000\006\014\u01c6\017\u020d\001\002\000" +
    "\004\012\uff28\001\002\000\046\036\u0155\037\u0176\042\u0150" +
    "\046\u0169\050\u0172\057\u0152\060\u0180\064\u016e\070\u0153\102" +
    "\u017a\103\u0173\114\u016b\117\u0154\120\u0181\121\u016c\123\u0171" +
    "\131\u016a\141\u016f\001\002\000\050\021\u0210\036\u0155\037" +
    "\u0176\042\u0150\046\u0169\050\u0172\057\u0152\060\u0180\064\u016e" +
    "\070\u0153\102\u017a\103\u0173\114\u016b\117\u0154\120\u0181\121" +
    "\u016c\123\u0171\131\u016a\141\u016f\001\002\000\004\131\u0211" +
    "\001\002\000\004\016\u0212\001\002\000\042\004\u0193\005" +
    "\u019f\016\u0198\041\u0197\056\u0192\067\u01a2\073\u01a1\074\u0196" +
    "\120\u01a3\123\u019b\141\u0199\142\u0191\143\u01a5\144\u019d\145" +
    "\u0190\146\u01a4\001\002\000\010\017\u0214\033\u01c9\077\u01ca" +
    "\001\002\000\004\012\u0215\001\002\000\054\021\uff22\036" +
    "\uff22\037\uff22\040\uff22\042\uff22\046\uff22\047\uff22\050\uff22" +
    "\057\uff22\060\uff22\064\uff22\070\uff22\102\uff22\103\uff22\114" +
    "\uff22\117\uff22\120\uff22\121\uff22\123\uff22\131\uff22\141\uff22" +
    "\001\002\000\044\004\u0193\005\u019f\016\u0198\017\u0217\041" +
    "\u0197\056\u0192\067\u01a2\073\u01a1\074\u0196\120\u01a3\123\u019b" +
    "\141\u0199\142\u0191\143\u01a5\144\u019d\145\u0190\146\u01a4\001" +
    "\002\000\004\012\ufeff\001\002\000\006\014\u01c6\017\u0219" +
    "\001\002\000\004\012\ufefe\001\002\000\010\012\uff07\017" +
    "\uff07\133\u023c\001\002\000\010\015\u0189\022\u01d1\133\u0236" +
    "\001\002\000\042\004\u0193\005\u019f\016\u0198\041\u0197\056" +
    "\u0192\067\u01a2\073\u01a1\074\u0196\120\u01a3\123\u019b\141\u0199" +
    "\142\u0191\143\u01a5\144\u019d\145\u0190\146\u01a4\001\002\000" +
    "\044\004\u0193\005\u019f\016\u0198\023\u0164\041\u0197\056\u0192" +
    "\067\u01a2\073\u01a1\074\u0196\120\u01a3\123\u019b\141\u0199\142" +
    "\u0191\143\u01a5\144\u019d\145\u0190\146\u01a4\001\002\000\044" +
    "\004\u0193\005\u019f\016\u0198\017\u021f\041\u0197\056\u0192\067" +
    "\u01a2\073\u01a1\074\u0196\120\u01a3\123\u019b\141\u0199\142\u0191" +
    "\143\u01a5\144\u019d\145\u0190\146\u01a4\001\002\000\012\012" +
    "\uff06\015\u0189\017\uff06\022\u018e\001\002\000\006\014\u01c6" +
    "\017\u0221\001\002\000\012\012\uff05\015\u0189\017\uff05\022" +
    "\u018e\001\002\000\010\012\uff03\017\uff03\133\u0229\001\002" +
    "\000\010\015\u0189\022\u01d1\133\u0225\001\002\000\010\012" +
    "\uff01\017\uff01\133\u0227\001\002\000\042\004\u0193\005\u019f" +
    "\016\u0198\041\u0197\056\u0192\067\u01a2\073\u01a1\074\u0196\120" +
    "\u01a3\123\u019b\141\u0199\142\u0191\143\u01a5\144\u019d\145\u0190" +
    "\146\u01a4\001\002\000\012\012\uff0f\017\uff0f\033\u01c9\077" +
    "\u01ca\001\002\000\042\004\u0193\005\u019f\016\u0198\041\u0197" +
    "\056\u0192\067\u01a2\073\u01a1\074\u0196\120\u01a3\123\u019b\141" +
    "\u0199\142\u0191\143\u01a5\144\u019d\145\u0190\146\u01a4\001\002" +
    "\000\012\012\uff0e\017\uff0e\033\u01c9\077\u01ca\001\002\000" +
    "\042\004\u0193\005\u019f\016\u0198\041\u0197\056\u0192\067\u01a2" +
    "\073\u01a1\074\u0196\120\u01a3\123\u019b\141\u0199\142\u0191\143" +
    "\u01a5\144\u019d\145\u0190\146\u01a4\001\002\000\012\012\uff12" +
    "\017\uff12\033\u01c9\077\u01ca\001\002\000\010\012\uff04\017" +
    "\uff04\133\u0232\001\002\000\010\015\u0189\022\u01d1\133\u022e" +
    "\001\002\000\010\012\uff02\017\uff02\133\u0230\001\002\000" +
    "\042\004\u0193\005\u019f\016\u0198\041\u0197\056\u0192\067\u01a2" +
    "\073\u01a1\074\u0196\120\u01a3\123\u019b\141\u0199\142\u0191\143" +
    "\u01a5\144\u019d\145\u0190\146\u01a4\001\002\000\012\012\uff11" +
    "\017\uff11\033\u01c9\077\u01ca\001\002\000\042\004\u0193\005" +
    "\u019f\016\u0198\041\u0197\056\u0192\067\u01a2\073\u01a1\074\u0196" +
    "\120\u01a3\123\u019b\141\u0199\142\u0191\143\u01a5\144\u019d\145" +
    "\u0190\146\u01a4\001\002\000\012\012\uff10\017\uff10\033\u01c9" +
    "\077\u01ca\001\002\000\042\004\u0193\005\u019f\016\u0198\041" +
    "\u0197\056\u0192\067\u01a2\073\u01a1\074\u0196\120\u01a3\123\u019b" +
    "\141\u0199\142\u0191\143\u01a5\144\u019d\145\u0190\146\u01a4\001" +
    "\002\000\012\012\uff13\017\uff13\033\u01c9\077\u01ca\001\002" +
    "\000\012\012\uff17\017\uff17\033\u01c9\077\u01ca\001\002\000" +
    "\010\012\uff00\017\uff00\133\u0239\001\002\000\042\004\u0193" +
    "\005\u019f\016\u0198\041\u0197\056\u0192\067\u01a2\073\u01a1\074" +
    "\u0196\120\u01a3\123\u019b\141\u0199\142\u0191\143\u01a5\144\u019d" +
    "\145\u0190\146\u01a4\001\002\000\010\012\u0238\033\u01c9\077" +
    "\u01ca\001\002\000\006\012\uff0c\017\uff0c\001\002\000\042" +
    "\004\u0193\005\u019f\016\u0198\041\u0197\056\u0192\067\u01a2\073" +
    "\u01a1\074\u0196\120\u01a3\123\u019b\141\u0199\142\u0191\143\u01a5" +
    "\144\u019d\145\u0190\146\u01a4\001\002\000\010\012\u023b\033" +
    "\u01c9\077\u01ca\001\002\000\006\012\uff0d\017\uff0d\001\002" +
    "\000\042\004\u0193\005\u019f\016\u0198\041\u0197\056\u0192\067" +
    "\u01a2\073\u01a1\074\u0196\120\u01a3\123\u019b\141\u0199\142\u0191" +
    "\143\u01a5\144\u019d\145\u0190\146\u01a4\001\002\000\012\012" +
    "\uff14\017\uff14\033\u01c9\077\u01ca\001\002\000\042\004\u0193" +
    "\005\u019f\016\u0198\041\u0197\056\u0192\067\u01a2\073\u01a1\074" +
    "\u0196\120\u01a3\123\u019b\141\u0199\142\u0191\143\u01a5\144\u019d" +
    "\145\u0190\146\u01a4\001\002\000\010\017\u0240\033\u01c9\077" +
    "\u01ca\001\002\000\004\020\u0241\001\002\000\046\036\u0155" +
    "\037\u0176\042\u0150\046\u0169\050\u0172\057\u0152\060\u0180\064" +
    "\u016e\070\u0153\102\u017a\103\u0173\114\u016b\117\u0154\120\u0181" +
    "\121\u016c\123\u0171\131\u016a\141\u016f\001\002\000\050\021" +
    "\u0243\036\u0155\037\u0176\042\u0150\046\u0169\050\u0172\057\u0152" +
    "\060\u0180\064\u016e\070\u0153\102\u017a\103\u0173\114\u016b\117" +
    "\u0154\120\u0181\121\u016c\123\u0171\131\u016a\141\u016f\001\002" +
    "\000\056\021\uff24\036\uff24\037\uff24\040\uff24\042\uff24\046" +
    "\uff24\047\uff24\050\uff24\052\u0245\057\uff24\060\uff24\064\uff24" +
    "\070\uff24\102\uff24\103\uff24\114\uff24\117\uff24\120\uff24\121" +
    "\uff24\123\uff24\131\uff24\141\uff24\001\002\000\054\021\uff27" +
    "\036\uff27\037\uff27\040\uff27\042\uff27\046\uff27\047\uff27\050" +
    "\uff27\057\uff27\060\uff27\064\uff27\070\uff27\102\uff27\103\uff27" +
    "\114\uff27\117\uff27\120\uff27\121\uff27\123\uff27\131\uff27\141" +
    "\uff27\001\002\000\006\020\u0246\064\u016e\001\002\000\046" +
    "\036\u0155\037\u0176\042\u0150\046\u0169\050\u0172\057\u0152\060" +
    "\u0180\064\u016e\070\u0153\102\u017a\103\u0173\114\u016b\117\u0154" +
    "\120\u0181\121\u016c\123\u0171\131\u016a\141\u016f\001\002\000" +
    "\054\021\uff25\036\uff25\037\uff25\040\uff25\042\uff25\046\uff25" +
    "\047\uff25\050\uff25\057\uff25\060\uff25\064\uff25\070\uff25\102" +
    "\uff25\103\uff25\114\uff25\117\uff25\120\uff25\121\uff25\123\uff25" +
    "\131\uff25\141\uff25\001\002\000\050\021\u0249\036\u0155\037" +
    "\u0176\042\u0150\046\u0169\050\u0172\057\u0152\060\u0180\064\u016e" +
    "\070\u0153\102\u017a\103\u0173\114\u016b\117\u0154\120\u0181\121" +
    "\u016c\123\u0171\131\u016a\141\u016f\001\002\000\054\021\uff26" +
    "\036\uff26\037\uff26\040\uff26\042\uff26\046\uff26\047\uff26\050" +
    "\uff26\057\uff26\060\uff26\064\uff26\070\uff26\102\uff26\103\uff26" +
    "\114\uff26\117\uff26\120\uff26\121\uff26\123\uff26\131\uff26\141" +
    "\uff26\001\002\000\042\004\u0193\005\u019f\016\u0198\041\u0197" +
    "\056\u0192\067\u01a2\073\u01a1\074\u0196\120\u01a3\123\u019b\141" +
    "\u0199\142\u0191\143\u01a5\144\u019d\145\u0190\146\u01a4\001\002" +
    "\000\010\017\u024c\033\u01c9\077\u01ca\001\002\000\004\020" +
    "\u024d\001\002\000\006\040\u0250\047\u024e\001\002\000\004" +
    "\013\u0257\001\002\000\010\021\uff1a\040\uff1a\047\uff1a\001" +
    "\002\000\042\004\u0193\005\u019f\016\u0198\041\u0197\056\u0192" +
    "\067\u01a2\073\u01a1\074\u0196\120\u01a3\123\u019b\141\u0199\142" +
    "\u0191\143\u01a5\144\u019d\145\u0190\146\u01a4\001\002\000\010" +
    "\021\u0253\040\u0250\047\u024e\001\002\000\010\021\uff1b\040" +
    "\uff1b\047\uff1b\001\002\000\054\021\uff1c\036\uff1c\037\uff1c" +
    "\040\uff1c\042\uff1c\046\uff1c\047\uff1c\050\uff1c\057\uff1c\060" +
    "\uff1c\064\uff1c\070\uff1c\102\uff1c\103\uff1c\114\uff1c\117\uff1c" +
    "\120\uff1c\121\uff1c\123\uff1c\131\uff1c\141\uff1c\001\002\000" +
    "\010\013\u0255\033\u01c9\077\u01ca\001\002\000\046\036\u0155" +
    "\037\u0176\042\u0150\046\u0169\050\u0172\057\u0152\060\u0180\064" +
    "\u016e\070\u0153\102\u017a\103\u0173\114\u016b\117\u0154\120\u0181" +
    "\121\u016c\123\u0171\131\u016a\141\u016f\001\002\000\054\021" +
    "\uff19\036\u0155\037\u0176\040\uff19\042\u0150\046\u0169\047\uff19" +
    "\050\u0172\057\u0152\060\u0180\064\u016e\070\u0153\102\u017a\103" +
    "\u0173\114\u016b\117\u0154\120\u0181\121\u016c\123\u0171\131\u016a" +
    "\141\u016f\001\002\000\046\036\u0155\037\u0176\042\u0150\046" +
    "\u0169\050\u0172\057\u0152\060\u0180\064\u016e\070\u0153\102\u017a" +
    "\103\u0173\114\u016b\117\u0154\120\u0181\121\u016c\123\u0171\131" +
    "\u016a\141\u016f\001\002\000\054\021\uff18\036\u0155\037\u0176" +
    "\040\uff18\042\u0150\046\u0169\047\uff18\050\u0172\057\u0152\060" +
    "\u0180\064\u016e\070\u0153\102\u017a\103\u0173\114\u016b\117\u0154" +
    "\120\u0181\121\u016c\123\u0171\131\u016a\141\u016f\001\002\000" +
    "\010\012\uff2a\033\u01c9\077\u01ca\001\002\000\042\004\u0193" +
    "\005\u019f\016\u0198\041\u0197\056\u0192\067\u01a2\073\u01a1\074" +
    "\u0196\120\u01a3\123\u019b\141\u0199\142\u0191\143\u01a5\144\u019d" +
    "\145\u0190\146\u01a4\001\002\000\010\017\u025c\033\u01c9\077" +
    "\u01ca\001\002\000\004\020\u025d\001\002\000\046\036\u0155" +
    "\037\u0176\042\u0150\046\u0169\050\u0172\057\u0152\060\u0180\064" +
    "\u016e\070\u0153\102\u017a\103\u0173\114\u016b\117\u0154\120\u0181" +
    "\121\u016c\123\u0171\131\u016a\141\u016f\001\002\000\050\021" +
    "\u025f\036\u0155\037\u0176\042\u0150\046\u0169\050\u0172\057\u0152" +
    "\060\u0180\064\u016e\070\u0153\102\u017a\103\u0173\114\u016b\117" +
    "\u0154\120\u0181\121\u016c\123\u0171\131\u016a\141\u016f\001\002" +
    "\000\054\021\uff23\036\uff23\037\uff23\040\uff23\042\uff23\046" +
    "\uff23\047\uff23\050\uff23\057\uff23\060\uff23\064\uff23\070\uff23" +
    "\102\uff23\103\uff23\114\uff23\117\uff23\120\uff23\121\uff23\123" +
    "\uff23\131\uff23\141\uff23\001\002\000\006\022\u0162\141\uff62" +
    "\001\002\000\006\022\u0162\141\uff64\001\002\000\006\022" +
    "\u0162\141\uff65\001\002\000\006\022\u0162\141\uff63\001\002" +
    "\000\010\012\u0265\016\u0159\133\u0268\001\002\000\012\021" +
    "\uff43\104\uff43\107\uff43\110\uff43\001\002\000\012\021\uff41" +
    "\104\uff41\107\uff41\110\uff41\001\002\000\012\021\uff46\104" +
    "\uff46\107\uff46\110\uff46\001\002\000\042\004\u0193\005\u019f" +
    "\016\u0198\041\u0197\056\u0192\067\u01a2\073\u01a1\074\u0196\120" +
    "\u01a3\123\u019b\141\u0199\142\u0191\143\u01a5\144\u019d\145\u0190" +
    "\146\u01a4\001\002\000\010\012\u026a\033\u01c9\077\u01ca\001" +
    "\002\000\012\021\uff42\104\uff42\107\uff42\110\uff42\001\002" +
    "\000\006\022\u0162\141\uff61\001\002\000\020\017\uff3e\036" +
    "\u0155\042\u0150\057\u0152\070\u0153\117\u0154\141\u015d\001\002" +
    "\000\004\017\u026e\001\002\000\004\020\u026f\001\002\000" +
    "\046\036\u0155\037\u0176\042\u0150\046\u0169\050\u0172\057\u0152" +
    "\060\u0180\064\u016e\070\u0153\102\u017a\103\u0173\114\u016b\117" +
    "\u0154\120\u0181\121\u016c\123\u0171\131\u016a\141\u016f\001\002" +
    "\000\050\021\u0271\036\u0155\037\u0176\042\u0150\046\u0169\050" +
    "\u0172\057\u0152\060\u0180\064\u016e\070\u0153\102\u017a\103\u0173" +
    "\114\u016b\117\u0154\120\u0181\121\u016c\123\u0171\131\u016a\141" +
    "\u016f\001\002\000\012\021\uff44\104\uff44\107\uff44\110\uff44" +
    "\001\002\000\004\020\uff4a\001\002\000\004\002\000\001" +
    "\002\000\024\036\ufebe\042\ufebe\045\ufebe\057\ufebe\063\ufebe" +
    "\070\ufebe\071\ufebe\117\ufebe\130\ufebe\001\002\000\024\036" +
    "\ufebc\042\ufebc\045\ufebc\057\ufebc\063\u0276\070\ufebc\071\ufebc" +
    "\117\ufebc\130\ufebc\001\002\000\004\066\u0354\001\002\000" +
    "\022\036\ufeba\042\ufeba\045\u0278\057\ufeba\070\ufeba\071\ufeba" +
    "\117\ufeba\130\ufeba\001\002\000\014\036\u027f\042\u0283\057" +
    "\u027d\070\u027e\117\u027a\001\002\000\020\036\u027f\042\u0283" +
    "\057\u027d\070\u027e\071\u027b\117\u027a\130\u0280\001\002\000" +
    "\004\141\ufeca\001\002\000\004\015\u033f\001\002\000\004" +
    "\141\u0332\001\002\000\004\141\ufecb\001\002\000\004\141" +
    "\ufecd\001\002\000\004\141\ufec9\001\002\000\004\072\u0284" +
    "\001\002\000\020\036\ufeb6\042\ufeb6\057\ufeb6\070\ufeb6\071" +
    "\ufeb6\117\ufeb6\130\ufeb6\001\002\000\020\036\ufebb\042\ufebb" +
    "\057\ufebb\070\ufebb\071\ufebb\117\ufebb\130\ufebb\001\002\000" +
    "\004\141\ufecc\001\002\000\004\016\u0285\001\002\000\004" +
    "\017\u0286\001\002\000\004\020\u0287\001\002\000\040\037" +
    "\u029a\044\u028f\046\u0288\050\u0298\052\u028a\060\u02a1\062\u02a0" +
    "\064\u0295\071\u02a2\101\u029d\102\u029e\115\u028e\121\u0294\131" +
    "\u028d\141\u0297\001\002\000\004\012\ufea8\001\002\000\006" +
    "\021\ufea1\037\ufea1\001\002\000\006\020\u032f\064\u0295\001" +
    "\002\000\006\021\ufea3\037\ufea3\001\002\000\006\021\ufe9f" +
    "\037\ufe9f\001\002\000\004\016\u0328\001\002\000\004\016" +
    "\u0322\001\002\000\004\016\u0320\001\002\000\004\012\u031f" +
    "\001\002\000\006\021\ufea2\037\ufea2\001\002\000\006\012" +
    "\u031e\133\u02ac\001\002\000\006\021\ufeaf\037\ufeaf\001\002" +
    "\000\004\016\u030b\001\002\000\004\016\u0304\001\002\000" +
    "\006\021\ufe9e\037\ufe9e\001\002\000\004\133\u0302\001\002" +
    "\000\004\020\u02fa\001\002\000\004\012\u02f9\001\002\000" +
    "\004\012\ufea9\001\002\000\004\021\u02f8\001\002\000\006" +
    "\012\u02f7\133\u02e6\001\002\000\004\015\u02f1\001\002\000" +
    "\004\016\u02eb\001\002\000\004\012\u02ea\001\002\000\004" +
    "\016\u02e8\001\002\000\004\016\u02a7\001\002\000\004\015" +
    "\u02a4\001\002\000\006\021\ufea0\037\ufea0\001\002\000\004" +
    "\141\u02a5\001\002\000\004\015\u0189\001\002\000\052\004" +
    "\ufe8b\005\ufe8b\006\ufe8b\007\ufe8b\011\ufe8b\012\ufe8b\013\ufe8b" +
    "\014\ufe8b\017\ufe8b\023\ufe8b\024\ufe8b\025\ufe8b\026\ufe8b\027" +
    "\ufe8b\033\ufe8b\054\ufe8b\077\ufe8b\133\ufe8b\134\ufe8b\136\ufe8b" +
    "\001\002\000\012\012\ufe8e\071\u02a2\101\u029d\141\u0297\001" +
    "\002\000\010\012\ufe91\017\ufe91\133\u02e6\001\002\000\004" +
    "\012\u02de\001\002\000\006\012\ufe8f\017\ufe8f\001\002\000" +
    "\010\012\ufe90\017\ufe90\133\u02ac\001\002\000\032\004\u02b0" +
    "\005\u02b9\016\u02b3\071\u02a2\074\u02b1\101\u029d\141\u02b4\142" +
    "\u02ae\143\u02bc\144\u02b7\145\u02ad\146\u02bb\001\002\000\050" +
    "\004\ufec1\005\ufec1\006\ufec1\007\ufec1\011\ufec1\012\ufec1\013" +
    "\ufec1\014\ufec1\017\ufec1\023\ufec1\024\ufec1\025\ufec1\026\ufec1" +
    "\027\ufec1\033\ufec1\054\ufec1\077\ufec1\134\ufec1\136\ufec1\001" +
    "\002\000\050\004\ufec4\005\ufec4\006\ufec4\007\ufec4\011\ufec4" +
    "\012\ufec4\013\ufec4\014\ufec4\017\ufec4\023\ufec4\024\ufec4\025" +
    "\ufec4\026\ufec4\027\ufec4\033\ufec4\054\ufec4\077\ufec4\134\ufec4" +
    "\136\ufec4\001\002\000\012\012\ufe9c\017\ufe9c\033\u02d8\077" +
    "\u02d9\001\002\000\030\004\u02b0\005\u02b9\016\u02b3\071\u02a2" +
    "\101\u029d\141\u02b4\142\u02ae\143\u02bc\144\u02b7\145\u02ad\146" +
    "\u02bb\001\002\000\042\004\u0193\005\u019f\016\u0198\041\u0197" +
    "\056\u0192\067\u01a2\073\u01a1\074\u0196\120\u01a3\123\u019b\141" +
    "\u0199\142\u0191\143\u01a5\144\u019d\145\u0190\146\u01a4\001\002" +
    "\000\050\004\ufe75\005\ufe75\006\ufe75\007\ufe75\011\ufe75\012" +
    "\ufe75\013\ufe75\014\ufe75\017\ufe75\023\ufe75\024\ufe75\025\ufe75" +
    "\026\ufe75\027\ufe75\033\ufe75\054\ufe75\077\ufe75\134\ufe75\136" +
    "\ufe75\001\002\000\032\004\u02b0\005\u02b9\016\u02b3\071\u02a2" +
    "\074\u02b1\101\u029d\141\u02b4\142\u02ae\143\u02bc\144\u02b7\145" +
    "\u02ad\146\u02bb\001\002\000\050\004\ufe74\005\ufe74\006\ufe74" +
    "\007\ufe74\011\ufe74\012\ufe74\013\ufe74\014\ufe74\017\ufe74\023" +
    "\ufe74\024\ufe74\025\ufe74\026\ufe74\027\ufe74\033\ufe74\054\ufe74" +
    "\077\ufe74\134\ufe74\136\ufe74\001\002\000\050\004\u02bf\005" +
    "\u02c1\006\u02c3\007\u02c2\011\u02c0\012\ufe7e\013\ufe7e\014\ufe7e" +
    "\017\ufe7e\023\ufe7e\024\u02cb\025\u02cd\026\u02ca\027\u02cf\033" +
    "\ufe7e\054\u02ce\077\ufe7e\134\u02cc\136\u02be\001\002\000\020" +
    "\012\ufe85\013\ufe85\014\ufe85\017\ufe85\023\ufe85\033\ufe85\077" +
    "\ufe85\001\002\000\050\004\ufec2\005\ufec2\006\ufec2\007\ufec2" +
    "\011\ufec2\012\ufec2\013\ufec2\014\ufec2\017\ufec2\023\ufec2\024" +
    "\ufec2\025\ufec2\026\ufec2\027\ufec2\033\ufec2\054\ufec2\077\ufec2" +
    "\134\ufec2\136\ufec2\001\002\000\050\004\ufe76\005\ufe76\006" +
    "\ufe76\007\ufe76\011\ufe76\012\ufe76\013\ufe76\014\ufe76\017\ufe76" +
    "\023\ufe76\024\ufe76\025\ufe76\026\ufe76\027\ufe76\033\ufe76\054" +
    "\ufe76\077\ufe76\134\ufe76\136\ufe76\001\002\000\030\004\u02b0" +
    "\005\u02b9\016\u02b3\071\u02a2\101\u029d\141\u02b4\142\u02ae\143" +
    "\u02bc\144\u02b7\145\u02ad\146\u02bb\001\002\000\050\004\ufe77" +
    "\005\ufe77\006\ufe77\007\ufe77\011\ufe77\012\ufe77\013\ufe77\014" +
    "\ufe77\017\ufe77\023\ufe77\024\ufe77\025\ufe77\026\ufe77\027\ufe77" +
    "\033\ufe77\054\ufe77\077\ufe77\134\ufe77\136\ufe77\001\002\000" +
    "\050\004\ufec3\005\ufec3\006\ufec3\007\ufec3\011\ufec3\012\ufec3" +
    "\013\ufec3\014\ufec3\017\ufec3\023\ufec3\024\ufec3\025\ufec3\026" +
    "\ufec3\027\ufec3\033\ufec3\054\ufec3\077\ufec3\134\ufec3\136\ufec3" +
    "\001\002\000\050\004\ufec0\005\ufec0\006\ufec0\007\ufec0\011" +
    "\ufec0\012\ufec0\013\ufec0\014\ufec0\017\ufec0\023\ufec0\024\ufec0" +
    "\025\ufec0\026\ufec0\027\ufec0\033\ufec0\054\ufec0\077\ufec0\134" +
    "\ufec0\136\ufec0\001\002\000\050\004\ufe71\005\ufe71\006\u02c3" +
    "\007\u02c2\011\u02c0\012\ufe71\013\ufe71\014\ufe71\017\ufe71\023" +
    "\ufe71\024\ufe71\025\ufe71\026\ufe71\027\ufe71\033\ufe71\054\ufe71" +
    "\077\ufe71\134\ufe71\136\u02be\001\002\000\030\004\u02b0\005" +
    "\u02b9\016\u02b3\071\u02a2\101\u029d\141\u02b4\142\u02ae\143\u02bc" +
    "\144\u02b7\145\u02ad\146\u02bb\001\002\000\030\004\u02b0\005" +
    "\u02b9\016\u02b3\071\u02a2\101\u029d\141\u02b4\142\u02ae\143\u02bc" +
    "\144\u02b7\145\u02ad\146\u02bb\001\002\000\030\004\u02b0\005" +
    "\u02b9\016\u02b3\071\u02a2\101\u029d\141\u02b4\142\u02ae\143\u02bc" +
    "\144\u02b7\145\u02ad\146\u02bb\001\002\000\030\004\u02b0\005" +
    "\u02b9\016\u02b3\071\u02a2\101\u029d\141\u02b4\142\u02ae\143\u02bc" +
    "\144\u02b7\145\u02ad\146\u02bb\001\002\000\030\004\u02b0\005" +
    "\u02b9\016\u02b3\071\u02a2\101\u029d\141\u02b4\142\u02ae\143\u02bc" +
    "\144\u02b7\145\u02ad\146\u02bb\001\002\000\030\004\u02b0\005" +
    "\u02b9\016\u02b3\071\u02a2\101\u029d\141\u02b4\142\u02ae\143\u02bc" +
    "\144\u02b7\145\u02ad\146\u02bb\001\002\000\050\004\ufe7b\005" +
    "\ufe7b\006\ufe7b\007\ufe7b\011\u02c0\012\ufe7b\013\ufe7b\014\ufe7b" +
    "\017\ufe7b\023\ufe7b\024\ufe7b\025\ufe7b\026\ufe7b\027\ufe7b\033" +
    "\ufe7b\054\ufe7b\077\ufe7b\134\ufe7b\136\ufe7b\001\002\000\050" +
    "\004\ufe7a\005\ufe7a\006\ufe7a\007\ufe7a\011\u02c0\012\ufe7a\013" +
    "\ufe7a\014\ufe7a\017\ufe7a\023\ufe7a\024\ufe7a\025\ufe7a\026\ufe7a" +
    "\027\ufe7a\033\ufe7a\054\ufe7a\077\ufe7a\134\ufe7a\136\ufe7a\001" +
    "\002\000\050\004\ufe7c\005\ufe7c\006\u02c3\007\u02c2\011\u02c0" +
    "\012\ufe7c\013\ufe7c\014\ufe7c\017\ufe7c\023\ufe7c\024\ufe7c\025" +
    "\ufe7c\026\ufe7c\027\ufe7c\033\ufe7c\054\ufe7c\077\ufe7c\134\ufe7c" +
    "\136\u02be\001\002\000\050\004\ufe78\005\ufe78\006\ufe78\007" +
    "\ufe78\011\ufe78\012\ufe78\013\ufe78\014\ufe78\017\ufe78\023\ufe78" +
    "\024\ufe78\025\ufe78\026\ufe78\027\ufe78\033\ufe78\054\ufe78\077" +
    "\ufe78\134\ufe78\136\ufe78\001\002\000\050\004\ufe7d\005\ufe7d" +
    "\006\u02c3\007\u02c2\011\u02c0\012\ufe7d\013\ufe7d\014\ufe7d\017" +
    "\ufe7d\023\ufe7d\024\ufe7d\025\ufe7d\026\ufe7d\027\ufe7d\033\ufe7d" +
    "\054\ufe7d\077\ufe7d\134\ufe7d\136\u02be\001\002\000\050\004" +
    "\ufe79\005\ufe79\006\ufe79\007\ufe79\011\u02c0\012\ufe79\013\ufe79" +
    "\014\ufe79\017\ufe79\023\ufe79\024\ufe79\025\ufe79\026\ufe79\027" +
    "\ufe79\033\ufe79\054\ufe79\077\ufe79\134\ufe79\136\ufe79\001\002" +
    "\000\030\004\u02b0\005\u02b9\016\u02b3\071\u02a2\101\u029d\141" +
    "\u02b4\142\u02ae\143\u02bc\144\u02b7\145\u02ad\146\u02bb\001\002" +
    "\000\030\004\u02b0\005\u02b9\016\u02b3\071\u02a2\101\u029d\141" +
    "\u02b4\142\u02ae\143\u02bc\144\u02b7\145\u02ad\146\u02bb\001\002" +
    "\000\030\004\u02b0\005\u02b9\016\u02b3\071\u02a2\101\u029d\141" +
    "\u02b4\142\u02ae\143\u02bc\144\u02b7\145\u02ad\146\u02bb\001\002" +
    "\000\030\004\u02b0\005\u02b9\016\u02b3\071\u02a2\101\u029d\141" +
    "\u02b4\142\u02ae\143\u02bc\144\u02b7\145\u02ad\146\u02bb\001\002" +
    "\000\030\004\u02b0\005\u02b9\016\u02b3\071\u02a2\101\u029d\141" +
    "\u02b4\142\u02ae\143\u02bc\144\u02b7\145\u02ad\146\u02bb\001\002" +
    "\000\030\004\u02b0\005\u02b9\016\u02b3\071\u02a2\101\u029d\141" +
    "\u02b4\142\u02ae\143\u02bc\144\u02b7\145\u02ad\146\u02bb\001\002" +
    "\000\034\004\u02bf\005\u02c1\006\u02c3\007\u02c2\011\u02c0\012" +
    "\ufe7f\013\ufe7f\014\ufe7f\017\ufe7f\023\ufe7f\033\ufe7f\077\ufe7f" +
    "\136\u02be\001\002\000\034\004\u02bf\005\u02c1\006\u02c3\007" +
    "\u02c2\011\u02c0\012\ufe84\013\ufe84\014\ufe84\017\ufe84\023\ufe84" +
    "\033\ufe84\077\ufe84\136\u02be\001\002\000\034\004\u02bf\005" +
    "\u02c1\006\u02c3\007\u02c2\011\u02c0\012\ufe81\013\ufe81\014\ufe81" +
    "\017\ufe81\023\ufe81\033\ufe81\077\ufe81\136\u02be\001\002\000" +
    "\034\004\u02bf\005\u02c1\006\u02c3\007\u02c2\011\u02c0\012\ufe83" +
    "\013\ufe83\014\ufe83\017\ufe83\023\ufe83\033\ufe83\077\ufe83\136" +
    "\u02be\001\002\000\034\004\u02bf\005\u02c1\006\u02c3\007\u02c2" +
    "\011\u02c0\012\ufe82\013\ufe82\014\ufe82\017\ufe82\023\ufe82\033" +
    "\ufe82\077\ufe82\136\u02be\001\002\000\034\004\u02bf\005\u02c1" +
    "\006\u02c3\007\u02c2\011\u02c0\012\ufe80\013\ufe80\014\ufe80\017" +
    "\ufe80\023\ufe80\033\ufe80\077\ufe80\136\u02be\001\002\000\010" +
    "\017\u02d7\033\u02d8\077\u02d9\001\002\000\050\004\ufe73\005" +
    "\ufe73\006\ufe73\007\ufe73\011\ufe73\012\ufe73\013\ufe73\014\ufe73" +
    "\017\ufe73\023\ufe73\024\ufe73\025\ufe73\026\ufe73\027\ufe73\033" +
    "\ufe73\054\ufe73\077\ufe73\134\ufe73\136\ufe73\001\002\000\032" +
    "\004\u02b0\005\u02b9\016\u02b3\071\u02a2\074\u02b1\101\u029d\141" +
    "\u02b4\142\u02ae\143\u02bc\144\u02b7\145\u02ad\146\u02bb\001\002" +
    "\000\032\004\u02b0\005\u02b9\016\u02b3\071\u02a2\074\u02b1\101" +
    "\u029d\141\u02b4\142\u02ae\143\u02bc\144\u02b7\145\u02ad\146\u02bb" +
    "\001\002\000\020\012\ufe87\013\ufe87\014\ufe87\017\ufe87\023" +
    "\ufe87\033\u02d8\077\ufe87\001\002\000\020\012\ufe88\013\ufe88" +
    "\014\ufe88\017\ufe88\023\ufe88\033\ufe88\077\ufe88\001\002\000" +
    "\020\012\ufe86\013\ufe86\014\ufe86\017\ufe86\023\ufe86\033\ufe86" +
    "\077\ufe86\001\002\000\050\004\ufe72\005\ufe72\006\ufe72\007" +
    "\ufe72\011\ufe72\012\ufe72\013\ufe72\014\ufe72\017\ufe72\023\ufe72" +
    "\024\ufe72\025\ufe72\026\ufe72\027\ufe72\033\ufe72\054\ufe72\077" +
    "\ufe72\134\ufe72\136\ufe72\001\002\000\032\004\u02b0\005\u02b9" +
    "\016\u02b3\071\u02a2\074\u02b1\101\u029d\141\u02b4\142\u02ae\143" +
    "\u02bc\144\u02b7\145\u02ad\146\u02bb\001\002\000\010\012\u02e0" +
    "\033\u02d8\077\u02d9\001\002\000\012\017\ufe8e\071\u02a2\101" +
    "\u029d\141\u0297\001\002\000\004\017\u02e2\001\002\000\004" +
    "\020\u02e3\001\002\000\040\037\u029a\044\u028f\046\u0288\050" +
    "\u0298\052\u028a\060\u02a1\062\u02a0\064\u0295\071\u02a2\101\u029d" +
    "\102\u029e\115\u028e\121\u0294\131\u028d\141\u0297\001\002\000" +
    "\004\021\u02e5\001\002\000\006\021\ufe92\037\ufe92\001\002" +
    "\000\032\004\u02b0\005\u02b9\016\u02b3\071\u02a2\074\u02b1\101" +
    "\u029d\141\u02b4\142\u02ae\143\u02bc\144\u02b7\145\u02ad\146\u02bb" +
    "\001\002\000\012\012\ufe9d\017\ufe9d\033\u02d8\077\u02d9\001" +
    "\002\000\004\017\u02e9\001\002\000\004\012\ufea4\001\002" +
    "\000\006\021\ufeaa\037\ufeaa\001\002\000\032\004\u02b0\005" +
    "\u02b9\016\u02b3\071\u02a2\074\u02b1\101\u029d\141\u02b4\142\u02ae" +
    "\143\u02bc\144\u02b7\145\u02ad\146\u02bb\001\002\000\012\014" +
    "\ufec5\017\ufec5\033\u02d8\077\u02d9\001\002\000\006\014\u02ee" +
    "\017\u02ef\001\002\000\032\004\u02b0\005\u02b9\016\u02b3\071" +
    "\u02a2\074\u02b1\101\u029d\141\u02b4\142\u02ae\143\u02bc\144\u02b7" +
    "\145\u02ad\146\u02bb\001\002\000\004\012\ufea6\001\002\000" +
    "\012\014\ufec6\017\ufec6\033\u02d8\077\u02d9\001\002\000\004" +
    "\141\u02f2\001\002\000\004\016\u02f3\001\002\000\034\004" +
    "\u02b0\005\u02b9\016\u02b3\017\u02f4\071\u02a2\074\u02b1\101\u029d" +
    "\141\u02b4\142\u02ae\143\u02bc\144\u02b7\145\u02ad\146\u02bb\001" +
    "\002\000\052\004\ufe8a\005\ufe8a\006\ufe8a\007\ufe8a\011\ufe8a" +
    "\012\ufe8a\013\ufe8a\014\ufe8a\017\ufe8a\023\ufe8a\024\ufe8a\025" +
    "\ufe8a\026\ufe8a\027\ufe8a\033\ufe8a\054\ufe8a\077\ufe8a\133\ufe8a" +
    "\134\ufe8a\136\ufe8a\001\002\000\006\014\u02ee\017\u02f6\001" +
    "\002\000\052\004\ufe89\005\ufe89\006\ufe89\007\ufe89\011\ufe89" +
    "\012\ufe89\013\ufe89\014\ufe89\017\ufe89\023\ufe89\024\ufe89\025" +
    "\ufe89\026\ufe89\027\ufe89\033\ufe89\054\ufe89\077\ufe89\133\ufe89" +
    "\134\ufe89\136\ufe89\001\002\000\006\021\ufeac\037\ufeac\001" +
    "\002\000\004\002\ufece\001\002\000\006\021\ufead\037\ufead" +
    "\001\002\000\040\037\u029a\044\u028f\046\u0288\050\u0298\052" +
    "\u028a\060\u02a1\062\u02a0\064\u0295\071\u02a2\101\u029d\102\u029e" +
    "\115\u028e\121\u0294\131\u028d\141\u0297\001\002\000\004\021" +
    "\u02fc\001\002\000\004\131\u02fd\001\002\000\004\016\u02fe" +
    "\001\002\000\032\004\u02b0\005\u02b9\016\u02b3\071\u02a2\074" +
    "\u02b1\101\u029d\141\u02b4\142\u02ae\143\u02bc\144\u02b7\145\u02ad" +
    "\146\u02bb\001\002\000\010\017\u0300\033\u02d8\077\u02d9\001" +
    "\002\000\004\012\u0301\001\002\000\006\021\ufe8c\037\ufe8c" +
    "\001\002\000\032\004\u02b0\005\u02b9\016\u02b3\071\u02a2\074" +
    "\u02b1\101\u029d\141\u02b4\142\u02ae\143\u02bc\144\u02b7\145\u02ad" +
    "\146\u02bb\001\002\000\012\012\ufe9b\017\ufe9b\033\u02d8\077" +
    "\u02d9\001\002\000\032\004\u02b0\005\u02b9\016\u02b3\071\u02a2" +
    "\074\u02b1\101\u029d\141\u02b4\142\u02ae\143\u02bc\144\u02b7\145" +
    "\u02ad\146\u02bb\001\002\000\010\017\u0306\033\u02d8\077\u02d9" +
    "\001\002\000\004\020\u0307\001\002\000\040\037\u029a\044" +
    "\u028f\046\u0288\050\u0298\052\u028a\060\u02a1\062\u02a0\064\u0295" +
    "\071\u02a2\101\u029d\102\u029e\115\u028e\121\u0294\131\u028d\141" +
    "\u0297\001\002\000\004\021\u0309\001\002\000\004\052\u028a" +
    "\001\002\000\006\021\ufe9a\037\ufe9a\001\002\000\032\004" +
    "\u02b0\005\u02b9\016\u02b3\071\u02a2\074\u02b1\101\u029d\141\u02b4" +
    "\142\u02ae\143\u02bc\144\u02b7\145\u02ad\146\u02bb\001\002\000" +
    "\010\017\u030d\033\u02d8\077\u02d9\001\002\000\004\020\u030e" +
    "\001\002\000\006\040\u0312\047\u030f\001\002\000\004\013" +
    "\u031a\001\002\000\010\021\ufe95\040\ufe95\047\ufe95\001\002" +
    "\000\010\021\u0319\040\u0312\047\u030f\001\002\000\032\004" +
    "\u02b0\005\u02b9\016\u02b3\071\u02a2\074\u02b1\101\u029d\141\u02b4" +
    "\142\u02ae\143\u02bc\144\u02b7\145\u02ad\146\u02bb\001\002\000" +
    "\010\013\u0314\033\u02d8\077\u02d9\001\002\000\040\037\u029a" +
    "\044\u028f\046\u0288\050\u0298\052\u028a\060\u02a1\062\u02a0\064" +
    "\u0295\071\u02a2\101\u029d\102\u029e\115\u028e\121\u0294\131\u028d" +
    "\141\u0297\001\002\000\004\037\u0316\001\002\000\004\012" +
    "\u0317\001\002\000\010\021\ufe94\040\ufe94\047\ufe94\001\002" +
    "\000\010\021\ufe96\040\ufe96\047\ufe96\001\002\000\006\021" +
    "\ufe97\037\ufe97\001\002\000\040\037\u029a\044\u028f\046\u0288" +
    "\050\u0298\052\u028a\060\u02a1\062\u02a0\064\u0295\071\u02a2\101" +
    "\u029d\102\u029e\115\u028e\121\u0294\131\u028d\141\u0297\001\002" +
    "\000\004\037\u031c\001\002\000\004\012\u031d\001\002\000" +
    "\010\021\ufe93\040\ufe93\047\ufe93\001\002\000\006\021\ufeab" +
    "\037\ufeab\001\002\000\006\021\ufeae\037\ufeae\001\002\000" +
    "\004\017\u0321\001\002\000\004\012\ufea5\001\002\000\004" +
    "\142\u0323\001\002\000\004\014\u0324\001\002\000\004\135" +
    "\u0325\001\002\000\004\141\u0326\001\002\000\004\017\u0327" +
    "\001\002\000\004\012\ufea7\001\002\000\032\004\u02b0\005" +
    "\u02b9\016\u02b3\071\u02a2\074\u02b1\101\u029d\141\u02b4\142\u02ae" +
    "\143\u02bc\144\u02b7\145\u02ad\146\u02bb\001\002\000\010\017" +
    "\u032a\033\u02d8\077\u02d9\001\002\000\004\020\u032b\001\002" +
    "\000\040\037\u029a\044\u028f\046\u0288\050\u0298\052\u028a\060" +
    "\u02a1\062\u02a0\064\u0295\071\u02a2\101\u029d\102\u029e\115\u028e" +
    "\121\u0294\131\u028d\141\u0297\001\002\000\004\021\u032d\001" +
    "\002\000\006\021\ufe8d\037\ufe8d\001\002\000\006\021\ufe99" +
    "\037\ufe99\001\002\000\040\037\u029a\044\u028f\046\u0288\050" +
    "\u0298\052\u028a\060\u02a1\062\u02a0\064\u0295\071\u02a2\101\u029d" +
    "\102\u029e\115\u028e\121\u0294\131\u028d\141\u0297\001\002\000" +
    "\004\021\u0331\001\002\000\006\021\ufe98\037\ufe98\001\002" +
    "\000\010\012\u0333\022\u0334\133\u0335\001\002\000\020\036" +
    "\ufeb9\042\ufeb9\057\ufeb9\070\ufeb9\071\ufeb9\117\ufeb9\130\ufeb9" +
    "\001\002\000\032\004\u02b0\005\u02b9\016\u02b3\071\u02a2\074" +
    "\u02b1\101\u029d\141\u02b4\142\u02ae\143\u02bc\144\u02b7\145\u02ad" +
    "\146\u02bb\001\002\000\032\004\u02b0\005\u02b9\016\u02b3\071" +
    "\u02a2\074\u02b1\101\u029d\141\u02b4\142\u02ae\143\u02bc\144\u02b7" +
    "\145\u02ad\146\u02bb\001\002\000\006\012\u0337\022\u0338\001" +
    "\002\000\020\036\ufeb7\042\ufeb7\057\ufeb7\070\ufeb7\071\ufeb7" +
    "\117\ufeb7\130\ufeb7\001\002\000\032\004\u02b0\005\u02b9\016" +
    "\u02b3\071\u02a2\074\u02b1\101\u029d\141\u02b4\142\u02ae\143\u02bc" +
    "\144\u02b7\145\u02ad\146\u02bb\001\002\000\010\023\u033a\033" +
    "\u02d8\077\u02d9\001\002\000\006\012\ufec8\022\ufec8\001\002" +
    "\000\010\012\u033c\033\u02d8\077\u02d9\001\002\000\020\036" +
    "\ufeb8\042\ufeb8\057\ufeb8\070\ufeb8\071\ufeb8\117\ufeb8\130\ufeb8" +
    "\001\002\000\010\023\u033e\033\u02d8\077\u02d9\001\002\000" +
    "\006\012\ufec7\022\ufec7\001\002\000\004\141\u0340\001\002" +
    "\000\006\034\u0344\141\u0342\001\002\000\006\012\u034d\014" +
    "\u034c\001\002\000\004\016\u0348\001\002\000\004\012\u0347" +
    "\001\002\000\004\022\u0334\001\002\000\006\012\u0346\022" +
    "\u0338\001\002\000\020\036\ufeb4\042\ufeb4\057\ufeb4\070\ufeb4" +
    "\071\ufeb4\117\ufeb4\130\ufeb4\001\002\000\006\012\ufeb2\014" +
    "\ufeb2\001\002\000\034\004\u02b0\005\u02b9\016\u02b3\017\u0349" +
    "\071\u02a2\074\u02b1\101\u029d\141\u02b4\142\u02ae\143\u02bc\144" +
    "\u02b7\145\u02ad\146\u02bb\001\002\000\006\012\ufeb1\014\ufeb1" +
    "\001\002\000\006\014\u02ee\017\u034b\001\002\000\006\012" +
    "\ufeb0\014\ufeb0\001\002\000\004\141\u0342\001\002\000\020" +
    "\036\ufeb5\042\ufeb5\057\ufeb5\070\ufeb5\071\ufeb5\117\ufeb5\130" +
    "\ufeb5\001\002\000\006\012\ufeb3\014\ufeb3\001\002\000\004" +
    "\141\u0350\001\002\000\004\133\u0351\001\002\000\032\004" +
    "\u02b0\005\u02b9\016\u02b3\071\u02a2\074\u02b1\101\u029d\141\u02b4" +
    "\142\u02ae\143\u02bc\144\u02b7\145\u02ad\146\u02bb\001\002\000" +
    "\010\012\u0353\033\u02d8\077\u02d9\001\002\000\022\036\ufebd" +
    "\042\ufebd\045\ufebd\057\ufebd\070\ufebd\071\ufebd\117\ufebd\130" +
    "\ufebd\001\002\000\004\142\u0355\001\002\000\024\036\ufebf" +
    "\042\ufebf\045\ufebf\057\ufebf\063\ufebf\070\ufebf\071\ufebf\117" +
    "\ufebf\130\ufebf\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0354\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\057\u013d\001\001\000\012\004\007\007\011" +
    "\010\010\047\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\u013c\001\001\000\010\005\u012e\006\u0130" +
    "\050\u012f\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\020\051\021\052\017\001\001\000\002\001\001" +
    "\000\004\011\u012a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\020\052\u0127\001\001" +
    "\000\002\001\001\000\004\012\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\037\001\001\000\010\011\u0101" +
    "\013\377\015\u0102\001\001\000\002\001\001\000\030\022" +
    "\061\027\046\030\052\032\047\034\060\041\044\042\062" +
    "\043\042\044\041\046\054\054\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\022\061\027\323" +
    "\030\324\033\325\041\044\042\062\043\042\044\041\046" +
    "\054\054\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\022\061\027\236\030\241\036\237" +
    "\041\044\042\062\043\042\044\041\046\054\054\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\022\061" +
    "\027\065\030\067\035\070\041\044\042\062\043\042\044" +
    "\041\046\054\054\057\001\001\000\002\001\001\000\030" +
    "\022\061\027\046\030\052\032\047\034\210\041\044\042" +
    "\062\043\042\044\041\046\054\054\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\101\017\104\020" +
    "\076\021\074\001\001\000\006\020\206\021\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\170\021\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\141\017\104\020\076\021\074\001\001\000" +
    "\012\016\111\017\104\020\076\021\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\137\017\104\020\076\021\074\001\001\000\012\016\133" +
    "\017\104\020\076\021\074\001\001\000\002\001\001\000" +
    "\012\016\135\017\104\020\076\021\074\001\001\000\002" +
    "\001\001\000\012\016\140\017\104\020\076\021\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\152\021\074\001\001\000\014\016\144\017" +
    "\104\020\076\021\074\023\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\151\017" +
    "\104\020\076\021\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\167\021\074\001\001\000\006\020\166\021\074\001\001" +
    "\000\006\020\165\021\074\001\001\000\006\020\164\021" +
    "\074\001\001\000\006\020\163\021\074\001\001\000\006" +
    "\020\162\021\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\205\021\074\001\001\000\006\020\204\021\074" +
    "\001\001\000\006\020\203\021\074\001\001\000\006\020" +
    "\202\021\074\001\001\000\006\020\201\021\074\001\001" +
    "\000\006\020\200\021\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\231\017" +
    "\104\020\076\021\074\001\001\000\012\016\217\017\104" +
    "\020\076\021\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\222\017\104\020\076\021\074\001\001" +
    "\000\002\001\001\000\026\022\061\027\065\030\067\035" +
    "\224\041\044\042\062\043\042\044\041\046\054\054\057" +
    "\001\001\000\002\001\001\000\012\016\226\017\104\020" +
    "\076\021\074\001\001\000\002\001\001\000\026\022\061" +
    "\027\065\030\067\035\230\041\044\042\062\043\042\044" +
    "\041\046\054\054\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\233\017\104\020\076\021\074\001" +
    "\001\000\002\001\001\000\026\022\061\027\065\030\067" +
    "\035\235\041\044\042\062\043\042\044\041\046\054\054" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\022\061\027\046\030\052\032\047\034" +
    "\242\041\044\042\062\043\042\044\041\046\054\054\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\022\061\027\252\031\254" +
    "\041\250\042\257\043\246\044\247\045\251\046\054\053" +
    "\253\054\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\022\061\027\046" +
    "\030\052\032\047\034\260\041\044\042\062\043\042\044" +
    "\041\046\054\054\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\266" +
    "\017\104\020\076\021\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\016\273\017\104\020\076\021\074" +
    "\024\272\055\271\001\001\000\014\016\273\017\104\020" +
    "\076\021\074\024\306\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\305\017\104\020\076\021\074\001" +
    "\001\000\026\022\061\027\277\030\301\037\276\041\044" +
    "\042\062\043\042\044\041\046\054\054\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\022\061\027\046" +
    "\030\052\032\047\034\302\041\044\042\062\043\042\044" +
    "\041\046\054\054\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\022\061\027\310\030\312" +
    "\040\313\041\044\042\062\043\042\044\041\046\054\054" +
    "\057\001\001\000\002\001\001\000\030\022\061\027\046" +
    "\030\052\032\047\034\316\041\044\042\062\043\042\044" +
    "\041\046\054\054\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\022\061\027\277\030\301" +
    "\037\321\041\044\042\062\043\042\044\041\046\054\054" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\022\061\027\323\030\324\033\326\041" +
    "\044\042\062\043\042\044\041\046\054\054\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\022\061\027" +
    "\323\030\324\033\331\041\044\042\062\043\042\044\041" +
    "\046\054\054\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\341\017\104\020\076\021\074\001\001" +
    "\000\012\016\340\017\104\020\076\021\074\001\001\000" +
    "\014\016\144\017\104\020\076\021\074\023\336\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\344\017\104\020\076\021\074\001\001\000\002\001" +
    "\001\000\012\016\357\017\104\020\076\021\074\001\001" +
    "\000\012\016\347\017\104\020\076\021\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\022\061\027\323\030\324\033\365\041\044\042\062" +
    "\043\042\044\041\046\054\054\057\001\001\000\002\001" +
    "\001\000\012\016\367\017\104\020\076\021\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\022\061\027\065\030\067\035\373\041\044\042\062" +
    "\043\042\044\041\046\054\054\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\022\061\027\065\030\067" +
    "\035\376\041\044\042\062\043\042\044\041\046\054\054" +
    "\057\001\001\000\002\001\001\000\006\011\u0101\015\u0123" +
    "\001\001\000\006\011\u0101\015\u0122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\u0101" +
    "\015\u0105\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\012\u0115\016\u0117\017\104\020\076\021\074\025\u0116" +
    "\001\001\000\004\012\u010a\001\001\000\004\026\u010b\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\u010d" +
    "\017\104\020\076\021\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\u0110\017\104\020\076\021\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u0113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\u011a\001\001\000\002\001\001\000\004" +
    "\012\u011c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\u0120\017\104\020\076\021\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\u0101" +
    "\015\u0126\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\u0129\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u012c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\u0131" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\020\051\u0134\052\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\u0137\001\001\000\002\001\001\000" +
    "\030\022\061\027\046\030\052\032\047\034\u0139\041\044" +
    "\042\062\043\042\044\041\046\054\054\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\141\u0272\001\001\000\004\060\u013f\001" +
    "\001\000\004\061\u0140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\u0145\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\u0147\001\001" +
    "\000\006\062\u0148\065\u014a\001\001\000\004\077\u0150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\056\u0162\100" +
    "\u0160\001\001\000\006\056\u0162\100\u026a\001\001\000\002" +
    "\001\001\000\006\056\u0162\100\u0262\001\001\000\006\056" +
    "\u0162\100\u0261\001\001\000\006\056\u0162\100\u0260\001\001" +
    "\000\006\056\u0162\100\u025f\001\001\000\002\001\001\000" +
    "\004\076\u0157\001\001\000\002\001\001\000\012\067\u015a" +
    "\070\u015d\077\u015b\101\u0159\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\056\u0162\100\u0160" +
    "\001\001\000\002\001\001\000\006\077\u015b\101\u015f\001" +
    "\001\000\002\001\001\000\004\056\u0164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\071\u0173" +
    "\072\u016c\074\u017d\075\u017a\077\u0174\102\u016f\103\u0181\104" +
    "\u017c\105\u0178\110\u0177\112\u017e\122\u0182\125\u017b\126\u0183" +
    "\127\u0176\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\113\u019d\114\u01a5\115\u019b\116\u0258\117\u019f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\056\u0162\100\u0160\121\u021a\123\u0219\001\001\000\002" +
    "\001\001\000\004\123\u01f3\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\072\u01fe\074\u017d\075\u017a\077\u0174" +
    "\102\u016f\103\u0181\104\u017c\105\u0178\110\u0177\112\u017e\122" +
    "\u0182\125\u017b\126\u0183\127\u0176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\123\u0186\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\113\u019d" +
    "\114\u01a5\115\u019b\116\u0193\117\u019f\120\u01e8\001\001\000" +
    "\004\124\u018a\001\001\000\004\121\u018c\001\001\000\004" +
    "\123\u018b\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\113\u019d\114\u01a5\115\u019b\116\u01e5\117\u019f\001\001" +
    "\000\016\113\u019d\114\u01a5\115\u019b\116\u0193\117\u019f\120" +
    "\u0199\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\113\u019d\114\u01e2\117\u019f\001\001\000" +
    "\002\001\001\000\004\121\u01e1\001\001\000\014\113\u019d" +
    "\114\u01a5\115\u019b\116\u01e0\117\u019f\001\001\000\002\001" +
    "\001\000\014\113\u019d\114\u01a5\115\u019b\116\u01dc\117\u019f" +
    "\001\001\000\006\121\u01d4\123\u01d3\001\001\000\002\001" +
    "\001\000\004\123\u01cd\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\113\u019d\114\u01cc\117" +
    "\u019f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\123\u01be\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\113\u019d\114\u01bd" +
    "\117\u019f\001\001\000\010\113\u019d\114\u01bc\117\u019f\001" +
    "\001\000\010\113\u019d\114\u01bb\117\u019f\001\001\000\010" +
    "\113\u019d\114\u01ba\117\u019f\001\001\000\010\113\u019d\114" +
    "\u01b9\117\u019f\001\001\000\010\113\u019d\114\u01b8\117\u019f" +
    "\001\001\000\010\113\u019d\114\u01b7\117\u019f\001\001\000" +
    "\010\113\u019d\114\u01b6\117\u019f\001\001\000\010\113\u019d" +
    "\114\u01b5\117\u019f\001\001\000\010\113\u019d\114\u01b4\117" +
    "\u019f\001\001\000\010\113\u019d\114\u01b3\117\u019f\001\001" +
    "\000\010\113\u019d\114\u01b2\117\u019f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\113\u019d" +
    "\114\u01a5\115\u019b\116\u0193\117\u019f\120\u01c4\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\113\u019d\114\u01a5" +
    "\115\u019b\116\u01c7\117\u019f\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\113\u019d\114\u01a5\115\u019b\116\u01cb" +
    "\117\u019f\001\001\000\014\113\u019d\114\u01a5\115\u019b\116" +
    "\u01ca\117\u019f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\u01cf\001" +
    "\001\000\002\001\001\000\014\113\u019d\114\u01a5\115\u019b" +
    "\116\u01d1\117\u019f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\123\u01db\001\001\000\016" +
    "\113\u019d\114\u01a5\115\u019b\116\u0193\117\u019f\120\u01d7\001" +
    "\001\000\004\123\u01da\001\001\000\002\001\001\000\004" +
    "\123\u01d9\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\113\u019d\114\u01a5" +
    "\115\u019b\116\u01eb\117\u019f\001\001\000\002\001\001\000" +
    "\014\073\u01ee\077\u0174\112\u01ef\125\u01f2\126\u01f1\001\001" +
    "\000\004\123\u0186\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\123\u01f3\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\113\u019d\114\u01a5\115" +
    "\u019b\116\u01f5\117\u019f\001\001\000\002\001\001\000\014" +
    "\113\u019d\114\u01a5\115\u019b\116\u01f7\117\u019f\001\001\000" +
    "\002\001\001\000\014\073\u01f9\077\u0174\112\u01ef\125\u01f2" +
    "\126\u01f1\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\071\u01fc\072\u016c\074\u017d\075\u017a\077\u0174\102\u016f" +
    "\103\u0181\104\u017c\105\u0178\110\u0177\112\u017e\122\u0182\125" +
    "\u017b\126\u0183\127\u0176\001\001\000\036\072\u01fe\074\u017d" +
    "\075\u017a\077\u0174\102\u016f\103\u0181\104\u017c\105\u0178\110" +
    "\u0177\112\u017e\122\u0182\125\u017b\126\u0183\127\u0176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\113\u019d\114\u01a5" +
    "\115\u019b\116\u0193\117\u019f\120\u0203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\113\u019d\114\u01a5\115\u019b\116\u0208\117\u019f\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\113\u019d" +
    "\114\u01a5\115\u019b\116\u0193\117\u019f\120\u020b\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\071\u020e\072\u016c" +
    "\074\u017d\075\u017a\077\u0174\102\u016f\103\u0181\104\u017c\105" +
    "\u0178\110\u0177\112\u017e\122\u0182\125\u017b\126\u0183\127\u0176" +
    "\001\001\000\036\072\u01fe\074\u017d\075\u017a\077\u0174\102" +
    "\u016f\103\u0181\104\u017c\105\u0178\110\u0177\112\u017e\122\u0182" +
    "\125\u017b\126\u0183\127\u0176\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\113\u019d\114\u01a5\115\u019b\116\u0212" +
    "\117\u019f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\113\u019d\114\u01a5\115\u019b\116\u0193" +
    "\117\u019f\120\u0217\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\123\u0234" +
    "\001\001\000\014\113\u019d\114\u01a5\115\u019b\116\u0233\117" +
    "\u019f\001\001\000\014\113\u019d\114\u01a5\115\u019b\116\u01e5" +
    "\117\u019f\001\001\000\016\113\u019d\114\u01a5\115\u019b\116" +
    "\u0193\117\u019f\120\u021f\001\001\000\006\121\u022b\123\u022a" +
    "\001\001\000\002\001\001\000\006\121\u0222\123\u0221\001" +
    "\001\000\002\001\001\000\004\123\u0223\001\001\000\002" +
    "\001\001\000\014\113\u019d\114\u01a5\115\u019b\116\u0225\117" +
    "\u019f\001\001\000\002\001\001\000\014\113\u019d\114\u01a5" +
    "\115\u019b\116\u0227\117\u019f\001\001\000\002\001\001\000" +
    "\014\113\u019d\114\u01a5\115\u019b\116\u0229\117\u019f\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\123\u022c\001" +
    "\001\000\002\001\001\000\014\113\u019d\114\u01a5\115\u019b" +
    "\116\u022e\117\u019f\001\001\000\002\001\001\000\014\113" +
    "\u019d\114\u01a5\115\u019b\116\u0230\117\u019f\001\001\000\002" +
    "\001\001\000\014\113\u019d\114\u01a5\115\u019b\116\u0232\117" +
    "\u019f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\113\u019d\114\u01a5\115\u019b\116\u0236\117" +
    "\u019f\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\113\u019d\114\u01a5\115\u019b\116\u0239\117\u019f\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\113\u019d\114\u01a5" +
    "\115\u019b\116\u023c\117\u019f\001\001\000\002\001\001\000" +
    "\014\113\u019d\114\u01a5\115\u019b\116\u023e\117\u019f\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\071\u0241\072" +
    "\u016c\074\u017d\075\u017a\077\u0174\102\u016f\103\u0181\104\u017c" +
    "\105\u0178\110\u0177\112\u017e\122\u0182\125\u017b\126\u0183\127" +
    "\u0176\001\001\000\036\072\u01fe\074\u017d\075\u017a\077\u0174" +
    "\102\u016f\103\u0181\104\u017c\105\u0178\110\u0177\112\u017e\122" +
    "\u0182\125\u017b\126\u0183\127\u0176\001\001\000\004\111\u0243" +
    "\001\001\000\002\001\001\000\004\110\u0246\001\001\000" +
    "\040\071\u0247\072\u016c\074\u017d\075\u017a\077\u0174\102\u016f" +
    "\103\u0181\104\u017c\105\u0178\110\u0177\112\u017e\122\u0182\125" +
    "\u017b\126\u0183\127\u0176\001\001\000\002\001\001\000\036" +
    "\072\u01fe\074\u017d\075\u017a\077\u0174\102\u016f\103\u0181\104" +
    "\u017c\105\u0178\110\u0177\112\u017e\122\u0182\125\u017b\126\u0183" +
    "\127\u0176\001\001\000\002\001\001\000\014\113\u019d\114" +
    "\u01a5\115\u019b\116\u024a\117\u019f\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\106\u0250\107\u024e\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\113\u019d\114\u01a5" +
    "\115\u019b\116\u0253\117\u019f\001\001\000\004\107\u0251\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\071\u0255\072\u016c\074\u017d\075\u017a\077\u0174\102" +
    "\u016f\103\u0181\104\u017c\105\u0178\110\u0177\112\u017e\122\u0182" +
    "\125\u017b\126\u0183\127\u0176\001\001\000\036\072\u01fe\074" +
    "\u017d\075\u017a\077\u0174\102\u016f\103\u0181\104\u017c\105\u0178" +
    "\110\u0177\112\u017e\122\u0182\125\u017b\126\u0183\127\u0176\001" +
    "\001\000\040\071\u0257\072\u016c\074\u017d\075\u017a\077\u0174" +
    "\102\u016f\103\u0181\104\u017c\105\u0178\110\u0177\112\u017e\122" +
    "\u0182\125\u017b\126\u0183\127\u0176\001\001\000\036\072\u01fe" +
    "\074\u017d\075\u017a\077\u0174\102\u016f\103\u0181\104\u017c\105" +
    "\u0178\110\u0177\112\u017e\122\u0182\125\u017b\126\u0183\127\u0176" +
    "\001\001\000\002\001\001\000\014\113\u019d\114\u01a5\115" +
    "\u019b\116\u025a\117\u019f\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\071\u025d\072\u016c\074\u017d\075\u017a\077" +
    "\u0174\102\u016f\103\u0181\104\u017c\105\u0178\110\u0177\112\u017e" +
    "\122\u0182\125\u017b\126\u0183\127\u0176\001\001\000\036\072" +
    "\u01fe\074\u017d\075\u017a\077\u0174\102\u016f\103\u0181\104\u017c" +
    "\105\u0178\110\u0177\112\u017e\122\u0182\125\u017b\126\u0183\127" +
    "\u0176\001\001\000\002\001\001\000\004\056\u0164\001\001" +
    "\000\004\056\u0164\001\001\000\004\056\u0164\001\001\000" +
    "\004\056\u0164\001\001\000\006\066\u0266\076\u0265\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\113\u019d\114\u01a5\115\u019b\116\u0268\117\u019f\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\u0164\001" +
    "\001\000\012\067\u026c\070\u015d\077\u015b\101\u0159\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\071\u026f\072" +
    "\u016c\074\u017d\075\u017a\077\u0174\102\u016f\103\u0181\104\u017c" +
    "\105\u0178\110\u0177\112\u017e\122\u0182\125\u017b\126\u0183\127" +
    "\u0176\001\001\000\036\072\u01fe\074\u017d\075\u017a\077\u0174" +
    "\102\u016f\103\u0181\104\u017c\105\u0178\110\u0177\112\u017e\122" +
    "\u0182\125\u017b\126\u0183\127\u0176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\143\u0274\001" +
    "\001\000\004\163\u0276\001\001\000\002\001\001\000\004" +
    "\164\u0278\001\001\000\004\142\u034e\001\001\000\010\142" +
    "\u027b\165\u0281\166\u0280\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\132\u028f\133\u0298" +
    "\134\u0292\135\u028a\136\u0290\137\u0291\140\u029e\147\u02a2\150" +
    "\u028b\151\u0295\152\u0288\155\u029a\156\u029b\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\135\u032d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\123\u02a5\001\001\000\002\001\001\000\012\137\u02aa" +
    "\140\u02a9\156\u02a7\157\u02a8\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\137\u02b1\144\u02ae\145\u02b5\146\u02b4\156\u02b7\162\u02b9\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\137\u02b1\146\u02dc\156\u02b7\162\u02b9\001\001\000" +
    "\014\113\u019d\114\u01a5\115\u019b\116\u02db\117\u019f\001\001" +
    "\000\002\001\001\000\016\137\u02b1\144\u02d5\145\u02b5\146" +
    "\u02b4\156\u02b7\162\u02b9\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\137\u02b1\146\u02bc\156\u02b7\162\u02b9\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\137\u02b1\146\u02c8\156\u02b7\162\u02b9" +
    "\001\001\000\012\137\u02b1\146\u02c7\156\u02b7\162\u02b9\001" +
    "\001\000\012\137\u02b1\146\u02c6\156\u02b7\162\u02b9\001\001" +
    "\000\012\137\u02b1\146\u02c5\156\u02b7\162\u02b9\001\001\000" +
    "\012\137\u02b1\146\u02c4\156\u02b7\162\u02b9\001\001\000\012" +
    "\137\u02b1\146\u02c3\156\u02b7\162\u02b9\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\137\u02b1\146" +
    "\u02d4\156\u02b7\162\u02b9\001\001\000\012\137\u02b1\146\u02d3" +
    "\156\u02b7\162\u02b9\001\001\000\012\137\u02b1\146\u02d2\156" +
    "\u02b7\162\u02b9\001\001\000\012\137\u02b1\146\u02d1\156\u02b7" +
    "\162\u02b9\001\001\000\012\137\u02b1\146\u02d0\156\u02b7\162" +
    "\u02b9\001\001\000\012\137\u02b1\146\u02cf\156\u02b7\162\u02b9" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\137\u02b1\144" +
    "\u02da\145\u02b5\146\u02b4\156\u02b7\162\u02b9\001\001\000\016" +
    "\137\u02b1\144\u02d9\145\u02b5\146\u02b4\156\u02b7\162\u02b9\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\137\u02b1\144\u02de\145\u02b5\146" +
    "\u02b4\156\u02b7\162\u02b9\001\001\000\002\001\001\000\012" +
    "\137\u02aa\140\u02a9\156\u02a7\157\u02e0\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\132\u028f\133\u0298\134\u0292" +
    "\135\u028a\136\u0290\137\u0291\140\u029e\147\u02a2\150\u028b\151" +
    "\u0295\152\u0288\155\u02e3\156\u029b\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\137\u02b1\144\u02e6\145\u02b5\146" +
    "\u02b4\156\u02b7\162\u02b9\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\137" +
    "\u02b1\144\u02eb\145\u02b5\146\u02b4\156\u02b7\161\u02ec\162\u02b9" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\137" +
    "\u02b1\144\u02ef\145\u02b5\146\u02b4\156\u02b7\162\u02b9\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\137\u02b1\144\u02eb\145\u02b5\146\u02b4" +
    "\156\u02b7\161\u02f4\162\u02b9\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\132\u028f\133\u0298\134" +
    "\u0292\135\u028a\136\u0290\137\u0291\140\u029e\147\u02a2\150\u028b" +
    "\151\u0295\152\u0288\155\u02fa\156\u029b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\137\u02b1" +
    "\144\u02fe\145\u02b5\146\u02b4\156\u02b7\162\u02b9\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\137\u02b1\144\u0302\145\u02b5\146\u02b4\156\u02b7\162\u02b9\001" +
    "\001\000\002\001\001\000\016\137\u02b1\144\u0304\145\u02b5" +
    "\146\u02b4\156\u02b7\162\u02b9\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\132\u028f\133\u0298\134\u0292\135\u028a" +
    "\136\u0290\137\u0291\140\u029e\147\u02a2\150\u028b\151\u0295\152" +
    "\u0288\155\u0307\156\u029b\001\001\000\002\001\001\000\004" +
    "\136\u0309\001\001\000\002\001\001\000\016\137\u02b1\144" +
    "\u030b\145\u02b5\146\u02b4\156\u02b7\162\u02b9\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\153\u0310\154\u030f\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\154\u0317" +
    "\001\001\000\016\137\u02b1\144\u0312\145\u02b5\146\u02b4\156" +
    "\u02b7\162\u02b9\001\001\000\002\001\001\000\034\132\u028f" +
    "\133\u0298\134\u0292\135\u028a\136\u0290\137\u0291\140\u029e\147" +
    "\u02a2\150\u028b\151\u0295\152\u0288\155\u0314\156\u029b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\132\u028f\133\u0298" +
    "\134\u0292\135\u028a\136\u0290\137\u0291\140\u029e\147\u02a2\150" +
    "\u028b\151\u0295\152\u0288\155\u031a\156\u029b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\137\u02b1\144\u0328\145\u02b5\146\u02b4\156\u02b7\162\u02b9\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\132\u028f" +
    "\133\u0298\134\u0292\135\u028a\136\u0290\137\u0291\140\u029e\147" +
    "\u02a2\150\u028b\151\u0295\152\u0288\155\u032b\156\u029b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\132\u028f\133\u0298\134\u0292\135\u028a\136\u0290\137\u0291" +
    "\140\u029e\147\u02a2\150\u028b\151\u0295\152\u0288\155\u032f\156" +
    "\u029b\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\160\u0335\001\001\000\002\001\001\000\016\137\u02b1\144" +
    "\u033c\145\u02b5\146\u02b4\156\u02b7\162\u02b9\001\001\000\016" +
    "\137\u02b1\144\u033a\145\u02b5\146\u02b4\156\u02b7\162\u02b9\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\137\u02b1" +
    "\144\u0338\145\u02b5\146\u02b4\156\u02b7\162\u02b9\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\130\u0340\131\u0342\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\160\u0344\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\137\u02b1\144\u02eb\145\u02b5\146\u02b4\156\u02b7\161" +
    "\u0349\162\u02b9\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\131\u034d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\137\u02b1\144\u0351\145\u02b5\146\u02b4\156\u02b7\162" +
    "\u02b9\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //fields
    Lexer lex;
    private List<String> syntaxErrors;
    private GenTypeTab genTypeTab;
    private AstGen astGen;
    private Analyzator analyzator;

    //conect the parser with the lexer
    public Parser(Lexer lex, Analyzator analyzator){
        super(lex);
        syntaxErrors = new LinkedList<>();
        genTypeTab = new GenTypeTab();
        astGen = new AstGen();
        this.analyzator = analyzator;
    }

    //getters
    public Lexer getLexer(){
        return this.lex;
    }
    public List<String> getSyntaxErrors(){
        return this.syntaxErrors;
    }
    
    /*SOBREESCRIBIR LOS METODOS DE ERROR*/
    public void syntax_error(Symbol cur_token) {
        StringBuilder mssBuilder = new StringBuilder("Simbolo: ");
        mssBuilder.append(symbl_name_from_id(cur_token.sym));
        
        if(cur_token.value != null){
            mssBuilder.append(", lexema <");
            mssBuilder.append(cur_token.value.toString());
            mssBuilder.append(">");
        }
        mssBuilder.append(", linea: ");
        mssBuilder.append(cur_token.left);
        mssBuilder.append(", columna: ");
        mssBuilder.append(cur_token.right);
        
        if (expected_token_ids().isEmpty()) {
            mssBuilder.append(" -- ya no se esperaba ningun simbolo");
        } else {
            mssBuilder.append(" -- Se esperaba [");
            for (Integer expected_token_id : expected_token_ids()) {
                if(!symbl_name_from_id(expected_token_id).equals("error")){
                    mssBuilder.append(symbl_name_from_id(expected_token_id));
                    mssBuilder.append(" ");
                }
                
            }
            mssBuilder.append("]");
        }
        syntaxErrors.add(mssBuilder.toString());
    }
    
    public void report_error(String message, Object info){
        try{
            Symbol cur_token = (Symbol) info;
            StringBuilder mssBuilder = new StringBuilder("Simbolo: ");
            mssBuilder.append(symbl_name_from_id(cur_token.sym));
            mssBuilder.append(", linea: ");
            mssBuilder.append(cur_token.left);
            mssBuilder.append(", columna: ");
            mssBuilder.append(cur_token.right);
            if(cur_token != null){
                mssBuilder.append(", Lexema: ");
                mssBuilder.append(cur_token.value);
            }

            if(message != null){
                mssBuilder.append(", Info: ");
                mssBuilder.append(message);
            }
            
            syntaxErrors.add(mssBuilder.toString());
        } catch (Exception e){
            syntaxErrors.add(message);
        }
    }


    public void unrecovered_syntax_error(Symbol cur_token) {
        syntaxErrors.add("Errores de sintaxis severos detectados, revisa municiosamente el codigo");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= pascal_block java_block main_program 
            {
              Object RESULT =null;
		int pbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DefAst> pb = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int jbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int jbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JClass> jb = (List<JClass>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CMain cb = (CMain)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                analyzator.pascalSemanticAnalysis(pb);
                analyzator.javaSemanticAnalysis(jb);
                analyzator.mainCSemanticAnalysis(cb);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // pascal_block ::= PASCAL_SECTION pcontent 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pascal_block",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // pcontent ::= functions_b procedure_b 
            {
              List<DefAst> RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> lf = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> lp = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(lf != null && lp != null){
                    lf.addAll(lp);
                    RESULT = lf;
                } else if (lf != null){
                    RESULT = lf;
                } else if (lp != null){
                    RESULT = lp;
                } else {
                    RESULT = new LinkedList<>();
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pcontent",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // var_type ::= INT_TKN 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.IntegerPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // var_type ::= FLOAT_TKN 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.RealPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_type ::= BOOLEAN_TKN 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.BooleanPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_type ::= CHAR_TKN 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.CharPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_type ::= STRING_TKN 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            PrimitiveType.StringPT.getName(), 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_type ::= ID 
            {
              Label RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = new Label(
                            t, 
                            new Position(tleft, tright)
                        ); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_type ::= error 
            {
              Label RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // id_list ::= id_list COMMA ID 
            {
              List<Label> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(l != null){
                            l.add(new Label(i, new Position(ileft, iright)));
                        } else {
                            l = new ArrayList<>();
                        }
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // id_list ::= ID 
            {
              List<Label> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        List<Label> list = new ArrayList<>();
                        list.add(new Label(i, new Position(ileft, iright)));
                        RESULT = list;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // range ::= expression DOT DOT DOT expression 
            {
              Range RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Range(e1, e2);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("range",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arr_range ::= LBRACK expression DOT DOT expression RBRACK 
            {
              Range RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                         RESULT = new Range(e1, e2);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr_range",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression_list ::= expression_list COMMA expression 
            {
              List<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(l != null){
                            l.add(e);
                        } else {
                            l = new LinkedList<>();
                        }
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression_list ::= expression 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        LinkedList<Expression> list = new LinkedList<Expression>();
                        list.add(e);
                        RESULT = list;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_b ::= VAR list_vardec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_b",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_b ::= 
            {
              List<DefAst> RESULT =null;
		
                        RESULT = new LinkedList<DefAst>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_b",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // list_vardec ::= list_vardec var_dec SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> dl = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        try{
                            l.addAll(dl);
                        } catch (NullPointerException e){}    
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // list_vardec ::= var_dec SEMICOLON 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // list_vardec ::= list_vardec var_dec error var_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DefAst> dl = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        try{
                            l.addAll(dl);
                        } catch (NullPointerException e){}    
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // list_vardec ::= error var_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // list_vardec ::= var_dec error var_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_vardec",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // var_dec ::= id_list COLON var_type 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = genTypeTab.userDef(l, t);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // var_dec ::= id_list COLON ARRAY arr_range OF var_type 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = genTypeTab.arrayDef(l, t, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // var_dec ::= id_list error var_type 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = genTypeTab.userDef(l, t);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var_dec ::= id_list error range 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = genTypeTab.rangeDef(l, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var_dec ::= id_list error ARRAY arr_range OF var_type 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = genTypeTab.arrayDef(l, t, r);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.And, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= expression AND THEN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.AndThen, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Or, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= expression OR ELSE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.OrElse, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= NOT expression 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Not,
                            e,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= bool_exp 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bool_exp ::= arit_exp EQUALS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.EqualsTo, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bool_exp ::= arit_exp DIFFERENT arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.DifferentTo, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bool_exp ::= arit_exp GRATER arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.GraterThan, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bool_exp ::= arit_exp LESS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.LessThan, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bool_exp ::= arit_exp GRATER_EQUALS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.GraterEq, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bool_exp ::= arit_exp LESS_EQUALS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.LessEq, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bool_exp ::= arit_exp 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arit_exp ::= error PLUS error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arit_exp ::= error MINUS error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arit_exp ::= error TIMES error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arit_exp ::= error DIV error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arit_exp ::= error BARRA error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arit_exp ::= error MOD error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arit_exp ::= arit_exp PLUS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Addition, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arit_exp ::= arit_exp MINUS arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Substraction, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arit_exp ::= arit_exp TIMES arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Multiplication, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arit_exp ::= arit_exp DIV arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Division, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arit_exp ::= arit_exp MOD arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Module, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arit_exp ::= arit_exp POWER arit_exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new Operation(
                            DefiniteOperation.Power, e1, e2,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arit_exp ::= literals 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arit_exp ::= ID LBRACK arit_exp RBRACK 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new VectorUse(
                            i, e, new Position(ileft, iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arit_exp ::= ID LPAREN expression_list RPAREN 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new FunctionUse(
                            i, l, new Position(ileft, iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arit_exp ::= ID LPAREN RPAREN 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        RESULT = new FunctionUse(
                            i, new Position(ileft, iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arit_exp ::= ID 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            i, new Position(ileft,iright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arit_exp ::= LPAREN expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = e;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // arit_exp ::= PLUS arit_exp 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Addition,
                            e,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arit_exp ::= MINUS arit_exp 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new UnaryOperation(
                            DefiniteOperation.Substraction,
                            e,
                            new Position(oleft, oright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arit_exp ::= LPAREN error RPAREN 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arit_exp ::= MINUS error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arit_exp ::= PLUS error 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arit_exp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // literals ::= BOOLEAN_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		boolean l = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.BooleanPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // literals ::= INTEGER_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.IntegerPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // literals ::= FLOAT_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		float l = (float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.RealPT, 
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // literals ::= CHAR_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character l = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.CharPT, 
                            l,
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // literals ::= STRING_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new SingleExp(
                            PrimitiveType.StringPT, 
                            new Position(lleft, lright)
                        );
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literals",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // conditional ::= if_stmt block_cond 
            {
              PassIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InitIf i = (InitIf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new PassIf(new IfAst(
                        i.getExpression(), 
                        ls, 
                        i.getPosition()
                    ));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // conditional ::= if_stmt block_cond SEMICOLON 
            {
              PassIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		InitIf i = (InitIf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new PassIf(new IfAst(
                        i.getExpression(), 
                        ls,
                        i.getPosition()
                    ));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // conditional ::= if_stmt block_cond ELSE elif 
            {
              PassIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		InitIf i = (InitIf)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PassIf pi = (PassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    if(pi.getElseAst() != null && pi.getElseAst().getInitPos() == null){
                        pi.getElseAst().setInitPos(
                            new Position(eleft, eright)
                        );
                    }
                    RESULT = astGen.genPassIf(
                        pi, 
                        new IfAst(i.getExpression(), ls, i.getPosition())
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // if_stmt ::= IF LPAREN expression RPAREN THEN 
            {
              InitIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                    RESULT = new InitIf(e, new Position(ileft, iright));     
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // if_stmt ::= IF LPAREN error RPAREN THEN 
            {
              InitIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		  
                    RESULT = new InitIf(null, new Position(ileft, iright));     
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // if_stmt ::= IF LPAREN expression error THEN 
            {
              InitIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                    RESULT = new InitIf(e, new Position(ileft, iright));     
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // if_stmt ::= IF error expression RPAREN THEN 
            {
              InitIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                    RESULT = new InitIf(e, new Position(ileft, iright));     
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // if_stmt ::= IF error expression error THEN 
            {
              InitIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                    RESULT = new InitIf(e, new Position(ileft, iright));     
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // block_cond ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_cond",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // block_cond ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_cond",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // block_cond ::= BEGIN block_stmt END 
            {
              List<Statement> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = ls;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_cond",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // elif ::= else_block SEMICOLON 
            {
              PassIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ElseAst e = (ElseAst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new PassIf(e);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // elif ::= conditional 
            {
              PassIf RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PassIf pi = (PassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = pi;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // else_block ::= complex_else 
            {
              ElseAst RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT = new ElseAst(astGen.oneStmtInList(s)); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_block",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // else_block ::= simple_stmt 
            {
              ElseAst RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new ElseAst(astGen.oneStmtInList(s)); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_block",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // else_block ::= BEGIN block_stmt END 
            {
              ElseAst RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new ElseAst(ls);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_block",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // complex_else ::= case_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseAst s = (CaseAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // complex_else ::= while_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileAst s = (WhileAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // complex_else ::= for_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForAst s = (ForAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // complex_else ::= repeat_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RepeatAst s = (RepeatAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_else",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // case_stmt ::= CASE LPAREN expression RPAREN OF case_block ELSE case_else_stmts END SEMICOLON 
            {
              CaseAst RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int lscleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lscright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<SimpleCase> lsc = (List<SimpleCase>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = new CaseAst(e, lsc, new ElseAst(ls), new Position(cleft, cright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // case_block ::= case_block labels COLON case_stmts SEMICOLON 
            {
              List<SimpleCase> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<SimpleCase> l = (List<SimpleCase>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int labsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int labsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Expression> labs = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    if(l != null){
                        l.add(new SimpleCase(labs, ls));
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_block",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // case_block ::= labels COLON case_stmts SEMICOLON 
            {
              List<SimpleCase> RESULT =null;
		int labsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int labsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Expression> labs = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.genSimpleCaseList(labs, ls);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_block",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // labels ::= labels COMMA expression 
            {
              List<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(e);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labels",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // labels ::= expression 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    LinkedList<Expression> list = new LinkedList<>();
                    list.add(e);
                    RESULT = list;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labels",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // case_stmts ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmts",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // case_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmts",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // case_stmts ::= BEGIN block_stmt END 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_stmts",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // case_else_stmts ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // case_else_stmts ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // case_else_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // case_else_stmts ::= BEGIN block_stmt 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		      
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_else_stmts",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // while_stmt ::= WHILE LPAREN expression RPAREN DO statements 
            {
              WhileAst RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new WhileAst(e, l, new Position(wleft, wright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // while_stmt ::= WHILE LPAREN error RPAREN DO statements 
            {
              WhileAst RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new WhileAst(null, l, new Position(wleft, wright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // for_stmt ::= FOR ID ASSIGNATION expression TO expression DO statements 
            {
              ForAst RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Range range = new Range(e1, e2);
                    Label variable = new Label(i, new Position(ileft, iright));
                    RESULT = new ForAst(variable, range, l, new Position(fleft, fright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // for_stmt ::= FOR ID ASSIGNATION error TO expression DO statements 
            {
              ForAst RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Range range = new Range(null, e2);
                    Label variable = new Label(i, new Position(ileft, iright));
                    RESULT = new ForAst(variable, range, l, new Position(fleft, fright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // for_stmt ::= FOR ID error expression TO expression DO statements 
            {
              ForAst RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Range range = new Range(e1, e2);
                    Label variable = new Label(i, new Position(ileft, iright));
                    RESULT = new ForAst(variable, range, l, new Position(fleft, fright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // repeat_stmt ::= REPEAT statements UNTIL expression 
            {
              RepeatAst RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new RepeatAst(e, l, new Position(rleft, rright));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // statements ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // statements ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // statements ::= BEGIN block_stmt END SEMICOLON 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // block_stmt ::= list_stmts 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // block_stmt ::= 
            {
              List<Statement> RESULT =null;
		
                    RESULT = new LinkedList<Statement>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_stmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // list_stmts ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // list_stmts ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // list_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // list_stmts ::= simple_stmt SEMICOLON more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // list_stmts ::= complex_stmt more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_stmts",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // more_stmts ::= simple_stmt error 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // more_stmts ::= simple_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // more_stmts ::= simple_stmt SEMICOLON 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // more_stmts ::= simple_stmt SEMICOLON more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // more_stmts ::= complex_stmt more_stmts 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(0, s);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // more_stmts ::= complex_stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.oneStmtInList(s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_stmts",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // simple_stmt ::= BREAK 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT = new SimpleStmt(
                        SimpleStmt.BREAK, 
                        new Position(bleft, bright)
                    );  
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // simple_stmt ::= CONTINUE 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT = new SimpleStmt(
                        SimpleStmt.CONTINUE,
                        new Position(cleft, cright)
                    );  
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // simple_stmt ::= ID ASSIGNATION expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT = new Assignation(
                        new Label(i, new Position(ileft, iright)), e
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // simple_stmt ::= ID LPAREN expression_list RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new FunctionUseStmt(
                        new Label(i, new Position(ileft, iright)),
                        el
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // simple_stmt ::= ID LPAREN RPAREN 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = new FunctionUseStmt(
                        new Label(i, new Position(ileft, iright)),
                        new LinkedList<>()
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // simple_stmt ::= ID LBRACK expression RBRACK ASSIGNATION expression 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new ArrayAssign(
                        new Label(i, new Position(ileft, iright)),
                        e1,
                        e2
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // simple_stmt ::= definite_fun 
            {
              Statement RESULT =null;
		int fuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int furight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionUseStmt fu = (FunctionUseStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fu; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // simple_stmt ::= error 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // complex_stmt ::= conditional 
            {
              Statement RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PassIf pi = (PassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    RESULT =  astGen.transformPassIf(pi); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // complex_stmt ::= case_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseAst s = (CaseAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // complex_stmt ::= while_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileAst s = (WhileAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // complex_stmt ::= for_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForAst s = (ForAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // complex_stmt ::= repeat_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RepeatAst s = (RepeatAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("complex_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // functions_b ::= functions 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_b",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // functions_b ::= 
            {
              List<DefAst> RESULT =null;
		
                    RESULT = new LinkedList<>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_b",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // functions ::= functions function_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDec d = (FunctionDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(d);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // functions ::= function_dec 
            {
              List<DefAst> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDec d = (FunctionDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    LinkedList<DefAst> list = new LinkedList<>();
                    list.add(d);
                    RESULT = list;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // function_dec ::= FUNCTION ID LPAREN arguments RPAREN COLON var_type SEMICOLON var_b BEGIN block_stmt END SEMICOLON 
            {
              FunctionDec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		List<Argument> a = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<DefAst> lv = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
                    RESULT = new FunctionDec(
                        new Label(i, new Position(ileft, iright)),
                        t, a, lv, ls
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_dec",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // procedure_b ::= procedures 
            {
              List<DefAst> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<DefAst> p = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = p;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_b",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // procedure_b ::= 
            {
              List<DefAst> RESULT =null;
		  
                    RESULT = new LinkedList<>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_b",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // procedures ::= procedures procedure_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProcedureDec d = (ProcedureDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(l != null){
                        l.add(d);
                    } else {
                        l = new LinkedList<>();
                    }
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // procedures ::= procedure_dec 
            {
              List<DefAst> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProcedureDec d = (ProcedureDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    LinkedList<DefAst> list = new LinkedList<>();
                    list.add(d);
                    RESULT = list;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedures",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // procedure_dec ::= PROCEDURE ID LPAREN arguments RPAREN SEMICOLON var_b BEGIN block_stmt END SEMICOLON 
            {
              ProcedureDec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		List<Argument> a = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<DefAst> lv = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = new ProcedureDec(
                        new Label(i, new Position(ileft, iright)),
                        a, lv, ls
                    );
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_dec",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // arguments ::= arguments COMMA type_arg 
            {
              List<Argument> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Argument> l = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Argument> args = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    try{
                        l.addAll(args);
                    } catch (NullPointerException e){

                    }
                    
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // arguments ::= type_arg 
            {
              List<Argument> RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Argument> args = (List<Argument>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = args;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // arguments ::= 
            {
              List<Argument> RESULT =null;
		
                    RESULT = new LinkedList<Argument>();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // type_arg ::= VAR id_list COLON var_type 
            {
              List<Argument> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.generateArgs(l, t, true);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arg",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // type_arg ::= id_list COLON var_type 
            {
              List<Argument> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Label t = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = astGen.generateArgs(l, t, false);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arg",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // java_block ::= JAVA_SECTION jcontent 
            {
              List<JClass> RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JClass> lc = (List<JClass>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = lc;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("java_block",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // jmodificator ::= PUBLIC 
            {
              AccessMod RESULT =null;
		 
                RESULT = AccessMod.PUBLIC; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmodificator",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // jmodificator ::= PRIVATE 
            {
              AccessMod RESULT =null;
		 
                RESULT = AccessMod.PRIVATE; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmodificator",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // jmodificator ::= PROTECTED 
            {
              AccessMod RESULT =null;
		 
                RESULT = AccessMod.PROTECTED; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmodificator",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // jtype ::= INT_TKN jbracks_list 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Index i = (Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArrayType(
                    new Label(
                        PrimitiveType.IntegerPT.getName(), 
                        new Position(tleft, tright)
                    ),
                    JReferType.PrimitiveData,
                    i.getNumber()
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // jtype ::= STRING_TKN jbracks_list 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Index i = (Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArrayType(
                    new Label(
                        PrimitiveType.StringPT.getName(), 
                        new Position(tleft, tright)
                    ),
                    JReferType.PrimitiveData,
                    i.getNumber()
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // jtype ::= FLOAT_TKN jbracks_list 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Index i = (Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArrayType(
                    new Label(
                        PrimitiveType.RealPT.getName(), 
                        new Position(tleft, tright)
                    ),
                    JReferType.PrimitiveData,
                    i.getNumber()
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // jtype ::= BOOLEAN_TKN jbracks_list 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Index i = (Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArrayType(
                    new Label(
                        PrimitiveType.BooleanPT.getName(), 
                        new Position(tleft, tright)
                    ),
                    JReferType.PrimitiveData,
                    i.getNumber()
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // jtype ::= CHAR_TKN jbracks_list 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Index i = (Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArrayType(
                    new Label(
                        PrimitiveType.CharPT.getName(), 
                        new Position(tleft, tright)
                    ),
                    JReferType.PrimitiveData,
                    i.getNumber()
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // jtype ::= ID jbracks_list 
            {
              JType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Index i = (Index)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArrayType(
                    new Label( id, new Position(idleft, idright)),
                    JReferType.ObjectReference,
                    i.getNumber()
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // jtype ::= INT_TKN 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JType(
                    JReferType.PrimitiveData,
                    new Label(
                        PrimitiveType.IntegerPT.getName(), 
                        new Position(tleft, tright)
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // jtype ::= STRING_TKN 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JType(
                    JReferType.PrimitiveData,
                    new Label(
                        PrimitiveType.StringPT.getName(), 
                        new Position(tleft, tright)
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // jtype ::= FLOAT_TKN 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JType(
                    JReferType.PrimitiveData,
                    new Label(
                        PrimitiveType.RealPT.getName(), 
                        new Position(tleft, tright)
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // jtype ::= BOOLEAN_TKN 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JType(
                    JReferType.PrimitiveData,
                    new Label(
                        PrimitiveType.BooleanPT.getName(), 
                        new Position(tleft, tright)
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // jtype ::= CHAR_TKN 
            {
              JType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JType(
                    JReferType.PrimitiveData,
                    new Label(
                        PrimitiveType.CharPT.getName(), 
                        new Position(tleft, tright)
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // jtype ::= ID 
            {
              JType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JType(
                    JReferType.ObjectReference,
                    new Label(id, new Position(idleft, idright))
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jtype",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // jbracks_list ::= jbracks_list jbrack 
            {
              Index RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Index i = (Index)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                i.increment();
                RESULT = i;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbracks_list",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // jbracks_list ::= jbrack 
            {
              Index RESULT =null;
		
                RESULT = new Index();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbracks_list",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // jbrack ::= LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbrack",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // jarray_access ::= LBRACK jexp RBRACK 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                List<Expression> list = new LinkedList<>();
                list.add(e);
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarray_access",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // jarray_access ::= jarray_access LBRACK jexp RBRACK 
            {
              List<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                l.add(e);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarray_access",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // jexp_list ::= jexp_list COMMA jexp 
            {
              List<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(e);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jexp_list",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // jexp_list ::= jexp 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                List<Expression> list = new LinkedList<>();
                list.add(e);
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jexp_list",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // jliterals ::= INTEGER_LIT 
            {
              JLiteral RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JLiteral(
                    new Position(oleft, oright),
                    o
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jliterals",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // jliterals ::= STRING_LIT 
            {
              JLiteral RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JLiteral(
                    new Position(oleft, oright),
                    o
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jliterals",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // jliterals ::= BOOLEAN_LIT 
            {
              JLiteral RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		boolean o = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JLiteral(
                    new Position(oleft, oright),
                    o
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jliterals",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // jliterals ::= CHAR_LIT 
            {
              JLiteral RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character o = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JLiteral(
                    new Position(oleft, oright),
                    o
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jliterals",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // jliterals ::= FLOAT_LIT 
            {
              JLiteral RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		float o = (float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JLiteral(
                    new Position(oleft, oright),
                    o
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jliterals",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // jcontent ::= jcontent jclass 
            {
              List<JClass> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JClass> l = (List<JClass>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JClass c = (JClass)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(c);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcontent",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // jcontent ::= 
            {
              List<JClass> RESULT =null;
		
                RESULT = new LinkedList<>();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcontent",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // jclass ::= PUBLIC CLASS ID jherence LBRACE jinternal_block RBRACE 
            {
              JClass RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Label h = (Label)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JDef> ld = (List<JDef>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Position initPos = new Position(idleft, idright);
                h = h != null ? h : new Label(JClass.FATHER_OBJECT_CLASS, initPos);
                RESULT = new JClass(
                    new Label(id, initPos),
                    h, ld
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jclass",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // jherence ::= EXTENDS ID 
            {
              Label RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Label(
                    id, 
                    new Position(idleft, idright)
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jherence",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // jherence ::= 
            {
              Label RESULT =null;
		
                RESULT = null;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jherence",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // jinternal_block ::= jinternal_block jinternal 
            {
              List<JDef> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JDef> l = (List<JDef>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JDef d = (JDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(d);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jinternal_block",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // jinternal_block ::= 
            {
              List<JDef> RESULT =null;
		
                RESULT = new LinkedList<>();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jinternal_block",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // jinternal ::= jmodificator jtype ID joptions_dec 
            {
              JDef RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AccessMod a = (AccessMod)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		JType t = (JType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Typable d = (Typable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                d.defineType(t);
                JDef jdef = (JDef) d;
                jdef.setAccess(a);
                jdef.setName(new Label(id, new Position(idleft, idright)));
                RESULT = jdef;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jinternal",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // jinternal ::= jmodificator VOID ID jmethod_dec 
            {
              JDef RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AccessMod a = (AccessMod)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JMethod m = (JMethod)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                m.setAccess(a);
                m.setName(new Label(id, new Position(idleft, idright)));
                m.setType(new JType());
                RESULT = m;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jinternal",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // jinternal ::= jmodificator ID LPAREN jargs RPAREN LBRACE jstmts_block RBRACE 
            {
              JDef RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		AccessMod m = (AccessMod)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<JArg> la = (List<JArg>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JConstructor(
                    new Label(id, new Position(idleft, idright)),
                    m, la, ls
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jinternal",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // joptions_dec ::= SEMICOLON 
            {
              Typable RESULT =null;
		
                RESULT = new JField();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("joptions_dec",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // joptions_dec ::= ASSIGNATION jexp SEMICOLON 
            {
              Typable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                JField field = new JField();
                field.setExpAssign(e);
                RESULT = field;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("joptions_dec",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // joptions_dec ::= jmethod_dec 
            {
              Typable RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JMethod m = (JMethod)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = m;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("joptions_dec",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // jmethod_dec ::= LPAREN jargs RPAREN LBRACE jstmts_block RBRACE 
            {
              JMethod RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<JArg> la = (List<JArg>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JMethod(null, null, la, ls);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_dec",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // jargs ::= jlist_args 
            {
              List<JArg> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JArg> l = (List<JArg>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jargs",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // jargs ::= 
            {
              List<JArg> RESULT =null;
		
                RESULT = new LinkedList<>();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jargs",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // jlist_args ::= jlist_args COMMA jarg 
            {
              List<JArg> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<JArg> l = (List<JArg>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JArg a = (JArg)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(a);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jlist_args",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // jlist_args ::= jarg 
            {
              List<JArg> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JArg a = (JArg)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                List<JArg> list = new LinkedList<>();
                list.add(a);
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jlist_args",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // jarg ::= jtype ID 
            {
              JArg RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JType t = (JType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArg(
                    t, new Label(id, new Position(idleft, idright))
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarg",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // jstmts_block ::= jstmts_block jstmt 
            {
              List<Statement> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> l = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(s);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmts_block",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // jstmts_block ::= jstmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                List<Statement> list = new LinkedList<>();
                list.add(s);
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmts_block",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // jstmt ::= jcontrol_stmts 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // jstmt ::= jsimple_stmts SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // jstmt ::= jdeclaration SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JDeclaration s = (JDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // jstmt ::= jmethod_use SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JMethodUseStmt s = (JMethodUseStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // jstmt ::= jconstruct_use SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JConstructUse s = (JConstructUse)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // jstmt ::= jassign SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JAssignAst s = (JAssignAst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // jstmt ::= jdefinite_funcs SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JDefiniteFunc s = (JDefiniteFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jstmt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // jcontrol_stmts ::= jif_stmt 
            {
              Statement RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassIf pi = (JPassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = astGen.transformPassJIf(pi);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcontrol_stmts",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // jcontrol_stmts ::= jwhile_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JWhileAst s = (JWhileAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcontrol_stmts",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // jcontrol_stmts ::= jdo_while_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JDoWhileAst s = (JDoWhileAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcontrol_stmts",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // jcontrol_stmts ::= jfor_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JForAst s = (JForAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcontrol_stmts",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // jcontrol_stmts ::= jswitch_stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JSwitchAst s = (JSwitchAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcontrol_stmts",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // jsimple_stmts ::= BREAK 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JSimpleStmt(
                    new Position(sleft, sright), true
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jsimple_stmts",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // jsimple_stmts ::= CONTINUE 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JSimpleStmt(
                    new Position(sleft, sright), false
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jsimple_stmts",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // jsimple_stmts ::= RETURN jexp 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression pe = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JReturnStmt(
                    new Position(sleft, sright), pe
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jsimple_stmts",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // jdefinite_funcs ::= PRINT LPAREN jexp_list RPAREN 
            {
              JDefiniteFunc RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lpeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> lpe = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JDefiniteFunc(
                    new Position(pleft, pright), lpe, false
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jdefinite_funcs",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // jdefinite_funcs ::= PRINTLN LPAREN jexp_list RPAREN 
            {
              JDefiniteFunc RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lpeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> lpe = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JDefiniteFunc(
                    new Position(pleft, pright), lpe, true
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jdefinite_funcs",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // jif_stmt ::= IF LPAREN jexp RPAREN LBRACE jstmts_block RBRACE jelif_stmt 
            {
              JPassIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassIf pi = (JPassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = astGen.generateJPassIf(
                    pi,
                    new JIfAst(
                        new Position(ileft, iright),
                        e, ls
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jif_stmt",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // jelif_stmt ::= ELSE LBRACE jstmts_block RBRACE 
            {
              JPassIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                JElseAst elseStmt = new JElseAst(
                    new Position(eleft, eright),
                    ls
                );
                RESULT = new JPassIf(elseStmt);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jelif_stmt",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // jelif_stmt ::= ELSE jif_stmt 
            {
              JPassIf RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JPassIf pi = (JPassIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = pi;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jelif_stmt",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // jelif_stmt ::= 
            {
              JPassIf RESULT =null;
		
                RESULT = new JPassIf();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jelif_stmt",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // jwhile_stmt ::= WHILE LPAREN jexp RPAREN LBRACE jstmts_block RBRACE 
            {
              JWhileAst RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JWhileAst(
                    new Position(wleft, wright),
                    e, ls
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jwhile_stmt",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // jdo_while_stmt ::= DO LBRACE jstmts_block RBRACE WHILE LPAREN jexp RPAREN SEMICOLON 
            {
              JDoWhileAst RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new JDoWhileAst(
                    new Position(dleft, dright),
                    e, ls
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jdo_while_stmt",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // jfor_stmt ::= FOR RPAREN jfor_reduced_stmt SEMICOLON jexp SEMICOLON jfor_reduced_stmt RPAREN LBRACE jstmts_block RBRACE 
            {
              JForAst RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JForAst(
                    new Position(fleft, fright),
                    s1, e, s2, ls
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jfor_stmt",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // jfor_reduced_stmt ::= jdeclaration 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JDeclaration s = (JDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jfor_reduced_stmt",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // jfor_reduced_stmt ::= jmethod_use 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JMethodUseStmt s = (JMethodUseStmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jfor_reduced_stmt",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // jfor_reduced_stmt ::= jassign 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JAssignAst s = (JAssignAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s;    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jfor_reduced_stmt",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // jfor_reduced_stmt ::= 
            {
              Statement RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jfor_reduced_stmt",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // jswitch_stmt ::= SWITCH LPAREN jexp RPAREN LBRACE jswitch_cases RBRACE 
            {
              JSwitchAst RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JCase> lc = (List<JCase>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JSwitchAst(
                    new Position(sleft, sright),
                    e, lc
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jswitch_stmt",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // jswitch_cases ::= jswitch_cases jcase 
            {
              List<JCase> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<JCase> l = (List<JCase>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JCase c = (JCase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(c);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jswitch_cases",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // jswitch_cases ::= jcase 
            {
              List<JCase> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JCase c = (JCase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                List<JCase> list = new LinkedList<>();
                list.add(c);
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jswitch_cases",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // jcase ::= CASE jexp COLON jstmts_block 
            {
              JCase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JCase(e, ls);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcase",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // jcase ::= DEFAULT COLON jstmts_block 
            {
              JCase RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> ls = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JCase(ls);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcase",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // jassign ::= ID ASSIGNATION jexp 
            {
              JAssignAst RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPos = new Position(idleft,idright);
                RESULT = new JAssignAst(
                    initPos,
                    astGen.genListInv(
                        new JVarUse(initPos, id, JContextRef.Local)
                    ),
                    e
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // jassign ::= THIS jaccess ASSIGNATION jexp 
            {
              JAssignAst RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPos = new Position(tleft, tright);
                RESULT = new JAssignAst(
                    new Position(tleft, tright),
                    li, e, JContextRef.FromObject
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // jassign ::= SUPER jaccess ASSIGNATION jexp 
            {
              JAssignAst RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JAssignAst(
                    new Position(sleft, sright),
                    li, e, JContextRef.FromFather
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // jassign ::= ID jaccess ASSIGNATION jexp 
            {
              JAssignAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPos = new Position(ileft, iright);
                RESULT = new JAssignAst(
                    initPos,
                    astGen.genListInv(
                        li, new JVarUse(initPos, i, JContextRef.Local)
                    ),
                    e
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // jassign ::= ID LPAREN RPAREN jaccess ASSIGNATION jexp 
            {
              JAssignAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPos = new Position(ileft, iright);
                RESULT = new JAssignAst(
                    initPos,
                    astGen.genListInv(
                        li, new JMethodUse(initPos, i, JContextRef.Local)
                    ),
                    e
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // jassign ::= ID LPAREN jexp_list RPAREN jaccess ASSIGNATION jexp 
            {
              JAssignAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Expression> args = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPos = new Position(ileft, iright);
                RESULT = new JAssignAst(
                    initPos,
                    astGen.genListInv(
                        li, new JMethodUse(initPos, i, JContextRef.Local, args)
                    ),
                    e
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // jassign ::= ID LPAREN RPAREN jarray_access ASSIGNATION jexp 
            {
              JAssignAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> ac = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPos = new Position(ileft, iright);
                RESULT = new JAssignAst(
                    initPos,
                    astGen.genListInv(
                        new JArrayFMUse(initPos, i, JContextRef.Local, ac)
                    ),
                    e
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // jassign ::= ID LPAREN RPAREN jarray_access jaccess ASSIGNATION jexp 
            {
              JAssignAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Expression> ac = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPos = new Position(ileft, iright);
                RESULT = new JAssignAst(
                    initPos,
                    astGen.genListInv(
                        li, new JArrayFMUse(initPos, i, JContextRef.Local, ac)
                    ),
                    e
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // jassign ::= ID LPAREN jexp_list RPAREN jarray_access ASSIGNATION jexp 
            {
              JAssignAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Expression> args = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> ac = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPos = new Position(ileft, iright);
                RESULT = new JAssignAst(
                    initPos,
                    astGen.genListInv(
                        new JArrayFMUse(initPos, i, JContextRef.Local, args, ac)
                    ),
                    e
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // jassign ::= ID LPAREN jexp_list RPAREN jarray_access jaccess ASSIGNATION jexp 
            {
              JAssignAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Expression> args = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Expression> ac = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPos = new Position(ileft, iright);
                RESULT = new JAssignAst(
                    initPos,
                    astGen.genListInv(
                        li, new JArrayFMUse(initPos, i, JContextRef.Local, args, ac)
                    ),
                    e
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // jassign ::= ID jarray_access jaccess ASSIGNATION jexp SEMICOLON 
            {
              JAssignAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Expression> ac = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Position initPos = new Position(ileft, iright);
                RESULT = new JAssignAst(
                    initPos,
                    astGen.genListInv(
                        li, new JArrayUse(initPos, i, JContextRef.Local, ac)
                    ),
                    e
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // jassign ::= ID jarray_access ASSIGNATION jexp SEMICOLON 
            {
              JAssignAst RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Expression> ac = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Position initPos = new Position(ileft, iright);
                RESULT = new JAssignAst(
                    initPos,
                    astGen.genListInv(
                        new JArrayUse(initPos, i, JContextRef.Local, ac)
                    ),
                    e
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jassign",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // jdeclaration ::= jtype ID ASSIGNATION jexp 
            {
              JDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		JType t = (JType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression pe = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JDeclaration(
                    new Position(ileft, iright),
                    i, t, pe
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jdeclaration",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // jdeclaration ::= jtype ID 
            {
              JDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JType t = (JType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JDeclaration(
                    new Position(ileft, iright),
                    i, t
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jdeclaration",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // jmethod_use ::= THIS jaccess 
            {
              JMethodUseStmt RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JMethodUseStmt(
                    new Position(tleft, tright),
                    li, JContextRef.FromObject
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // jmethod_use ::= SUPER jaccess 
            {
              JMethodUseStmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JMethodUseStmt(
                    new Position(sleft, sright),
                    li, JContextRef.FromFather
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // jmethod_use ::= ID jaccess 
            {
              JMethodUseStmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPosition = new Position(idleft, idright);
                RESULT = new JMethodUseStmt(
                    initPosition,
                    astGen.genListInv(
                        li, new JVarUse(initPosition, id, JContextRef.Local)
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // jmethod_use ::= ID LPAREN RPAREN 
            {
              JMethodUseStmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                Position initPosition = new Position(idleft, idright);
                RESULT = new JMethodUseStmt(
                    initPosition, 
                    astGen.genListInv(
                        new JMethodUse(initPosition, id, JContextRef.Local)
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // jmethod_use ::= ID LPAREN jexp_list RPAREN 
            {
              JMethodUseStmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Position initPosition = new Position(idleft, idright);
                RESULT = new JMethodUseStmt(
                    initPosition, 
                    astGen.genListInv(
                        new JMethodUse(initPosition, id, JContextRef.Local, el)
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // jmethod_use ::= ID LPAREN RPAREN jaccess 
            {
              JMethodUseStmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPosition = new Position(idleft, idright);
                RESULT = new JMethodUseStmt(
                    initPosition, 
                    astGen.genListInv(
                        li, new JMethodUse(initPosition, id, JContextRef.Local)
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // jmethod_use ::= ID LPAREN jexp_list RPAREN jaccess 
            {
              JMethodUseStmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPosition = new Position(idleft, idright);
                RESULT = new JMethodUseStmt(
                    initPosition, 
                    astGen.genListInv(
                        li, new JMethodUse(initPosition, id, JContextRef.Local, el)
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // jmethod_use ::= ID LPAREN RPAREN jarray_access jaccess 
            {
              JMethodUseStmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> ac = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPosition = new Position(idleft, idright);
                RESULT = new JMethodUseStmt(
                    initPosition, 
                    astGen.genListInv(
                        li, new JArrayFMUse(initPosition, id, JContextRef.Local, ac)
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // jmethod_use ::= ID LPAREN jexp_list RPAREN jarray_access jaccess 
            {
              JMethodUseStmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Expression> args = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> ac = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPosition = new Position(idleft, idright);
                RESULT = new JMethodUseStmt(
                    initPosition, 
                    astGen.genListInv(
                        li, new JArrayFMUse(initPosition, id, JContextRef.Local,args, ac)
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // jmethod_use ::= ID jarray_access jaccess 
            {
              JMethodUseStmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> ac = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Position initPosition = new Position(idleft, idright);
                RESULT = new JMethodUseStmt(
                    initPosition, 
                    astGen.genListInv(
                        li, new JArrayUse(initPosition, id, JContextRef.Local, ac)
                    )
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jmethod_use",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // jconstruct_use ::= THIS LPAREN RPAREN 
            {
              JConstructUse RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new JConstructUse(
                    new Position(tleft, tright),
                    false
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jconstruct_use",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // jconstruct_use ::= THIS LPAREN jexp_list RPAREN 
            {
              JConstructUse RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lpeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> lpe = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JConstructUse(
                    new Position(tleft, tright),
                    lpe, false
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jconstruct_use",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // jconstruct_use ::= SUPER LPAREN RPAREN 
            {
              JConstructUse RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new JConstructUse(
                    new Position(sleft, sright),
                    true
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jconstruct_use",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // jconstruct_use ::= SUPER LPAREN jexp_list RPAREN 
            {
              JConstructUse RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lpeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> lpe = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JConstructUse(
                    new Position(sleft, sright),
                    lpe, true
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jconstruct_use",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // jaccess ::= DOT jcomplex_access jaccess 
            {
              List<JInvocation> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		JInvocation i = (JInvocation)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> l = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(0, i);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jaccess",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // jaccess ::= DOT jcomplex_access 
            {
              List<JInvocation> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JInvocation i = (JInvocation)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                List<JInvocation> list = new LinkedList<>();
                list.add(i);
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jaccess",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // jcomplex_access ::= ID 
            {
              JInvocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JVarUse(
                    new Position(ileft, iright),
                    i, JContextRef.Local
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcomplex_access",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // jcomplex_access ::= ID LPAREN RPAREN 
            {
              JInvocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new JMethodUse(
                    new Position(ileft, iright),
                    i, JContextRef.Local
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcomplex_access",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // jcomplex_access ::= ID LPAREN RPAREN jarray_access 
            {
              JInvocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Expression> ac = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArrayFMUse(
                    new Position(ileft, iright), 
                    i, JContextRef.Local, ac
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcomplex_access",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // jcomplex_access ::= ID LPAREN jexp_list RPAREN 
            {
              JInvocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JMethodUse(
                    new Position(ileft, iright),
                    i, JContextRef.Local, el
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcomplex_access",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // jcomplex_access ::= ID LPAREN jexp_list RPAREN jarray_access 
            {
              JInvocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Expression> ac = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArrayFMUse(
                    new Position(ileft, iright),
                    i, JContextRef.Local, el, ac
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcomplex_access",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // jcomplex_access ::= ID jarray_access 
            {
              JInvocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Expression> ac = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JArrayUse(
                    new Position(ileft, iright),
                    i, JContextRef.Local, ac
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jcomplex_access",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // jexp ::= jexp AND jexp 
            {
              Expression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression p1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression p2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.And, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jexp",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // jexp ::= jexp OR jexp 
            {
              Expression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression p1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression p2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.Or, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jexp",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // jexp ::= NOT jexp 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JUnaryOp(
                    new Position(oleft, oright),
                    p, DefiniteOperation.Not
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jexp",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // jexp ::= jbool_exp 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = e;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jexp",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // jbool_exp ::= jarit_exp EQUALS jarit_exp 
            {
              Expression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression p1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression p2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.EqualsTo, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // jbool_exp ::= jarit_exp DIFFERENT jarit_exp 
            {
              Expression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression p1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression p2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.DifferentTo, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // jbool_exp ::= jarit_exp GRATER jarit_exp 
            {
              Expression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression p1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression p2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.GraterThan, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // jbool_exp ::= jarit_exp LESS jarit_exp 
            {
              Expression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression p1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression p2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.LessThan, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // jbool_exp ::= jarit_exp GRATER_EQUALS jarit_exp 
            {
              Expression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression p1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression p2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.GraterEq, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // jbool_exp ::= jarit_exp LESS_EQUALS jarit_exp 
            {
              Expression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression p1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression p2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.LessEq, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // jbool_exp ::= jarit_exp 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = p;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jbool_exp",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // jarit_exp ::= jarit_exp PLUS jarit_exp 
            {
              Expression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression p1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression p2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.Addition, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // jarit_exp ::= jarit_exp MINUS jarit_exp 
            {
              Expression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression p1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression p2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.Substraction, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // jarit_exp ::= jarit_exp TIMES jarit_exp 
            {
              Expression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression p1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression p2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.Multiplication, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // jarit_exp ::= jarit_exp DIV jarit_exp 
            {
              Expression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression p1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression p2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.Division, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // jarit_exp ::= jarit_exp MOD jarit_exp 
            {
              Expression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression p1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression p2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.Module, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // jarit_exp ::= jarit_exp POWER jarit_exp 
            {
              Expression RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression p1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression p2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JOperation(
                    new Position(oleft, oright), 
                    DefiniteOperation.Power, 
                    p1, p2
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // jarit_exp ::= jliterals 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		JLiteral l = (JLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // jarit_exp ::= ID jarray_access 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Expression> ac = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JInvocationExp(astGen.genListInv(
                    new JArrayUse(
                        new Position(ileft, iright),
                        i, JContextRef.Local, ac
                    )
                ));
                    
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // jarit_exp ::= ID jarray_access jaccess 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> ac = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JInvocationExp(astGen.genListInv(
                    li,
                    new JArrayUse(
                        new Position(ileft, iright),
                        i, JContextRef.Local, ac
                    )
                ));
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // jarit_exp ::= ID LPAREN jexp_list RPAREN 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> args = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JInvocationExp(astGen.genListInv(
                    new JMethodUse(
                        new Position(ileft, iright),
                        i, JContextRef.Local, args
                    )
                ));
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // jarit_exp ::= ID LPAREN RPAREN 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new JInvocationExp(astGen.genListInv(
                    new JMethodUse(
                        new Position(ileft, iright),
                        i, JContextRef.Local
                    )
                ));
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // jarit_exp ::= ID LPAREN jexp_list RPAREN jaccess 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Expression> l = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // jarit_exp ::= ID LPAREN RPAREN jaccess 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // jarit_exp ::= ID jaccess 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JInvocationExp(astGen.genListInv(
                    li,
                    new JVarUse(
                        new Position(ileft, iright),
                        i, JContextRef.Local
                    )
                ));
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // jarit_exp ::= ID 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                List<JInvocation> invlist = astGen.genListInv(
                    new JVarUse(
                        new Position(ileft, iright), 
                        i, JContextRef.Local
                    )
                );
                RESULT = new JInvocationExp(invlist);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // jarit_exp ::= THIS jaccess 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> l = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JInvocationExp(
                    l, JContextRef.FromObject
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // jarit_exp ::= SUPER jaccess 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> l = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JInvocationExp(
                    l, JContextRef.FromFather
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // jarit_exp ::= NEW ID LPAREN RPAREN 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new JCreateClassE(
                    new Position(nleft, nright), i
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // jarit_exp ::= NEW ID LPAREN jexp_list RPAREN 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new JCreateClassE(
                    new Position(nleft, nright), i, el
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000001(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // jarit_exp ::= jinput_func 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = e;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // jarit_exp ::= LPAREN jexp RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = e;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // jarit_exp ::= PLUS jarit_exp 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression pe = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JUnaryOp(
                    new Position(oleft, oright), 
                    pe, DefiniteOperation.Addition
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // jarit_exp ::= MINUS jarit_exp 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression pe = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new JUnaryOp(
                    new Position(oleft, oright),
                    pe, DefiniteOperation.Substraction
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jarit_exp",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // jinput_func ::= CHAR_INPUT LPAREN RPAREN 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new JInputExp(
                    new Position(ileft, iright),
                    JTypeInput.Char
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jinput_func",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // jinput_func ::= INT_INPUT LPAREN RPAREN 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new JInputExp(
                    new Position(ileft, iright),
                    JTypeInput.Int
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jinput_func",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // jinput_func ::= FLOAT_INPUT LPAREN RPAREN 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new JInputExp(
                    new Position(ileft, iright),
                    JTypeInput.Float
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jinput_func",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // main_program ::= MAIN_SECTION cimports cconst_b cvars_b VOID MAIN LPAREN RPAREN LBRACE cstmts RBRACE 
            {
              CMain RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		List<Label> i = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		List<CConstDec> c = (List<CConstDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		List<DefAst> v = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<CStatement> ls = (List<CStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new CMain(new CImports(i), c, v, ls);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_program",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // ctype ::= INT_TKN 
            {
              PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.IntegerPT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ctype",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // ctype ::= CHAR_TKN 
            {
              PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.CharPT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ctype",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // ctype ::= FLOAT_TKN 
            {
              PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.RealPT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ctype",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // ctype ::= STRING_TKN 
            {
              PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.StringPT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ctype",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // ctype ::= BOOLEAN_TKN 
            {
              PrimitiveType RESULT =null;
		 RESULT = PrimitiveType.BooleanPT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ctype",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // carray_dims ::= carray_dims LBRACK cexp RBRACK 
            {
              List<CExp> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<CExp> l = (List<CExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                l.add(e);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carray_dims",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // carray_dims ::= LBRACK cexp RBRACK 
            {
              List<CExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                List<CExp> list = new LinkedList<>();
                list.add(e);
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carray_dims",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // cparams ::= cparams COMMA cexp 
            {
              List<CExp> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<CExp> l = (List<CExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(e);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cparams",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // cparams ::= cexp 
            {
              List<CExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                List<CExp> list = new LinkedList<>();
                list.add(e);
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cparams",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // cliterals ::= STRING_LIT 
            {
              CLiteral RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CLiteral(
                    new Position(lleft, lright), l
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cliterals",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // cliterals ::= FLOAT_LIT 
            {
              CLiteral RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		float l = (float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CLiteral(
                    new Position(lleft, lright), l
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cliterals",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // cliterals ::= INTEGER_LIT 
            {
              CLiteral RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CLiteral(
                    new Position(lleft, lright), l
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cliterals",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // cliterals ::= BOOLEAN_LIT 
            {
              CLiteral RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		boolean l = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CLiteral(
                    new Position(lleft, lright), l
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cliterals",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // cliterals ::= CHAR_LIT 
            {
              CLiteral RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character l = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new CLiteral(
                    new Position(lleft, lright), l
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cliterals",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // cimports ::= cimports HASH INCLUDE STRING_LIT 
            {
              List<Label> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<Label> l = (List<Label>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Label current = new Label(s, new Position(ileft, iright));
                l.add(current);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cimports",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // cimports ::= 
            {
              List<Label> RESULT =null;
		
                RESULT = new LinkedList<>();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cimports",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // cconst_b ::= cconst_b CONST ctype ID ASSIGNATION cexp SEMICOLON 
            {
              List<CConstDec> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<CConstDec> l = (List<CConstDec>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		PrimitiveType pt = (PrimitiveType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                l.add(new CConstDec(
                    new Label(i, new Position(ileft, iright)),
                    pt, e
                ));
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cconst_b",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // cconst_b ::= 
            {
              List<CConstDec> RESULT =null;
		
                RESULT = new LinkedList<>();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cconst_b",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // cvars_b ::= cvars_b cvars_dec 
            {
              List<DefAst> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<DefAst> l = (List<DefAst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DefAst d = (DefAst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(d);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvars_b",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // cvars_b ::= 
            {
              List<DefAst> RESULT =null;
		
                RESULT = new LinkedList<>();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvars_b",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // cvars_dec ::= ctype ID SEMICOLON 
            {
              DefAst RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		PrimitiveType pt = (PrimitiveType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new CVarDec(
                    new Label(i, new Position(ileft, iright)),
                    pt
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvars_dec",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // cvars_dec ::= ctype ID ASSIGNATION cexp SEMICOLON 
            {
              DefAst RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		PrimitiveType pt = (PrimitiveType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new CVarDec(
                    new Label(i, new Position(ileft, iright)),
                    pt, e
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvars_dec",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // cvars_dec ::= ctype ID carray_dims SEMICOLON 
            {
              DefAst RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		PrimitiveType pt = (PrimitiveType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<CExp> d = (List<CExp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new CArrayDec(
                    new Label(i, new Position(ileft, iright)),
                    pt, d
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvars_dec",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // cvars_dec ::= c_jclass_init 
            {
              DefAst RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		C_JObjectDec ci = (C_JObjectDec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = ci;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvars_dec",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // c_jclass_init ::= JAVA DOT ID c_java_construct SEMICOLON 
            {
              C_JObjectDec RESULT =null;
		
                
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_jclass_init",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // c_jclass_init ::= JAVA DOT ID ARRAY carray_dims SEMICOLON 
            {
              C_JObjectDec RESULT =null;
		

            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_jclass_init",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // c_java_construct ::= c_java_construct COMMA c_j_construct 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(c);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_java_construct",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // c_java_construct ::= c_j_construct SEMICOLON 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_java_construct",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // c_j_construct ::= ID LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_j_construct",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // c_j_construct ::= ID LPAREN cparams RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_j_construct",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // cstmts ::= ccontrol_stmts 
            {
              List<CStatement> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cstmts",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // cstmts ::= single_stmt SEMICOLON 
            {
              List<CStatement> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cstmts",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // cstmts ::= def_functions_stmt SEMICOLON 
            {
              List<CStatement> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cstmts",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // cstmts ::= c_jinvocation SEMICOLON 
            {
              List<CStatement> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cstmts",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // cstmts ::= c_pinvocation SEMICOLON 
            {
              List<CStatement> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cstmts",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // cstmts ::= cassign SEMICOLON 
            {
              List<CStatement> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cstmts",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // single_stmt ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_stmt",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // single_stmt ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("single_stmt",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // def_functions_stmt ::= SCANF LPAREN STRING_LIT COMMA AMPERSAND ID RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_functions_stmt",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // def_functions_stmt ::= PRINT LPAREN cparams RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_functions_stmt",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // def_functions_stmt ::= CLEAR LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_functions_stmt",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // def_functions_stmt ::= GETCH LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_functions_stmt",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // ccontrol_stmts ::= cif_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccontrol_stmts",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // ccontrol_stmts ::= celif_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccontrol_stmts",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // ccontrol_stmts ::= cswitch_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccontrol_stmts",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // ccontrol_stmts ::= cfor_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccontrol_stmts",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // ccontrol_stmts ::= cwhile_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccontrol_stmts",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // ccontrol_stmts ::= cdo_while_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccontrol_stmts",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // cassign ::= c_jinvocation ASSIGNATION cexp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cassign",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // cassign ::= c_pinvocation ASSIGNATION cexp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cassign",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // cassign ::= ID ASSIGNATION cexp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cassign",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // cif_stmt ::= IF LPAREN cexp RPAREN LBRACE cstmts RBRACE celif_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cif_stmt",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // celif_stmt ::= ELSE cif_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("celif_stmt",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // celif_stmt ::= ELSE LBRACE cstmts RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("celif_stmt",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // cswitch_stmt ::= SWITCH LPAREN cexp RPAREN LBRACE ccases RBRACE 
            {
              CSwitchAst RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<CCase> lc = (List<CCase>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new CSwitchAst(
                    new Position(sleft, sright),
                    e, lc
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cswitch_stmt",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // ccases ::= ccases ccase 
            {
              List<CCase> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<CCase> l = (List<CCase>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CCase c = (CCase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                l.add(c);
                RESULT = l;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccases",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // ccases ::= ccase 
            {
              List<CCase> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CCase c = (CCase)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                List<CCase> list = new LinkedList<>();
                list.add(c);
                RESULT = list;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccases",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // ccase ::= CASE cexp COLON cstmts BREAK SEMICOLON 
            {
              CCase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<CStatement> ls = (List<CStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new CCase(e, ls);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccase",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // ccase ::= DEFAULT COLON cstmts BREAK SEMICOLON 
            {
              CCase RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<CStatement> ls = (List<CStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new CCase(ls);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ccase",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // cfor_stmt ::= FOR LPAREN cfor_reduced_stmt SEMICOLON cexp SEMICOLON cfor_reduced_stmt RPAREN LBRACE cstmts RBRACE 
            {
              CForAst RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		CStatement s1 = (CStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		CExp c = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		CStatement s2 = (CStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<CStatement> ls = (List<CStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new CForAst(
                    new Position(fleft, fright),
                    ls, s1, s2, c
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cfor_stmt",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // cfor_reduced_stmt ::= c_jinvocation 
            {
              CStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> s = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cfor_reduced_stmt",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // cfor_reduced_stmt ::= c_pinvocation 
            {
              CStatement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cfor_reduced_stmt",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // cfor_reduced_stmt ::= cassign 
            {
              CStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cfor_reduced_stmt",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // cfor_reduced_stmt ::= 
            {
              CStatement RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cfor_reduced_stmt",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // cwhile_stmt ::= WHILE LPAREN cexp RPAREN LBRACE cstmts RBRACE 
            {
              CWhileAst RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		CExp c = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<CStatement> ls = (List<CStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new CWhileAst(
                    new Position(wleft, wright),
                    ls, c
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cwhile_stmt",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // cdo_while_stmt ::= DO LBRACE cstmts RBRACE WHILE LPAREN cexp RPAREN SEMICOLON 
            {
              CDoWhile RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List<CStatement> ls = (List<CStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp c = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new CDoWhile(
                    new Position(dleft, dright),
                    ls, c
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cdo_while_stmt",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // c_jinvocation ::= JAVA DOT ID jaccess 
            {
              List<JInvocation> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<JInvocation> li = (List<JInvocation>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = astGen.genListInv(
                    li, new JVarUse(new Position(ileft, iright), i, JContextRef.Local)
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_jinvocation",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // c_pinvocation ::= PASCAL DOT ID LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_pinvocation",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // c_pinvocation ::= PASCAL DOT ID LPAREN cparams RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_pinvocation",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // cexp ::= cexp AND cexp 
            {
              CExp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexp",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // cexp ::= cexp OR cexp 
            {
              CExp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexp",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // cexp ::= NOT jexp 
            {
              CExp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexp",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // cexp ::= cbool_exp 
            {
              CExp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cexp",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // cbool_exp ::= carit_exp EQUALS carit_exp 
            {
              CExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp e1 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e2j = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cbool_exp",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // cbool_exp ::= carit_exp DIFFERENT carit_exp 
            {
              CExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp e1 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e2j = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cbool_exp",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // cbool_exp ::= carit_exp GRATER carit_exp 
            {
              CExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp e1 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e2j = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cbool_exp",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // cbool_exp ::= carit_exp LESS carit_exp 
            {
              CExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp e1 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e2j = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cbool_exp",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // cbool_exp ::= carit_exp GRATER_EQUALS carit_exp 
            {
              CExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp e1 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e2j = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cbool_exp",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // cbool_exp ::= carit_exp LESS_EQUALS carit_exp 
            {
              CExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp e1 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e2j = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cbool_exp",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // cbool_exp ::= carit_exp 
            {
              CExp RESULT =null;
		int ejleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ejright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp ej = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cbool_exp",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // carit_exp ::= carit_exp PLUS carit_exp 
            {
              CExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp e1 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e2 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // carit_exp ::= carit_exp MINUS carit_exp 
            {
              CExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp e1 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e2 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // carit_exp ::= carit_exp TIMES carit_exp 
            {
              CExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp e1 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e2 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // carit_exp ::= carit_exp DIV carit_exp 
            {
              CExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp e1 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e2 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // carit_exp ::= carit_exp MOD carit_exp 
            {
              CExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp e1 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e2 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // carit_exp ::= carit_exp POWER carit_exp 
            {
              CExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CExp e1 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e2 = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // carit_exp ::= cliterals 
            {
              CExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CLiteral e = (CLiteral)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // carit_exp ::= c_jinvocation 
            {
              CExp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // carit_exp ::= c_pinvocation 
            {
              CExp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // carit_exp ::= ID 
            {
              CExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // carit_exp ::= LPAREN cexp RPAREN 
            {
              CExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // carit_exp ::= PLUS carit_exp 
            {
              CExp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // carit_exp ::= MINUS carit_exp 
            {
              CExp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CExp e = (CExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("carit_exp",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$Parser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$Parser$do_action_part00000001(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
