// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: pintorLexer.jflex

/***************************** paquetes *******************************/
package compi2.multi.compilator.colors;

import java.util.*;


@SuppressWarnings("fallthrough")
public class PintorLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int PASCAL = 2;
  public static final int JAVA = 4;
  public static final int CHARLITERAL = 6;
  public static final int P_CHAR_STRING = 8;
  public static final int JCHARLITERAL = 10;
  public static final int STRING = 12;
  public static final int JSTRING = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\126\u0100\1\u2600\1\u0100\1\u2700"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00\10\u2e00"+
    "\31\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000\1\u5100"+
    "\3\u0100\1\u5200\1\u5300\1\u5400\11\u1f00\1\u5500\4\u0100\1\u5600"+
    "\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900\2\u1f00"+
    "\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00\41\u1f00"+
    "\1\u5f00\1\u0100\1\u6000\1\u6100\11\u1f00\1\u6200\22\u1f00\1\u6300"+
    "\1\u1f00\1\u6400\1\u6500\1\u1f00\1\u6600\1\u6700\1\u6800\1\u6900"+
    "\2\u1f00\1\u6a00\4\u1f00\1\u6b00\1\u6c00\1\u6d00\1\u6e00\1\u1f00"+
    "\1\u6f00\2\u1f00\1\u7000\1\u7100\1\u7200\2\u1f00\1\u7300\1\u1f00"+
    "\1\u7400\14\u1f00\1\u7500\4\u1f00\246\u0100\1\u7600\20\u0100\1\u7700"+
    "\1\u7800\25\u0100\1\u7900\34\u0100\1\u7a00\2\u0100\1\u7b00\11\u1f00"+
    "\2\u0100\1\u7c00\5\u1f00\23\u0100\1\u7d00\17\u0100\1\u7e00\u0adc\u1f00"+
    "\1\u7f00\1\u8000\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\6\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\20\1\22\1\23"+
    "\2\24\2\25\4\26\2\27\1\30\1\21\1\31\1\32"+
    "\1\33\2\6\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\11\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\11\1\62\1\11\1\63\1\64\1\63\1\20"+
    "\1\11\1\6\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\11\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\11\1\104\1\105\1\106\1\107\1\110"+
    "\1\111\1\112\1\62\1\11\1\113\1\114\1\115\1\6"+
    "\6\0\1\116\32\0\2\6\4\11\4\6\1\11\2\6"+
    "\1\0\7\6\1\11\4\6\1\11\5\6\27\11\1\6"+
    "\37\11\1\6\u01ca\11\4\6\14\11\16\6\5\11\7\6"+
    "\1\11\1\6\1\11\21\6\160\0\5\11\1\6\2\11"+
    "\2\6\4\11\1\6\1\11\6\6\1\11\1\6\3\11"+
    "\1\6\1\11\1\6\24\11\1\6\123\11\1\6\213\11"+
    "\1\6\5\0\2\6\246\11\1\6\46\11\2\6\1\11"+
    "\6\6\51\11\6\6\1\11\1\6\55\0\1\6\1\0"+
    "\1\6\2\0\1\6\2\0\1\6\1\0\10\6\33\11"+
    "\4\6\4\11\15\6\6\0\5\6\1\11\4\6\13\0"+
    "\1\6\1\0\3\6\53\11\37\0\4\6\2\11\1\0"+
    "\143\11\1\6\1\11\10\0\1\6\6\0\2\11\2\0"+
    "\1\6\4\0\2\11\12\0\3\11\2\6\1\11\17\6"+
    "\1\0\1\11\1\0\36\11\33\0\2\6\131\11\13\0"+
    "\1\11\16\6\12\0\41\11\11\0\2\11\4\6\1\11"+
    "\2\6\1\0\30\11\4\0\1\11\11\0\1\11\3\0"+
    "\1\11\5\0\22\6\31\11\3\0\4\6\13\11\5\6"+
    "\30\11\1\6\6\11\1\6\2\0\6\6\10\0\52\11"+
    "\72\0\66\11\3\0\1\11\22\0\1\11\7\0\12\11"+
    "\2\0\2\6\12\0\1\6\20\11\3\0\1\6\10\11"+
    "\2\6\2\11\2\6\26\11\1\6\7\11\1\6\1\11"+
    "\3\6\4\11\2\6\1\0\1\11\7\0\2\6\2\0"+
    "\2\6\3\0\1\11\10\6\1\0\4\6\2\11\1\6"+
    "\3\11\2\0\2\6\12\0\4\11\7\6\2\11\1\6"+
    "\1\0\2\6\3\0\1\6\6\11\4\6\2\11\2\6"+
    "\26\11\1\6\7\11\1\6\2\11\1\6\2\11\1\6"+
    "\2\11\2\6\1\0\1\6\5\0\4\6\2\0\2\6"+
    "\3\0\3\6\1\0\7\6\4\11\1\6\1\11\7\6"+
    "\14\0\3\11\1\0\13\6\3\0\1\6\11\11\1\6"+
    "\3\11\1\6\26\11\1\6\7\11\1\6\2\11\1\6"+
    "\5\11\2\6\1\0\1\11\10\0\1\6\3\0\1\6"+
    "\3\0\2\6\1\11\17\6\2\11\2\0\2\6\12\0"+
    "\1\6\1\11\7\6\1\11\6\0\1\6\3\0\1\6"+
    "\10\11\2\6\2\11\2\6\26\11\1\6\7\11\1\6"+
    "\2\11\1\6\5\11\2\6\1\0\1\11\7\0\2\6"+
    "\2\0\2\6\3\0\7\6\3\0\4\6\2\11\1\6"+
    "\3\11\2\0\2\6\12\0\1\6\1\11\20\6\1\0"+
    "\1\11\1\6\6\11\3\6\3\11\1\6\4\11\3\6"+
    "\2\11\1\6\1\11\1\6\2\11\3\6\2\11\3\6"+
    "\3\11\3\6\14\11\4\6\5\0\3\6\3\0\1\6"+
    "\4\0\2\6\1\11\6\6\1\0\16\6\12\0\11\6"+
    "\1\11\6\6\5\0\10\11\1\6\3\11\1\6\27\11"+
    "\1\6\20\11\2\6\1\0\1\11\7\0\1\6\3\0"+
    "\1\6\4\0\7\6\2\0\1\6\3\11\2\6\1\11"+
    "\2\6\2\11\2\0\2\6\12\0\20\6\1\11\3\0"+
    "\1\6\10\11\1\6\3\11\1\6\27\11\1\6\12\11"+
    "\1\6\5\11\2\6\1\0\1\11\7\0\1\6\3\0"+
    "\1\6\4\0\7\6\2\0\6\6\2\11\1\6\2\11"+
    "\2\0\2\6\12\0\1\6\2\11\1\0\14\6\4\0"+
    "\11\11\1\6\3\11\1\6\51\11\2\0\1\11\7\0"+
    "\1\6\3\0\1\6\4\0\1\11\5\6\3\11\1\0"+
    "\7\6\3\11\2\0\2\6\12\0\12\6\6\11\1\6"+
    "\3\0\1\6\22\11\3\6\30\11\1\6\11\11\1\6"+
    "\1\11\2\6\7\11\3\6\1\0\4\6\6\0\1\6"+
    "\1\0\1\6\10\0\6\6\12\0\2\6\2\0\15\6"+
    "\60\11\1\0\2\11\7\0\4\6\10\11\10\0\1\6"+
    "\12\0\47\6\2\11\1\6\1\11\1\6\5\11\1\6"+
    "\30\11\1\6\1\11\1\6\12\11\1\0\2\11\11\0"+
    "\1\11\2\6\5\11\1\6\1\11\1\6\7\0\1\6"+
    "\12\0\2\6\4\11\40\6\1\11\27\6\2\0\6\6"+
    "\12\0\13\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\2\0\10\11\1\6\44\11\4\6\24\0\1\6\2\0"+
    "\5\11\13\0\1\6\44\0\11\6\1\0\71\6\53\11"+
    "\24\0\1\11\12\0\6\6\6\11\4\0\4\11\3\0"+
    "\1\11\3\0\2\11\7\0\3\11\4\0\15\11\14\0"+
    "\1\11\17\0\2\6\46\11\1\6\1\11\5\6\1\11"+
    "\2\6\53\11\1\6\115\11\1\6\4\11\2\6\7\11"+
    "\1\6\1\11\1\6\4\11\2\6\51\11\1\6\4\11"+
    "\2\6\41\11\1\6\4\11\2\6\7\11\1\6\1\11"+
    "\1\6\4\11\2\6\17\11\1\6\71\11\1\6\4\11"+
    "\2\6\103\11\2\6\3\0\40\6\20\11\20\6\126\11"+
    "\2\6\6\11\3\6\u016c\11\2\6\21\11\1\6\32\11"+
    "\5\6\113\11\3\6\13\11\7\6\22\11\4\0\11\6"+
    "\23\11\3\0\13\6\22\11\2\0\14\6\15\11\1\6"+
    "\3\11\1\6\2\0\14\6\64\11\40\0\3\6\1\11"+
    "\3\6\2\11\1\0\2\6\12\0\41\6\17\0\6\6"+
    "\131\11\7\6\5\11\2\0\42\11\1\0\1\11\5\6"+
    "\106\11\12\6\37\11\1\6\14\0\4\6\14\0\12\6"+
    "\12\0\36\11\2\6\5\11\13\6\54\11\4\6\32\11"+
    "\6\6\12\0\46\6\27\11\5\0\4\6\65\11\12\0"+
    "\1\6\35\0\2\6\13\0\6\6\12\0\15\6\1\11"+
    "\10\6\16\0\1\6\20\0\61\6\5\0\57\11\21\0"+
    "\10\11\3\6\12\0\21\6\11\0\14\6\3\0\36\11"+
    "\15\0\2\11\12\0\54\11\16\0\14\6\44\11\24\0"+
    "\10\6\12\0\3\6\3\11\12\0\44\11\2\6\11\11"+
    "\7\6\53\11\2\6\3\11\20\6\3\0\1\6\25\0"+
    "\4\11\1\0\6\11\1\0\2\11\3\0\1\11\5\6"+
    "\300\11\100\0\26\11\2\6\6\11\2\6\46\11\2\6"+
    "\6\11\2\6\10\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\37\11\2\6\65\11\1\6\7\11\1\6"+
    "\1\11\3\6\3\11\1\6\7\11\3\6\4\11\2\6"+
    "\6\11\4\6\15\11\5\6\3\11\1\6\7\11\16\6"+
    "\5\0\30\6\2\3\5\0\20\6\2\11\23\6\1\11"+
    "\13\6\5\0\1\6\12\0\1\6\1\11\15\6\1\11"+
    "\20\6\15\11\3\6\41\11\17\6\15\0\4\6\1\0"+
    "\3\6\14\0\21\6\1\11\4\6\1\11\2\6\12\11"+
    "\1\6\1\11\3\6\5\11\6\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\4\11\1\6\13\11\2\6\4\11"+
    "\5\6\5\11\4\6\1\11\21\6\51\11\u0177\6\345\11"+
    "\6\6\4\11\3\0\2\11\14\6\46\11\1\6\1\11"+
    "\5\6\1\11\2\6\70\11\7\6\1\11\17\6\1\0"+
    "\27\11\11\6\7\11\1\6\7\11\1\6\7\11\1\6"+
    "\7\11\1\6\7\11\1\6\7\11\1\6\7\11\1\6"+
    "\7\11\1\6\40\0\57\6\1\11\325\6\3\11\31\6"+
    "\11\11\6\0\1\6\5\11\2\6\5\11\4\6\126\11"+
    "\2\6\2\0\2\6\3\11\1\6\132\11\1\6\4\11"+
    "\5\6\53\11\1\6\136\11\21\6\40\11\60\6\320\11"+
    "\100\6\215\11\103\6\56\11\2\6\15\11\3\6\20\11"+
    "\12\0\2\11\24\6\57\11\1\0\4\6\12\0\1\6"+
    "\37\11\2\0\120\11\2\0\45\6\11\11\2\6\147\11"+
    "\2\6\100\11\5\6\2\11\1\6\1\11\1\6\5\11"+
    "\30\6\20\11\1\0\3\11\1\0\4\11\1\0\27\11"+
    "\5\0\4\6\1\0\13\6\1\11\7\6\64\11\14\6"+
    "\2\0\62\11\22\0\12\6\12\0\6\6\22\0\6\11"+
    "\3\6\1\11\1\6\2\11\13\0\34\11\10\0\2\6"+
    "\27\11\15\0\14\6\35\11\3\6\4\0\57\11\16\0"+
    "\16\6\1\11\12\0\6\6\5\11\1\0\12\11\12\0"+
    "\5\11\1\6\51\11\16\0\11\6\3\11\1\0\10\11"+
    "\2\0\2\6\12\0\6\6\27\11\3\6\1\11\3\0"+
    "\62\11\1\0\1\11\3\0\2\11\2\0\5\11\2\0"+
    "\1\11\1\0\1\11\30\6\3\11\2\6\13\11\5\0"+
    "\2\6\3\11\2\0\12\6\6\11\2\6\6\11\2\6"+
    "\6\11\11\6\7\11\1\6\7\11\1\6\53\11\1\6"+
    "\16\11\6\6\163\11\10\0\1\6\2\0\2\6\12\0"+
    "\6\6\244\11\14\6\27\11\4\6\61\11\4\6\u0100\3"+
    "\156\11\2\6\152\11\46\6\7\11\14\6\5\11\5\6"+
    "\1\11\1\0\12\11\1\6\15\11\1\6\5\11\1\6"+
    "\1\11\1\6\2\11\1\6\2\11\1\6\154\11\41\6"+
    "\153\11\22\6\100\11\2\6\66\11\50\6\15\11\3\6"+
    "\20\0\20\6\20\0\3\6\2\11\30\6\3\11\31\6"+
    "\1\11\6\6\5\11\1\6\207\11\2\6\1\0\4\6"+
    "\1\11\13\6\12\0\7\6\32\11\4\6\1\11\1\6"+
    "\32\11\13\6\131\11\3\6\6\11\2\6\6\11\2\6"+
    "\6\11\2\6\3\11\3\6\2\11\3\6\2\11\22\6"+
    "\3\0\4\6\14\11\1\6\32\11\1\6\23\11\1\6"+
    "\2\11\1\6\17\11\2\6\16\11\42\6\173\11\105\6"+
    "\65\11\210\6\1\0\202\6\35\11\3\6\61\11\17\6"+
    "\1\0\37\6\40\11\15\6\36\11\5\6\46\11\5\0"+
    "\5\6\36\11\2\6\44\11\4\6\10\11\1\6\5\11"+
    "\52\6\236\11\2\6\12\0\6\6\44\11\4\6\44\11"+
    "\4\6\50\11\10\6\64\11\14\6\13\11\1\6\17\11"+
    "\1\6\7\11\1\6\2\11\1\6\13\11\1\6\17\11"+
    "\1\6\7\11\1\6\2\11\103\6\67\11\11\6\26\11"+
    "\12\6\10\11\30\6\6\11\1\6\52\11\1\6\11\11"+
    "\105\6\6\11\2\6\1\11\1\6\54\11\1\6\2\11"+
    "\3\6\1\11\2\6\27\11\12\6\27\11\11\6\37\11"+
    "\101\6\23\11\1\6\2\11\12\6\26\11\12\6\32\11"+
    "\106\6\70\11\6\6\2\11\100\6\1\11\3\0\1\6"+
    "\2\0\5\6\4\0\4\11\1\6\3\11\1\6\35\11"+
    "\2\6\3\0\4\6\1\0\40\6\35\11\3\6\35\11"+
    "\43\6\10\11\1\6\34\11\2\0\31\6\66\11\12\6"+
    "\26\11\12\6\23\11\15\6\22\11\156\6\111\11\67\6"+
    "\63\11\15\6\63\11\15\6\44\11\4\0\10\6\12\0"+
    "\u0146\6\52\11\1\6\2\0\3\6\2\11\113\6\3\0"+
    "\35\11\12\6\1\11\10\6\26\11\13\0\37\6\22\11"+
    "\4\0\52\6\25\11\33\6\27\11\11\6\3\0\65\11"+
    "\17\0\37\6\13\0\2\11\2\0\1\11\11\6\4\0"+
    "\55\11\13\0\2\6\1\0\4\6\1\0\12\6\1\0"+
    "\2\6\31\11\7\6\12\0\6\6\3\0\44\11\16\0"+
    "\1\6\12\0\4\6\1\11\2\0\1\11\10\6\43\11"+
    "\1\0\2\6\1\11\11\6\3\0\60\11\16\0\4\11"+
    "\4\6\4\0\1\6\14\0\1\11\1\6\1\11\43\6"+
    "\22\11\1\6\31\11\14\0\6\6\1\0\2\11\1\0"+
    "\76\6\7\11\1\6\1\11\1\6\4\11\1\6\17\11"+
    "\1\6\12\11\7\6\57\11\14\0\5\6\12\0\6\6"+
    "\4\0\1\6\10\11\2\6\2\11\2\6\26\11\1\6"+
    "\7\11\1\6\2\11\1\6\5\11\1\6\2\0\1\11"+
    "\7\0\2\6\2\0\2\6\3\0\2\6\1\11\6\6"+
    "\1\0\5\6\5\11\2\0\2\6\7\0\3\6\5\0"+
    "\213\6\65\11\22\0\4\11\5\6\12\0\4\6\1\0"+
    "\3\11\36\6\60\11\24\0\2\11\1\6\1\11\10\6"+
    "\12\0\246\6\57\11\7\0\2\6\11\0\27\6\4\11"+
    "\2\0\42\6\60\11\21\0\3\6\1\11\13\6\12\0"+
    "\46\6\53\11\15\0\1\11\7\6\12\0\66\6\33\11"+
    "\2\6\17\0\4\6\12\0\6\6\7\11\271\6\54\11"+
    "\17\0\145\6\100\11\12\0\25\6\10\11\2\6\1\11"+
    "\2\6\10\11\1\6\2\11\1\6\30\11\6\0\1\6"+
    "\2\0\2\6\4\0\1\11\1\0\1\11\2\0\14\6"+
    "\12\0\106\6\10\11\2\6\47\11\7\0\2\6\7\0"+
    "\1\11\1\6\1\11\1\0\33\6\1\11\12\0\50\11"+
    "\7\0\1\11\4\0\10\6\1\0\10\6\1\11\13\0"+
    "\56\11\20\0\3\6\1\11\22\6\111\11\7\6\11\11"+
    "\1\6\45\11\10\0\1\6\10\0\1\11\17\6\12\0"+
    "\30\6\36\11\2\6\26\0\1\6\16\0\111\6\7\11"+
    "\1\6\2\11\1\6\46\11\6\0\3\6\1\0\1\6"+
    "\2\0\1\6\7\0\1\11\1\0\10\6\12\0\6\6"+
    "\6\11\1\6\2\11\1\6\40\11\5\0\1\6\2\0"+
    "\1\6\5\0\1\11\7\6\12\0\u0136\6\23\11\4\0"+
    "\11\6\2\0\1\11\1\0\15\11\1\6\42\11\7\0"+
    "\3\6\5\0\15\6\12\0\126\6\1\11\54\6\4\11"+
    "\37\6\232\11\146\6\157\11\21\6\304\11\u014c\6\141\11"+
    "\17\6\60\11\21\0\6\11\17\0\252\6\107\11\271\6"+
    "\71\11\7\6\37\11\1\6\12\0\6\6\117\11\1\6"+
    "\12\0\6\6\36\11\2\6\5\0\13\6\60\11\7\0"+
    "\11\6\4\11\14\6\12\0\11\6\25\11\5\6\23\11"+
    "\260\6\100\11\200\6\113\11\4\6\1\0\1\11\67\0"+
    "\7\6\4\0\15\11\100\6\2\11\1\6\1\11\1\0"+
    "\13\6\2\0\16\6\370\11\10\6\326\11\52\6\11\11"+
    "\u01e7\6\4\11\1\6\7\11\1\6\2\11\1\6\43\11"+
    "\17\6\1\11\35\6\3\11\2\6\1\11\16\6\4\11"+
    "\10\6\u018c\11\4\6\153\11\5\6\15\11\3\6\11\11"+
    "\7\6\12\11\3\6\2\0\1\6\4\0\134\6\56\0"+
    "\2\6\27\0\u011e\6\5\0\3\6\26\0\2\6\7\0"+
    "\36\6\4\0\224\6\3\0\273\6\125\11\1\6\107\11"+
    "\1\6\2\11\2\6\1\11\2\6\2\11\2\6\4\11"+
    "\1\6\14\11\1\6\1\11\1\6\7\11\1\6\101\11"+
    "\1\6\4\11\2\6\10\11\1\6\7\11\1\6\34\11"+
    "\1\6\4\11\1\6\5\11\1\6\1\11\3\6\7\11"+
    "\1\6\u0154\11\2\6\31\11\1\6\31\11\1\6\37\11"+
    "\1\6\31\11\1\6\37\11\1\6\31\11\1\6\37\11"+
    "\1\6\31\11\1\6\37\11\1\6\31\11\1\6\10\11"+
    "\2\6\151\0\4\6\62\0\10\6\1\0\16\6\1\0"+
    "\26\6\5\0\1\6\17\0\120\6\37\11\6\6\6\11"+
    "\325\6\7\0\1\6\21\0\2\6\7\0\1\6\2\0"+
    "\1\6\5\0\5\6\76\11\41\6\1\0\160\6\55\11"+
    "\3\6\7\0\7\11\2\6\12\0\4\6\1\11\u0141\6"+
    "\36\11\1\0\21\6\54\11\16\0\5\6\1\11\320\6"+
    "\34\11\16\0\346\6\7\11\1\6\4\11\1\6\2\11"+
    "\1\6\17\11\1\6\305\11\13\6\7\0\51\6\104\11"+
    "\7\0\1\11\4\6\12\0\u0156\6\1\11\117\6\4\11"+
    "\1\6\33\11\1\6\2\11\1\6\1\11\2\6\1\11"+
    "\1\6\12\11\1\6\4\11\1\6\1\11\1\6\1\11"+
    "\6\6\1\11\4\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\3\11\1\6\2\11\1\6\1\11\2\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\2\11\1\6\1\11\2\6\4\11\1\6\7\11"+
    "\1\6\4\11\1\6\4\11\1\6\1\11\1\6\12\11"+
    "\1\6\21\11\5\6\3\11\1\6\5\11\1\6\21\11"+
    "\u0134\6\12\0\6\6\340\11\40\6\72\11\6\6\336\11"+
    "\2\6\u0182\11\16\6\u0131\11\17\6\156\11\242\6\36\11"+
    "\342\6\113\11\5\6\u0160\11\121\6\1\0\36\6\140\0"+
    "\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[33024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\2\2\1\3\1\4\1\5\1\6\1\3"+
    "\1\7\1\10\1\6\1\11\1\12\1\13\1\3\16\5"+
    "\1\1\1\14\1\10\1\11\1\3\21\5\1\10\1\15"+
    "\1\1\1\16\2\6\14\5\1\1\1\2\1\17\1\0"+
    "\1\17\1\6\1\10\1\11\1\3\1\1\1\20\1\6"+
    "\1\21\1\10\1\11\1\3\2\1\1\2\1\0\1\6"+
    "\1\10\1\11\1\3\1\1\1\20\1\22\1\6\1\10"+
    "\1\11\1\3\1\1\1\23\2\0\10\5\1\24\12\5"+
    "\1\0\7\5\1\24\2\5\1\24\13\5\1\0\1\25"+
    "\1\0\1\25\16\5\3\17\1\20\1\3\1\26\1\27"+
    "\2\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\3\17\1\3\1\26\1\27\2\40\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\2\0\1\13\17\5\2\0\26\5"+
    "\2\0\1\25\16\5\1\41\2\0\1\42\1\30\1\43"+
    "\2\0\1\40\3\0\11\5\1\0\20\5\1\0\10\5"+
    "\1\12\3\0\12\5\1\24\6\5\1\24\3\5\1\44"+
    "\2\0\6\5\2\0\2\5\1\45\2\0\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[350];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\236\0\355\0\u013c\0\u018b\0\u01da\0\u0229"+
    "\0\u0278\0\u0278\0\u02c7\0\u0278\0\u0278\0\u0316\0\u0365\0\u03b4"+
    "\0\u0278\0\u0278\0\u0278\0\u0278\0\u0403\0\u0403\0\u0452\0\u04a1"+
    "\0\u04f0\0\u053f\0\u058e\0\u05dd\0\u062c\0\u067b\0\u06ca\0\u0719"+
    "\0\u0768\0\u07b7\0\u0806\0\u0855\0\u08a4\0\u08f3\0\u0278\0\u0942"+
    "\0\u0991\0\u09e0\0\u0a2f\0\u0a7e\0\u0acd\0\u0b1c\0\u0b6b\0\u0bba"+
    "\0\u0c09\0\u0c58\0\u0ca7\0\u0cf6\0\u0d45\0\u0d94\0\u0de3\0\u0e32"+
    "\0\u0e81\0\u0ed0\0\u0f1f\0\u0f6e\0\u0278\0\u03b4\0\u0278\0\u0fbd"+
    "\0\u0452\0\u100c\0\u105b\0\u10aa\0\u10f9\0\u1148\0\u1197\0\u11e6"+
    "\0\u1235\0\u1284\0\u12d3\0\u1322\0\u1371\0\u13c0\0\u13c0\0\u0278"+
    "\0\u13c0\0\u140f\0\u13c0\0\u13c0\0\u13c0\0\u145e\0\u14ad\0\u14fc"+
    "\0\u14fc\0\u0278\0\u14fc\0\u14fc\0\u154b\0\u159a\0\u15e9\0\u15e9"+
    "\0\u15e9\0\u15e9\0\u15e9\0\u15e9\0\u1638\0\u1687\0\u16d6\0\u0278"+
    "\0\u16d6\0\u16d6\0\u16d6\0\u1725\0\u1774\0\u0278\0\u17c3\0\u1812"+
    "\0\u1861\0\u18b0\0\u18ff\0\u194e\0\u199d\0\u19ec\0\u1a3b\0\u1a8a"+
    "\0\u0316\0\u1ad9\0\u1b28\0\u1b77\0\u1bc6\0\u1c15\0\u1c64\0\u1cb3"+
    "\0\u1d02\0\u1d51\0\u1da0\0\u1def\0\u1e3e\0\u1e8d\0\u1edc\0\u1f2b"+
    "\0\u1f7a\0\u1fc9\0\u2018\0\u2067\0\u20b6\0\u2105\0\u2154\0\u21a3"+
    "\0\u21f2\0\u2241\0\u2290\0\u22df\0\u232e\0\u237d\0\u23cc\0\u241b"+
    "\0\u246a\0\u24b9\0\u0f6e\0\u0278\0\u2508\0\u2557\0\u25a6\0\u25f5"+
    "\0\u2644\0\u2693\0\u26e2\0\u2731\0\u2780\0\u27cf\0\u281e\0\u286d"+
    "\0\u28bc\0\u290b\0\u295a\0\u29a9\0\u13c0\0\u29f8\0\u2a47\0\u2a96"+
    "\0\u2a96\0\u2ae5\0\u2ae5\0\u2b34\0\u2b83\0\u2ae5\0\u2ae5\0\u2ae5"+
    "\0\u2ae5\0\u2ae5\0\u2ae5\0\u0278\0\u2bd2\0\u2c21\0\u2c70\0\u16d6"+
    "\0\u0278\0\u0278\0\u2cbf\0\u2d0e\0\u0278\0\u0278\0\u0278\0\u0278"+
    "\0\u0278\0\u0278\0\u2d5d\0\u2dac\0\u1812\0\u2dfb\0\u2e4a\0\u2e99"+
    "\0\u2ee8\0\u2f37\0\u2f86\0\u2fd5\0\u3024\0\u3073\0\u30c2\0\u3111"+
    "\0\u3160\0\u31af\0\u31fe\0\u324d\0\u329c\0\u32eb\0\u333a\0\u3389"+
    "\0\u33d8\0\u3427\0\u3476\0\u34c5\0\u3514\0\u3563\0\u35b2\0\u3601"+
    "\0\u3650\0\u369f\0\u36ee\0\u373d\0\u378c\0\u37db\0\u382a\0\u3879"+
    "\0\u38c8\0\u3917\0\u3966\0\u39b5\0\u3a04\0\u3a53\0\u3aa2\0\u3af1"+
    "\0\u3b40\0\u3b8f\0\u3bde\0\u3c2d\0\u3c7c\0\u3ccb\0\u3d1a\0\u3d69"+
    "\0\u3db8\0\u3e07\0\u3e56\0\u3ea5\0\u3ef4\0\u0278\0\u2a47\0\u3f43"+
    "\0\u0278\0\u3f92\0\u0278\0\u2c70\0\u3fe1\0\u0278\0\u4030\0\u407f"+
    "\0\u40ce\0\u411d\0\u416c\0\u41bb\0\u420a\0\u4259\0\u42a8\0\u42f7"+
    "\0\u4346\0\u4395\0\u43e4\0\u4433\0\u4482\0\u44d1\0\u4520\0\u456f"+
    "\0\u45be\0\u460d\0\u465c\0\u46ab\0\u46fa\0\u4749\0\u4798\0\u47e7"+
    "\0\u4836\0\u4885\0\u48d4\0\u4923\0\u4972\0\u49c1\0\u4a10\0\u4a5f"+
    "\0\u4aae\0\u4afd\0\u4b4c\0\u4b9b\0\u0316\0\u4bea\0\u4c39\0\u4c88"+
    "\0\u4cd7\0\u4d26\0\u4d75\0\u4dc4\0\u4e13\0\u4e62\0\u4eb1\0\u4f00"+
    "\0\u4f4f\0\u4f9e\0\u4fed\0\u503c\0\u508b\0\u50da\0\u5129\0\u5178"+
    "\0\u51c7\0\u5216\0\u5265\0\u52b4\0\u5303\0\u0278\0\u5352\0\u53a1"+
    "\0\u53f0\0\u543f\0\u548e\0\u54dd\0\u552c\0\u557b\0\u55ca\0\u5619"+
    "\0\u5668\0\u56b7\0\u0278\0\u5706\0\u5755\0\u0278";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[350];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\2\12\1\0\1\12\1\13\1\11\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\2\22\2\23\2\24\1\23"+
    "\1\25\3\26\1\24\3\27\11\16\1\30\5\16\1\31"+
    "\7\16\1\22\1\11\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\16\1\41\2\16\1\42\4\16\1\43"+
    "\2\16\1\44\1\45\1\16\1\22\1\46\1\22\1\0"+
    "\1\11\2\12\1\0\1\12\1\13\3\11\1\16\1\17"+
    "\1\11\1\47\1\50\1\22\2\23\2\24\1\23\1\25"+
    "\3\26\1\51\1\52\1\14\1\27\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\2\16\1\61\3\16\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\16\1\22\1\11\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\2\16\1\61\2\16\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\16\1\74"+
    "\1\11\1\22\1\0\1\11\2\12\1\0\1\12\1\13"+
    "\1\11\1\14\1\75\1\16\1\17\1\76\1\77\2\22"+
    "\2\23\2\24\1\100\4\26\1\24\1\27\1\101\1\27"+
    "\21\16\1\102\5\16\1\22\1\11\1\16\1\103\1\104"+
    "\1\105\1\106\1\107\2\16\1\110\3\16\1\111\1\16"+
    "\1\112\1\113\1\114\1\115\1\16\1\44\1\45\1\16"+
    "\1\22\1\46\1\22\1\0\1\116\1\117\1\120\1\121"+
    "\1\117\1\122\4\116\1\123\1\116\1\11\2\124\2\123"+
    "\2\125\1\123\4\116\1\125\1\126\1\116\1\126\27\116"+
    "\1\124\1\127\26\116\1\124\1\116\1\124\1\121\2\130"+
    "\1\120\2\130\1\122\4\130\1\131\1\130\1\132\2\133"+
    "\2\131\2\134\1\131\4\130\1\134\1\135\1\130\1\135"+
    "\27\130\1\133\1\136\26\130\1\133\1\130\1\133\1\130"+
    "\1\137\1\140\1\120\1\141\1\140\1\122\4\137\1\142"+
    "\1\137\1\11\2\143\2\142\2\144\1\142\4\137\1\144"+
    "\1\145\1\137\1\145\27\137\1\143\1\146\26\137\1\143"+
    "\1\137\1\143\1\141\2\147\1\120\2\147\1\122\2\147"+
    "\1\150\1\147\1\151\2\147\2\152\2\151\2\153\1\151"+
    "\4\147\1\153\1\154\1\147\1\154\27\147\1\152\1\155"+
    "\26\147\1\152\1\147\1\152\3\147\1\120\2\147\1\122"+
    "\2\147\1\156\1\147\1\151\2\147\2\152\2\151\2\153"+
    "\1\151\4\147\1\153\1\154\1\147\1\154\27\147\1\152"+
    "\1\155\26\147\1\152\1\147\1\152\1\147\121\0\1\12"+
    "\114\0\1\16\10\0\1\16\12\0\4\16\4\0\27\16"+
    "\2\0\26\16\3\0\1\16\12\0\1\157\117\0\1\14"+
    "\125\0\1\160\1\0\4\26\121\0\1\14\64\0\1\16"+
    "\10\0\1\16\12\0\4\16\4\0\1\161\26\16\2\0"+
    "\26\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\1\162\26\16\2\0\26\16\3\0\2\16\10\0\1\16"+
    "\12\0\4\16\4\0\27\16\2\0\17\16\1\163\6\16"+
    "\3\0\2\16\10\0\1\16\12\0\4\16\4\0\27\16"+
    "\2\0\17\16\1\164\6\16\3\0\2\16\10\0\1\16"+
    "\12\0\4\16\4\0\27\16\2\0\1\165\6\16\1\166"+
    "\2\16\1\167\2\16\1\170\10\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\27\16\2\0\15\16\1\171"+
    "\10\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\27\16\2\0\12\16\1\165\13\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\27\16\2\0\12\16\1\172"+
    "\2\16\1\173\10\16\3\0\2\16\10\0\1\16\12\0"+
    "\4\16\4\0\27\16\2\0\4\16\1\174\21\16\3\0"+
    "\2\16\10\0\1\16\12\0\4\16\4\0\27\16\2\0"+
    "\5\16\1\171\6\16\1\175\11\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\27\16\2\0\1\176\25\16"+
    "\3\0\2\16\10\0\1\16\12\0\4\16\4\0\27\16"+
    "\2\0\2\16\1\177\16\16\1\200\2\16\1\201\1\16"+
    "\3\0\2\16\10\0\1\16\12\0\4\16\4\0\27\16"+
    "\2\0\15\16\1\202\10\16\3\0\2\16\10\0\1\16"+
    "\12\0\4\16\4\0\27\16\2\0\7\16\1\203\16\16"+
    "\3\0\1\16\114\0\1\14\21\0\1\204\131\0\1\23"+
    "\116\0\2\14\63\0\1\16\10\0\1\16\12\0\4\16"+
    "\4\0\15\16\1\205\2\16\1\206\6\16\2\0\14\16"+
    "\1\205\2\16\1\206\6\16\3\0\2\16\10\0\1\16"+
    "\12\0\4\16\4\0\4\16\1\207\11\16\1\210\1\16"+
    "\1\211\6\16\2\0\4\16\1\207\10\16\1\210\1\16"+
    "\1\211\6\16\3\0\2\16\10\0\1\16\12\0\4\16"+
    "\4\0\1\212\6\16\1\72\6\16\1\213\10\16\2\0"+
    "\1\212\6\16\1\72\5\16\1\213\10\16\3\0\2\16"+
    "\10\0\1\16\12\0\4\16\4\0\16\16\1\214\10\16"+
    "\2\0\15\16\1\214\10\16\3\0\2\16\10\0\1\16"+
    "\12\0\4\16\4\0\13\16\1\212\1\16\1\205\11\16"+
    "\2\0\12\16\1\212\1\16\1\205\11\16\3\0\2\16"+
    "\10\0\1\16\12\0\4\16\4\0\16\16\1\215\4\16"+
    "\1\216\3\16\2\0\15\16\1\215\4\16\1\216\3\16"+
    "\3\0\2\16\10\0\1\16\12\0\4\16\4\0\5\16"+
    "\1\171\7\16\1\217\11\16\2\0\5\16\1\171\6\16"+
    "\1\217\11\16\3\0\2\16\10\0\1\16\12\0\4\16"+
    "\4\0\16\16\1\205\10\16\2\0\15\16\1\205\10\16"+
    "\3\0\2\16\10\0\1\16\12\0\4\16\4\0\16\16"+
    "\1\220\10\16\2\0\15\16\1\220\10\16\3\0\2\16"+
    "\10\0\1\16\12\0\4\16\4\0\5\16\1\171\12\16"+
    "\1\171\6\16\2\0\5\16\1\171\11\16\1\171\6\16"+
    "\3\0\2\16\10\0\1\16\12\0\4\16\4\0\1\221"+
    "\17\16\1\222\6\16\2\0\1\221\16\16\1\222\6\16"+
    "\3\0\2\16\10\0\1\16\12\0\4\16\4\0\4\16"+
    "\1\223\22\16\2\0\4\16\1\223\21\16\3\0\2\16"+
    "\10\0\1\16\12\0\4\16\4\0\4\16\1\220\15\16"+
    "\1\224\2\16\1\225\1\16\2\0\4\16\1\220\14\16"+
    "\1\224\2\16\1\225\1\16\3\0\2\16\10\0\1\16"+
    "\12\0\4\16\4\0\7\16\1\226\6\16\1\171\7\16"+
    "\1\227\2\0\7\16\1\226\5\16\1\171\10\16\3\0"+
    "\2\16\10\0\1\16\12\0\4\16\4\0\15\16\1\230"+
    "\11\16\2\0\14\16\1\230\11\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\1\215\26\16\2\0\1\215"+
    "\25\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\7\16\1\231\1\232\16\16\2\0\7\16\1\231\1\232"+
    "\15\16\3\0\1\16\2\233\1\0\112\233\1\234\1\233"+
    "\17\0\1\235\3\0\1\236\73\0\1\16\10\0\1\16"+
    "\12\0\4\16\4\0\27\16\2\0\21\16\1\200\4\16"+
    "\3\0\2\16\10\0\1\16\12\0\4\16\4\0\27\16"+
    "\2\0\15\16\1\237\1\16\1\164\6\16\3\0\2\16"+
    "\10\0\1\16\12\0\4\16\4\0\27\16\2\0\1\165"+
    "\6\16\1\166\2\16\1\240\2\16\1\241\10\16\3\0"+
    "\2\16\10\0\1\16\12\0\4\16\4\0\27\16\2\0"+
    "\4\16\1\242\10\16\1\171\10\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\27\16\2\0\12\16\1\165"+
    "\12\16\1\243\3\0\2\16\10\0\1\16\12\0\4\16"+
    "\4\0\27\16\2\0\1\244\11\16\1\172\2\16\1\173"+
    "\10\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\27\16\2\0\5\16\1\171\6\16\1\245\11\16\3\0"+
    "\2\16\10\0\1\16\12\0\4\16\4\0\27\16\2\0"+
    "\22\16\1\246\3\16\3\0\2\16\10\0\1\16\12\0"+
    "\4\16\4\0\27\16\2\0\17\16\1\247\2\16\1\250"+
    "\3\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\27\16\2\0\4\16\1\251\21\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\27\16\2\0\22\16\1\252"+
    "\1\16\1\201\1\16\3\0\2\16\10\0\1\16\12\0"+
    "\4\16\4\0\27\16\2\0\7\16\1\253\7\16\1\254"+
    "\6\16\3\0\1\16\14\0\1\150\104\0\1\120\130\0"+
    "\1\150\15\0\1\14\64\0\2\120\4\0\2\120\1\255"+
    "\3\120\1\255\7\120\2\256\1\257\35\120\1\255\1\120"+
    "\1\255\3\120\1\255\6\120\1\255\2\120\1\255\1\120"+
    "\1\255\7\120\1\0\2\260\1\0\2\260\1\0\6\260"+
    "\1\132\47\260\1\0\34\260\1\0\2\260\1\0\6\260"+
    "\1\132\15\260\1\261\31\260\1\0\32\260\2\120\4\0"+
    "\2\120\1\262\3\120\1\263\7\120\2\264\1\265\35\120"+
    "\1\266\1\120\1\267\3\120\1\270\6\120\1\271\2\120"+
    "\1\272\1\120\1\273\7\120\15\0\1\274\116\0\1\274"+
    "\15\0\1\14\64\0\2\120\4\0\2\120\1\275\3\120"+
    "\1\275\7\120\2\276\1\277\35\120\1\275\1\120\1\275"+
    "\3\120\1\275\6\120\1\275\2\120\1\275\1\120\1\275"+
    "\7\120\1\0\2\147\1\0\2\147\1\0\2\147\1\0"+
    "\53\147\1\0\34\147\1\0\2\147\1\0\2\147\1\0"+
    "\21\147\1\300\31\147\1\0\32\147\2\120\4\0\2\120"+
    "\1\301\3\120\1\302\7\120\2\303\1\304\35\120\1\305"+
    "\1\120\1\306\3\120\1\307\6\120\1\310\2\120\1\311"+
    "\1\120\1\312\7\120\46\0\1\313\5\0\1\314\67\0"+
    "\4\315\67\0\1\16\10\0\1\16\12\0\4\16\4\0"+
    "\24\16\1\316\2\16\2\0\26\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\21\16\1\317\5\16\2\0"+
    "\26\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\27\16\2\0\17\16\1\320\6\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\27\16\2\0\4\16\1\321"+
    "\21\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\27\16\2\0\20\16\1\322\5\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\27\16\2\0\1\173\25\16"+
    "\3\0\2\16\10\0\1\16\12\0\4\16\4\0\27\16"+
    "\2\0\17\16\1\323\6\16\3\0\2\16\10\0\1\16"+
    "\12\0\4\16\4\0\27\16\2\0\14\16\1\324\11\16"+
    "\3\0\2\16\10\0\1\16\12\0\4\16\4\0\27\16"+
    "\2\0\15\16\1\325\10\16\3\0\2\16\10\0\1\16"+
    "\12\0\4\16\4\0\27\16\2\0\17\16\1\171\6\16"+
    "\3\0\2\16\10\0\1\16\12\0\4\16\4\0\27\16"+
    "\2\0\21\16\1\326\4\16\3\0\2\16\10\0\1\16"+
    "\12\0\4\16\4\0\27\16\2\0\2\16\1\327\16\16"+
    "\1\171\4\16\3\0\2\16\10\0\1\16\12\0\4\16"+
    "\4\0\27\16\2\0\10\16\1\330\15\16\3\0\2\16"+
    "\10\0\1\16\12\0\4\16\4\0\27\16\2\0\1\331"+
    "\25\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\27\16\2\0\17\16\1\332\6\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\27\16\2\0\10\16\1\174"+
    "\15\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\27\16\2\0\10\16\1\333\15\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\27\16\2\0\10\16\1\334"+
    "\15\16\3\0\1\16\17\335\1\336\77\335\1\16\10\0"+
    "\1\16\12\0\4\16\4\0\3\16\1\171\23\16\2\0"+
    "\3\16\1\171\22\16\3\0\2\16\10\0\1\16\12\0"+
    "\4\16\4\0\20\16\1\337\6\16\2\0\17\16\1\337"+
    "\6\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\6\16\1\340\20\16\2\0\6\16\1\340\17\16\3\0"+
    "\2\16\10\0\1\16\12\0\4\16\4\0\16\16\1\341"+
    "\10\16\2\0\15\16\1\341\10\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\4\16\1\342\22\16\2\0"+
    "\4\16\1\342\21\16\3\0\2\16\10\0\1\16\12\0"+
    "\4\16\4\0\21\16\1\343\5\16\2\0\20\16\1\343"+
    "\5\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\15\16\1\344\11\16\2\0\14\16\1\344\11\16\3\0"+
    "\2\16\10\0\1\16\12\0\4\16\4\0\25\16\1\345"+
    "\1\16\2\0\24\16\1\345\1\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\20\16\1\171\6\16\2\0"+
    "\17\16\1\171\6\16\3\0\2\16\10\0\1\16\12\0"+
    "\4\16\4\0\15\16\1\346\11\16\2\0\14\16\1\346"+
    "\11\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\22\16\1\347\4\16\2\0\21\16\1\347\4\16\3\0"+
    "\2\16\10\0\1\16\12\0\4\16\4\0\22\16\1\171"+
    "\4\16\2\0\21\16\1\171\4\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\2\16\1\350\24\16\2\0"+
    "\2\16\1\350\23\16\3\0\2\16\10\0\1\16\12\0"+
    "\4\16\4\0\10\16\1\351\5\16\1\352\10\16\2\0"+
    "\10\16\1\351\4\16\1\352\10\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\1\353\1\16\1\354\14\16"+
    "\1\355\2\16\1\356\4\16\2\0\1\353\1\16\1\354"+
    "\13\16\1\355\2\16\1\356\4\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\20\16\1\357\6\16\2\0"+
    "\17\16\1\357\6\16\3\0\2\16\10\0\1\16\12\0"+
    "\4\16\4\0\10\16\1\360\16\16\2\0\10\16\1\360"+
    "\15\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\4\16\1\361\22\16\2\0\4\16\1\361\21\16\3\0"+
    "\2\16\10\0\1\16\12\0\4\16\4\0\17\16\1\343"+
    "\7\16\2\0\16\16\1\343\7\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\22\16\1\362\4\16\2\0"+
    "\21\16\1\362\4\16\3\0\2\16\10\0\1\16\12\0"+
    "\4\16\4\0\10\16\1\363\16\16\2\0\10\16\1\363"+
    "\15\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\22\16\1\364\4\16\2\0\21\16\1\364\4\16\3\0"+
    "\1\16\17\365\1\366\77\365\2\236\1\234\2\236\1\367"+
    "\111\236\1\16\10\0\1\16\12\0\4\16\4\0\27\16"+
    "\2\0\15\16\1\370\10\16\3\0\2\16\10\0\1\16"+
    "\12\0\4\16\4\0\27\16\2\0\1\371\25\16\3\0"+
    "\2\16\10\0\1\16\12\0\4\16\4\0\27\16\2\0"+
    "\14\16\1\372\11\16\3\0\2\16\10\0\1\16\12\0"+
    "\4\16\4\0\27\16\2\0\5\16\1\373\20\16\3\0"+
    "\2\16\10\0\1\16\12\0\4\16\4\0\27\16\2\0"+
    "\21\16\1\374\4\16\3\0\2\16\10\0\1\16\12\0"+
    "\4\16\4\0\27\16\2\0\12\16\1\375\13\16\3\0"+
    "\2\16\10\0\1\16\12\0\4\16\4\0\27\16\2\0"+
    "\21\16\1\171\4\16\3\0\2\16\10\0\1\16\12\0"+
    "\4\16\4\0\27\16\2\0\12\16\1\376\13\16\3\0"+
    "\2\16\10\0\1\16\12\0\4\16\4\0\27\16\2\0"+
    "\10\16\1\377\4\16\1\u0100\10\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\27\16\2\0\1\16\1\u0101"+
    "\24\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\27\16\2\0\21\16\1\u0102\4\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\27\16\2\0\16\16\1\u0103"+
    "\7\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\27\16\2\0\10\16\1\u0104\15\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\27\16\2\0\22\16\1\u0105"+
    "\3\16\3\0\1\16\14\0\1\u0106\7\0\3\u0107\104\0"+
    "\1\u0106\7\0\3\u0108\70\0\2\260\1\0\2\260\1\0"+
    "\6\260\1\0\47\260\1\0\32\260\14\0\1\132\116\0"+
    "\1\u0109\7\0\3\265\104\0\1\u0109\7\0\3\u010a\104\0"+
    "\1\156\116\0\1\u010b\7\0\3\u010c\104\0\1\u010b\7\0"+
    "\3\u010d\114\0\3\304\114\0\3\u010e\124\0\1\u010f\116\0"+
    "\1\u0110\17\0\1\u0111\42\0\1\16\10\0\1\16\12\0"+
    "\4\16\4\0\1\171\26\16\2\0\26\16\3\0\2\16"+
    "\10\0\1\16\12\0\4\16\4\0\2\16\1\u0112\24\16"+
    "\2\0\26\16\3\0\2\16\10\0\1\16\12\0\4\16"+
    "\4\0\27\16\2\0\4\16\1\u0113\21\16\3\0\2\16"+
    "\10\0\1\16\12\0\4\16\4\0\27\16\2\0\1\u0114"+
    "\25\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\27\16\2\0\4\16\1\171\21\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\27\16\2\0\20\16\1\u0115"+
    "\5\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\27\16\2\0\20\16\1\245\1\u0116\4\16\3\0\2\16"+
    "\10\0\1\16\12\0\4\16\4\0\27\16\2\0\1\245"+
    "\25\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\27\16\2\0\2\16\1\u0117\23\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\27\16\2\0\12\16\1\u0118"+
    "\13\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\27\16\2\0\14\16\1\171\11\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\27\16\2\0\14\16\1\u0119"+
    "\11\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\27\16\2\0\10\16\1\u011a\15\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\27\16\2\0\3\16\1\171"+
    "\22\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\27\16\2\0\12\16\1\322\13\16\3\0\1\16\17\335"+
    "\1\u011b\77\335\16\0\1\234\1\336\77\0\1\16\10\0"+
    "\1\16\12\0\4\16\4\0\1\u011c\26\16\2\0\1\u011c"+
    "\25\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\10\16\1\361\16\16\2\0\10\16\1\361\15\16\3\0"+
    "\2\16\10\0\1\16\12\0\4\16\4\0\13\16\1\u011d"+
    "\13\16\2\0\12\16\1\u011d\13\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\1\u011e\26\16\2\0\1\u011e"+
    "\25\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\4\16\1\171\22\16\2\0\4\16\1\171\21\16\3\0"+
    "\2\16\10\0\1\16\12\0\4\16\4\0\21\16\1\220"+
    "\1\u011f\4\16\2\0\20\16\1\220\1\u011f\4\16\3\0"+
    "\2\16\10\0\1\16\12\0\4\16\4\0\15\16\1\u0120"+
    "\11\16\2\0\14\16\1\u0120\11\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\2\16\1\u0121\24\16\2\0"+
    "\2\16\1\u0121\23\16\3\0\2\16\10\0\1\16\12\0"+
    "\4\16\4\0\4\16\1\u0122\22\16\2\0\4\16\1\u0122"+
    "\21\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\12\16\1\u0123\14\16\2\0\11\16\1\u0123\14\16\3\0"+
    "\2\16\10\0\1\16\12\0\4\16\4\0\15\16\1\u0124"+
    "\11\16\2\0\14\16\1\u0124\11\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\2\16\1\u0125\3\16\1\u0126"+
    "\20\16\2\0\2\16\1\u0125\3\16\1\u0126\17\16\3\0"+
    "\2\16\10\0\1\16\12\0\4\16\4\0\13\16\1\171"+
    "\13\16\2\0\12\16\1\171\13\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\16\16\1\u0127\10\16\2\0"+
    "\15\16\1\u0127\10\16\3\0\2\16\10\0\1\16\12\0"+
    "\4\16\4\0\4\16\1\u0128\22\16\2\0\4\16\1\u0128"+
    "\21\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\23\16\1\u0129\3\16\2\0\22\16\1\u0129\3\16\3\0"+
    "\2\16\10\0\1\16\12\0\4\16\4\0\10\16\1\u012a"+
    "\16\16\2\0\10\16\1\u012a\15\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\22\16\1\u012b\4\16\2\0"+
    "\21\16\1\u012b\4\16\3\0\2\16\10\0\1\16\12\0"+
    "\4\16\4\0\15\16\1\171\11\16\2\0\14\16\1\171"+
    "\11\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\10\16\1\353\16\16\2\0\10\16\1\353\15\16\3\0"+
    "\2\16\10\0\1\16\12\0\4\16\4\0\13\16\1\343"+
    "\13\16\2\0\12\16\1\343\13\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\7\16\1\171\17\16\2\0"+
    "\7\16\1\171\16\16\3\0\1\16\17\365\1\u012c\77\365"+
    "\17\0\1\366\3\0\1\234\75\0\1\234\114\0\1\16"+
    "\10\0\1\16\12\0\4\16\4\0\27\16\2\0\12\16"+
    "\1\u012d\13\16\3\0\2\16\10\0\1\16\12\0\4\16"+
    "\4\0\27\16\2\0\20\16\1\u0104\5\16\3\0\2\16"+
    "\10\0\1\16\12\0\4\16\4\0\27\16\2\0\21\16"+
    "\1\u0116\4\16\3\0\2\16\10\0\1\16\12\0\4\16"+
    "\4\0\27\16\2\0\1\u012e\25\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\27\16\2\0\4\16\1\u012f"+
    "\21\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\27\16\2\0\20\16\1\u0105\5\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\27\16\2\0\12\16\1\171"+
    "\13\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\27\16\2\0\14\16\1\u0130\6\16\1\u0131\2\16\3\0"+
    "\2\16\10\0\1\16\12\0\4\16\4\0\27\16\2\0"+
    "\21\16\1\u0132\4\16\3\0\2\16\10\0\1\16\12\0"+
    "\4\16\4\0\27\16\2\0\12\16\1\u0133\13\16\3\0"+
    "\2\16\10\0\1\16\12\0\4\16\4\0\27\16\2\0"+
    "\22\16\1\u0134\3\16\3\0\2\16\10\0\1\16\12\0"+
    "\4\16\4\0\27\16\2\0\4\16\1\173\21\16\3\0"+
    "\2\16\10\0\1\16\12\0\4\16\4\0\27\16\2\0"+
    "\20\16\1\171\5\16\3\0\2\16\10\0\1\16\12\0"+
    "\4\16\4\0\27\16\2\0\4\16\1\u0135\21\16\3\0"+
    "\1\16\14\0\1\u0106\116\0\1\u0109\116\0\1\u010b\162\0"+
    "\1\u0136\113\0\1\u0137\113\0\1\u0138\44\0\1\16\10\0"+
    "\1\16\12\0\4\16\4\0\1\u0139\26\16\2\0\26\16"+
    "\3\0\2\16\10\0\1\16\12\0\4\16\4\0\27\16"+
    "\2\0\6\16\1\u013a\17\16\3\0\2\16\10\0\1\16"+
    "\12\0\4\16\4\0\27\16\2\0\11\16\1\171\14\16"+
    "\3\0\2\16\10\0\1\16\12\0\4\16\4\0\27\16"+
    "\2\0\2\16\1\173\23\16\3\0\2\16\10\0\1\16"+
    "\12\0\4\16\4\0\27\16\2\0\10\16\1\u013b\15\16"+
    "\3\0\2\16\10\0\1\16\12\0\4\16\4\0\27\16"+
    "\2\0\7\16\1\171\16\16\3\0\2\16\10\0\1\16"+
    "\12\0\4\16\4\0\27\16\2\0\22\16\1\u013c\3\16"+
    "\3\0\2\16\10\0\1\16\12\0\4\16\4\0\27\16"+
    "\2\0\5\16\1\171\20\16\3\0\2\16\10\0\1\16"+
    "\12\0\4\16\4\0\27\16\2\0\14\16\1\u013d\11\16"+
    "\3\0\1\16\16\335\1\234\1\u011b\77\335\1\16\10\0"+
    "\1\16\12\0\4\16\4\0\26\16\1\171\2\0\26\16"+
    "\3\0\2\16\10\0\1\16\12\0\4\16\4\0\4\16"+
    "\1\u013e\22\16\2\0\4\16\1\u013e\21\16\3\0\2\16"+
    "\10\0\1\16\12\0\4\16\4\0\12\16\1\171\14\16"+
    "\2\0\11\16\1\171\14\16\3\0\2\16\10\0\1\16"+
    "\12\0\4\16\4\0\10\16\1\u013f\16\16\2\0\10\16"+
    "\1\u013f\15\16\3\0\2\16\10\0\1\16\12\0\4\16"+
    "\4\0\22\16\1\u0140\4\16\2\0\21\16\1\u0140\4\16"+
    "\3\0\2\16\10\0\1\16\12\0\4\16\4\0\22\16"+
    "\1\u0141\4\16\2\0\21\16\1\u0141\4\16\3\0\2\16"+
    "\10\0\1\16\12\0\4\16\4\0\6\16\1\u0142\20\16"+
    "\2\0\6\16\1\u0142\17\16\3\0\2\16\10\0\1\16"+
    "\12\0\4\16\4\0\4\16\1\205\22\16\2\0\4\16"+
    "\1\205\21\16\3\0\2\16\10\0\1\16\12\0\4\16"+
    "\4\0\22\16\1\u0143\4\16\2\0\21\16\1\u0143\4\16"+
    "\3\0\2\16\10\0\1\16\12\0\4\16\4\0\4\16"+
    "\1\u0144\22\16\2\0\4\16\1\u0144\21\16\3\0\2\16"+
    "\10\0\1\16\12\0\4\16\4\0\20\16\1\u0145\6\16"+
    "\2\0\17\16\1\u0145\6\16\3\0\2\16\10\0\1\16"+
    "\12\0\4\16\4\0\20\16\1\205\6\16\2\0\17\16"+
    "\1\205\6\16\3\0\2\16\10\0\1\16\12\0\4\16"+
    "\4\0\1\220\26\16\2\0\1\220\25\16\3\0\2\16"+
    "\10\0\1\16\12\0\4\16\4\0\20\16\1\361\6\16"+
    "\2\0\17\16\1\361\6\16\3\0\2\16\10\0\1\16"+
    "\12\0\4\16\4\0\15\16\1\u0146\11\16\2\0\14\16"+
    "\1\u0146\11\16\3\0\2\16\10\0\1\16\12\0\4\16"+
    "\4\0\2\16\1\364\24\16\2\0\2\16\1\364\23\16"+
    "\3\0\1\16\17\365\1\u012c\3\365\1\234\73\365\1\16"+
    "\10\0\1\16\12\0\4\16\4\0\27\16\2\0\4\16"+
    "\1\u0147\21\16\3\0\2\16\10\0\1\16\12\0\4\16"+
    "\4\0\27\16\2\0\22\16\1\u0148\3\16\3\0\2\16"+
    "\10\0\1\16\12\0\4\16\4\0\27\16\2\0\14\16"+
    "\1\u0149\11\16\3\0\2\16\10\0\1\16\12\0\4\16"+
    "\4\0\27\16\2\0\21\16\1\u014a\4\16\3\0\2\16"+
    "\10\0\1\16\12\0\4\16\4\0\27\16\2\0\1\u014b"+
    "\25\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\27\16\2\0\4\16\1\u014c\21\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\27\16\2\0\10\16\1\u014d"+
    "\15\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\27\16\2\0\17\16\1\330\6\16\3\0\1\16\34\0"+
    "\1\u014e\120\0\1\u014f\122\0\1\u0150\54\0\1\16\10\0"+
    "\1\16\12\0\4\16\4\0\13\16\1\171\13\16\2\0"+
    "\26\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\27\16\2\0\12\16\1\35\13\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\27\16\2\0\14\16\1\u0151"+
    "\11\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\27\16\2\0\3\16\1\322\22\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\27\16\2\0\6\16\1\171"+
    "\17\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\1\361\26\16\2\0\1\361\25\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\15\16\1\u0152\11\16\2\0"+
    "\14\16\1\u0152\11\16\3\0\2\16\10\0\1\16\12\0"+
    "\4\16\4\0\16\16\1\171\10\16\2\0\15\16\1\171"+
    "\10\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\10\16\1\u0153\16\16\2\0\10\16\1\u0153\15\16\3\0"+
    "\2\16\10\0\1\16\12\0\4\16\4\0\4\16\1\215"+
    "\22\16\2\0\4\16\1\215\21\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\13\16\1\361\13\16\2\0"+
    "\12\16\1\361\13\16\3\0\2\16\10\0\1\16\12\0"+
    "\4\16\4\0\3\16\1\u0154\23\16\2\0\3\16\1\u0154"+
    "\22\16\3\0\2\16\10\0\1\16\12\0\4\16\4\0"+
    "\1\u0155\26\16\2\0\1\u0155\25\16\3\0\2\16\10\0"+
    "\1\16\12\0\4\16\4\0\6\16\1\171\20\16\2\0"+
    "\6\16\1\171\17\16\3\0\2\16\10\0\1\16\12\0"+
    "\4\16\4\0\27\16\2\0\1\330\25\16\3\0\2\16"+
    "\10\0\1\16\12\0\4\16\4\0\27\16\2\0\12\16"+
    "\1\245\13\16\3\0\2\16\10\0\1\16\12\0\4\16"+
    "\4\0\27\16\2\0\3\16\1\u0104\22\16\3\0\2\16"+
    "\10\0\1\16\12\0\4\16\4\0\27\16\2\0\12\16"+
    "\1\330\13\16\3\0\2\16\10\0\1\16\12\0\4\16"+
    "\4\0\27\16\2\0\21\16\1\322\4\16\3\0\2\16"+
    "\10\0\1\16\12\0\4\16\4\0\27\16\2\0\2\16"+
    "\1\u0156\23\16\3\0\2\16\10\0\1\16\12\0\4\16"+
    "\4\0\27\16\2\0\2\16\1\171\23\16\3\0\1\16"+
    "\34\0\1\u0157\136\0\1\u0158\42\0\1\16\10\0\1\16"+
    "\12\0\4\16\4\0\27\16\2\0\22\16\1\322\3\16"+
    "\3\0\2\16\10\0\1\16\12\0\4\16\4\0\23\16"+
    "\1\343\3\16\2\0\22\16\1\343\3\16\3\0\2\16"+
    "\10\0\1\16\12\0\4\16\4\0\16\16\1\361\10\16"+
    "\2\0\15\16\1\361\10\16\3\0\2\16\10\0\1\16"+
    "\12\0\4\16\4\0\23\16\1\u0159\3\16\2\0\22\16"+
    "\1\u0159\3\16\3\0\2\16\10\0\1\16\12\0\4\16"+
    "\4\0\14\16\1\171\12\16\2\0\13\16\1\171\12\16"+
    "\3\0\2\16\10\0\1\16\12\0\4\16\4\0\27\16"+
    "\2\0\21\16\1\u015a\4\16\3\0\1\16\47\0\1\u015b"+
    "\103\0\1\u015c\62\0\1\16\10\0\1\16\12\0\4\16"+
    "\4\0\20\16\1\343\6\16\2\0\17\16\1\343\6\16"+
    "\3\0\2\16\10\0\1\16\12\0\4\16\4\0\27\16"+
    "\2\0\4\16\1\333\21\16\3\0\1\16\50\0\1\u015d"+
    "\102\0\1\u015e\62\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[22436];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\2\11\1\1\2\11\3\1\4\11\22\1\1\11"+
    "\25\1\1\11\1\1\1\11\20\1\1\11\1\0\10\1"+
    "\1\11\6\1\1\0\6\1\1\11\5\1\1\11\2\0"+
    "\23\1\1\0\26\1\1\0\1\11\1\0\36\1\1\11"+
    "\4\1\2\11\2\1\6\11\2\0\20\1\2\0\26\1"+
    "\2\0\17\1\1\11\2\0\1\11\1\1\1\11\2\0"+
    "\1\11\3\0\11\1\1\0\20\1\1\0\11\1\3\0"+
    "\25\1\1\11\2\0\6\1\2\0\2\1\1\11\2\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[350];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    StringBuilder string;
    private Coloreado coloreado(TypeTkn type){
        return new Coloreado(type, yychar, yylength());
    }

    private Coloreado coloreadoStr(TypeTkn type){
        return new Coloreado(type, yychar - string.toString().length() - 1, string.toString().length() + 2);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PintorLexer(java.io.Reader in) {
      string = new StringBuilder();
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Coloreado yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return coloreado(TypeTkn.ERROR);
            }
          // fall through
          case 39: break;
          case 2:
            { /* ignoramos */
            }
          // fall through
          case 40: break;
          case 3:
            { return coloreado(TypeTkn.COMPARATOR);
            }
          // fall through
          case 41: break;
          case 4:
            { string.setLength(0); yybegin(STRING);
            }
          // fall through
          case 42: break;
          case 5:
            { return coloreado(TypeTkn.ID);
            }
          // fall through
          case 43: break;
          case 6:
            { return coloreado(TypeTkn.OPERATOR);
            }
          // fall through
          case 44: break;
          case 7:
            { string.setLength(0); yybegin(CHARLITERAL);
            }
          // fall through
          case 45: break;
          case 8:
            { return coloreado(TypeTkn.DELIMITATOR);
            }
          // fall through
          case 46: break;
          case 9:
            { return coloreado(TypeTkn.OTHERS);
            }
          // fall through
          case 47: break;
          case 10:
            { return coloreado(TypeTkn.BOOLEANS);
            }
          // fall through
          case 48: break;
          case 11:
            { return coloreado(TypeTkn.LITERALS);
            }
          // fall through
          case 49: break;
          case 12:
            { string.setLength(0); yybegin(P_CHAR_STRING);
            }
          // fall through
          case 50: break;
          case 13:
            { string.setLength(0); yybegin(JSTRING);
            }
          // fall through
          case 51: break;
          case 14:
            { string.setLength(0); yybegin(JCHARLITERAL);
            }
          // fall through
          case 52: break;
          case 15:
            { return coloreadoStr(TypeTkn.ERROR);
            }
          // fall through
          case 53: break;
          case 16:
            { string.append( yytext() );
            }
          // fall through
          case 54: break;
          case 17:
            { yybegin(PASCAL); return coloreadoStr(TypeTkn.STRINGS);
            }
          // fall through
          case 55: break;
          case 18:
            { yybegin(YYINITIAL); return coloreadoStr(TypeTkn.STRINGS);
            }
          // fall through
          case 56: break;
          case 19:
            { yybegin(JAVA); return coloreadoStr(TypeTkn.STRINGS);
            }
          // fall through
          case 57: break;
          case 20:
            { return coloreado(TypeTkn.RESERVED_WORD);
            }
          // fall through
          case 58: break;
          case 21:
            { return coloreado(TypeTkn.COMMENTARY);
            }
          // fall through
          case 59: break;
          case 22:
            { string.append( '\"' );
            }
          // fall through
          case 60: break;
          case 23:
            { string.append( '\'' );
            }
          // fall through
          case 61: break;
          case 24:
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                                                                   string.append( val );
            }
          // fall through
          case 62: break;
          case 25:
            { string.append( '\\' );
            }
          // fall through
          case 63: break;
          case 26:
            { string.append( '\b' );
            }
          // fall through
          case 64: break;
          case 27:
            { string.append( '\f' );
            }
          // fall through
          case 65: break;
          case 28:
            { string.append( '\n' );
            }
          // fall through
          case 66: break;
          case 29:
            { string.append( '\r' );
            }
          // fall through
          case 67: break;
          case 30:
            { string.append( '\t' );
            }
          // fall through
          case 68: break;
          case 31:
            { yybegin(JAVA); return coloreado(TypeTkn.STRINGS);
            }
          // fall through
          case 69: break;
          case 32:
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                                                string.append( val );
            }
          // fall through
          case 70: break;
          case 33:
            { yybegin(YYINITIAL);
                                                int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
                                                return coloreadoStr(TypeTkn.STRINGS);
            }
          // fall through
          case 71: break;
          case 34:
            { yybegin(PASCAL);
                                                            int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
                                                          return coloreadoStr(TypeTkn.STRINGS);
            }
          // fall through
          case 72: break;
          case 35:
            { yybegin(JAVA);
                                                int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
                                                return coloreadoStr(TypeTkn.STRINGS);
            }
          // fall through
          case 73: break;
          case 36:
            { yybegin(JAVA); return coloreado(TypeTkn.SECTION);
            }
          // fall through
          case 74: break;
          case 37:
            { yybegin(PASCAL); return coloreado(TypeTkn.SECTION);
            }
          // fall through
          case 75: break;
          case 38:
            { yybegin(YYINITIAL); return coloreado(TypeTkn.SECTION);
            }
          // fall through
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
